
AmazonEnMieux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052d4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800545c  0800545c  0001545c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054a4  080054a4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080054a4  080054a4  000154a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054ac  080054ac  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054ac  080054ac  000154ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054b0  080054b0  000154b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080054b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  2000001c  080054d0  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  080054d0  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eae6  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c90  00000000  00000000  0002eb32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  000307c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de0  00000000  00000000  00031650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f98  00000000  00000000  00032430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee32  00000000  00000000  000583c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efc11  00000000  00000000  000671fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00156e0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e78  00000000  00000000  00156e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005444 	.word	0x08005444

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08005444 	.word	0x08005444

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_uldivmod>:
 80007d4:	b953      	cbnz	r3, 80007ec <__aeabi_uldivmod+0x18>
 80007d6:	b94a      	cbnz	r2, 80007ec <__aeabi_uldivmod+0x18>
 80007d8:	2900      	cmp	r1, #0
 80007da:	bf08      	it	eq
 80007dc:	2800      	cmpeq	r0, #0
 80007de:	bf1c      	itt	ne
 80007e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80007e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80007e8:	f000 b96e 	b.w	8000ac8 <__aeabi_idiv0>
 80007ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f4:	f000 f806 	bl	8000804 <__udivmoddi4>
 80007f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr

08000804 <__udivmoddi4>:
 8000804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000808:	9d08      	ldr	r5, [sp, #32]
 800080a:	4604      	mov	r4, r0
 800080c:	468c      	mov	ip, r1
 800080e:	2b00      	cmp	r3, #0
 8000810:	f040 8083 	bne.w	800091a <__udivmoddi4+0x116>
 8000814:	428a      	cmp	r2, r1
 8000816:	4617      	mov	r7, r2
 8000818:	d947      	bls.n	80008aa <__udivmoddi4+0xa6>
 800081a:	fab2 f282 	clz	r2, r2
 800081e:	b142      	cbz	r2, 8000832 <__udivmoddi4+0x2e>
 8000820:	f1c2 0020 	rsb	r0, r2, #32
 8000824:	fa24 f000 	lsr.w	r0, r4, r0
 8000828:	4091      	lsls	r1, r2
 800082a:	4097      	lsls	r7, r2
 800082c:	ea40 0c01 	orr.w	ip, r0, r1
 8000830:	4094      	lsls	r4, r2
 8000832:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000836:	0c23      	lsrs	r3, r4, #16
 8000838:	fbbc f6f8 	udiv	r6, ip, r8
 800083c:	fa1f fe87 	uxth.w	lr, r7
 8000840:	fb08 c116 	mls	r1, r8, r6, ip
 8000844:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000848:	fb06 f10e 	mul.w	r1, r6, lr
 800084c:	4299      	cmp	r1, r3
 800084e:	d909      	bls.n	8000864 <__udivmoddi4+0x60>
 8000850:	18fb      	adds	r3, r7, r3
 8000852:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000856:	f080 8119 	bcs.w	8000a8c <__udivmoddi4+0x288>
 800085a:	4299      	cmp	r1, r3
 800085c:	f240 8116 	bls.w	8000a8c <__udivmoddi4+0x288>
 8000860:	3e02      	subs	r6, #2
 8000862:	443b      	add	r3, r7
 8000864:	1a5b      	subs	r3, r3, r1
 8000866:	b2a4      	uxth	r4, r4
 8000868:	fbb3 f0f8 	udiv	r0, r3, r8
 800086c:	fb08 3310 	mls	r3, r8, r0, r3
 8000870:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000874:	fb00 fe0e 	mul.w	lr, r0, lr
 8000878:	45a6      	cmp	lr, r4
 800087a:	d909      	bls.n	8000890 <__udivmoddi4+0x8c>
 800087c:	193c      	adds	r4, r7, r4
 800087e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000882:	f080 8105 	bcs.w	8000a90 <__udivmoddi4+0x28c>
 8000886:	45a6      	cmp	lr, r4
 8000888:	f240 8102 	bls.w	8000a90 <__udivmoddi4+0x28c>
 800088c:	3802      	subs	r0, #2
 800088e:	443c      	add	r4, r7
 8000890:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000894:	eba4 040e 	sub.w	r4, r4, lr
 8000898:	2600      	movs	r6, #0
 800089a:	b11d      	cbz	r5, 80008a4 <__udivmoddi4+0xa0>
 800089c:	40d4      	lsrs	r4, r2
 800089e:	2300      	movs	r3, #0
 80008a0:	e9c5 4300 	strd	r4, r3, [r5]
 80008a4:	4631      	mov	r1, r6
 80008a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008aa:	b902      	cbnz	r2, 80008ae <__udivmoddi4+0xaa>
 80008ac:	deff      	udf	#255	; 0xff
 80008ae:	fab2 f282 	clz	r2, r2
 80008b2:	2a00      	cmp	r2, #0
 80008b4:	d150      	bne.n	8000958 <__udivmoddi4+0x154>
 80008b6:	1bcb      	subs	r3, r1, r7
 80008b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008bc:	fa1f f887 	uxth.w	r8, r7
 80008c0:	2601      	movs	r6, #1
 80008c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80008c6:	0c21      	lsrs	r1, r4, #16
 80008c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80008cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d0:	fb08 f30c 	mul.w	r3, r8, ip
 80008d4:	428b      	cmp	r3, r1
 80008d6:	d907      	bls.n	80008e8 <__udivmoddi4+0xe4>
 80008d8:	1879      	adds	r1, r7, r1
 80008da:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80008de:	d202      	bcs.n	80008e6 <__udivmoddi4+0xe2>
 80008e0:	428b      	cmp	r3, r1
 80008e2:	f200 80e9 	bhi.w	8000ab8 <__udivmoddi4+0x2b4>
 80008e6:	4684      	mov	ip, r0
 80008e8:	1ac9      	subs	r1, r1, r3
 80008ea:	b2a3      	uxth	r3, r4
 80008ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80008f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80008f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80008f8:	fb08 f800 	mul.w	r8, r8, r0
 80008fc:	45a0      	cmp	r8, r4
 80008fe:	d907      	bls.n	8000910 <__udivmoddi4+0x10c>
 8000900:	193c      	adds	r4, r7, r4
 8000902:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000906:	d202      	bcs.n	800090e <__udivmoddi4+0x10a>
 8000908:	45a0      	cmp	r8, r4
 800090a:	f200 80d9 	bhi.w	8000ac0 <__udivmoddi4+0x2bc>
 800090e:	4618      	mov	r0, r3
 8000910:	eba4 0408 	sub.w	r4, r4, r8
 8000914:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000918:	e7bf      	b.n	800089a <__udivmoddi4+0x96>
 800091a:	428b      	cmp	r3, r1
 800091c:	d909      	bls.n	8000932 <__udivmoddi4+0x12e>
 800091e:	2d00      	cmp	r5, #0
 8000920:	f000 80b1 	beq.w	8000a86 <__udivmoddi4+0x282>
 8000924:	2600      	movs	r6, #0
 8000926:	e9c5 0100 	strd	r0, r1, [r5]
 800092a:	4630      	mov	r0, r6
 800092c:	4631      	mov	r1, r6
 800092e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000932:	fab3 f683 	clz	r6, r3
 8000936:	2e00      	cmp	r6, #0
 8000938:	d14a      	bne.n	80009d0 <__udivmoddi4+0x1cc>
 800093a:	428b      	cmp	r3, r1
 800093c:	d302      	bcc.n	8000944 <__udivmoddi4+0x140>
 800093e:	4282      	cmp	r2, r0
 8000940:	f200 80b8 	bhi.w	8000ab4 <__udivmoddi4+0x2b0>
 8000944:	1a84      	subs	r4, r0, r2
 8000946:	eb61 0103 	sbc.w	r1, r1, r3
 800094a:	2001      	movs	r0, #1
 800094c:	468c      	mov	ip, r1
 800094e:	2d00      	cmp	r5, #0
 8000950:	d0a8      	beq.n	80008a4 <__udivmoddi4+0xa0>
 8000952:	e9c5 4c00 	strd	r4, ip, [r5]
 8000956:	e7a5      	b.n	80008a4 <__udivmoddi4+0xa0>
 8000958:	f1c2 0320 	rsb	r3, r2, #32
 800095c:	fa20 f603 	lsr.w	r6, r0, r3
 8000960:	4097      	lsls	r7, r2
 8000962:	fa01 f002 	lsl.w	r0, r1, r2
 8000966:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800096a:	40d9      	lsrs	r1, r3
 800096c:	4330      	orrs	r0, r6
 800096e:	0c03      	lsrs	r3, r0, #16
 8000970:	fbb1 f6fe 	udiv	r6, r1, lr
 8000974:	fa1f f887 	uxth.w	r8, r7
 8000978:	fb0e 1116 	mls	r1, lr, r6, r1
 800097c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000980:	fb06 f108 	mul.w	r1, r6, r8
 8000984:	4299      	cmp	r1, r3
 8000986:	fa04 f402 	lsl.w	r4, r4, r2
 800098a:	d909      	bls.n	80009a0 <__udivmoddi4+0x19c>
 800098c:	18fb      	adds	r3, r7, r3
 800098e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000992:	f080 808d 	bcs.w	8000ab0 <__udivmoddi4+0x2ac>
 8000996:	4299      	cmp	r1, r3
 8000998:	f240 808a 	bls.w	8000ab0 <__udivmoddi4+0x2ac>
 800099c:	3e02      	subs	r6, #2
 800099e:	443b      	add	r3, r7
 80009a0:	1a5b      	subs	r3, r3, r1
 80009a2:	b281      	uxth	r1, r0
 80009a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80009a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80009ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009b0:	fb00 f308 	mul.w	r3, r0, r8
 80009b4:	428b      	cmp	r3, r1
 80009b6:	d907      	bls.n	80009c8 <__udivmoddi4+0x1c4>
 80009b8:	1879      	adds	r1, r7, r1
 80009ba:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80009be:	d273      	bcs.n	8000aa8 <__udivmoddi4+0x2a4>
 80009c0:	428b      	cmp	r3, r1
 80009c2:	d971      	bls.n	8000aa8 <__udivmoddi4+0x2a4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	4439      	add	r1, r7
 80009c8:	1acb      	subs	r3, r1, r3
 80009ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80009ce:	e778      	b.n	80008c2 <__udivmoddi4+0xbe>
 80009d0:	f1c6 0c20 	rsb	ip, r6, #32
 80009d4:	fa03 f406 	lsl.w	r4, r3, r6
 80009d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80009dc:	431c      	orrs	r4, r3
 80009de:	fa20 f70c 	lsr.w	r7, r0, ip
 80009e2:	fa01 f306 	lsl.w	r3, r1, r6
 80009e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80009ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80009ee:	431f      	orrs	r7, r3
 80009f0:	0c3b      	lsrs	r3, r7, #16
 80009f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80009f6:	fa1f f884 	uxth.w	r8, r4
 80009fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80009fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a02:	fb09 fa08 	mul.w	sl, r9, r8
 8000a06:	458a      	cmp	sl, r1
 8000a08:	fa02 f206 	lsl.w	r2, r2, r6
 8000a0c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x220>
 8000a12:	1861      	adds	r1, r4, r1
 8000a14:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000a18:	d248      	bcs.n	8000aac <__udivmoddi4+0x2a8>
 8000a1a:	458a      	cmp	sl, r1
 8000a1c:	d946      	bls.n	8000aac <__udivmoddi4+0x2a8>
 8000a1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000a22:	4421      	add	r1, r4
 8000a24:	eba1 010a 	sub.w	r1, r1, sl
 8000a28:	b2bf      	uxth	r7, r7
 8000a2a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a2e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a32:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000a36:	fb00 f808 	mul.w	r8, r0, r8
 8000a3a:	45b8      	cmp	r8, r7
 8000a3c:	d907      	bls.n	8000a4e <__udivmoddi4+0x24a>
 8000a3e:	19e7      	adds	r7, r4, r7
 8000a40:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000a44:	d22e      	bcs.n	8000aa4 <__udivmoddi4+0x2a0>
 8000a46:	45b8      	cmp	r8, r7
 8000a48:	d92c      	bls.n	8000aa4 <__udivmoddi4+0x2a0>
 8000a4a:	3802      	subs	r0, #2
 8000a4c:	4427      	add	r7, r4
 8000a4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a52:	eba7 0708 	sub.w	r7, r7, r8
 8000a56:	fba0 8902 	umull	r8, r9, r0, r2
 8000a5a:	454f      	cmp	r7, r9
 8000a5c:	46c6      	mov	lr, r8
 8000a5e:	4649      	mov	r1, r9
 8000a60:	d31a      	bcc.n	8000a98 <__udivmoddi4+0x294>
 8000a62:	d017      	beq.n	8000a94 <__udivmoddi4+0x290>
 8000a64:	b15d      	cbz	r5, 8000a7e <__udivmoddi4+0x27a>
 8000a66:	ebb3 020e 	subs.w	r2, r3, lr
 8000a6a:	eb67 0701 	sbc.w	r7, r7, r1
 8000a6e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a72:	40f2      	lsrs	r2, r6
 8000a74:	ea4c 0202 	orr.w	r2, ip, r2
 8000a78:	40f7      	lsrs	r7, r6
 8000a7a:	e9c5 2700 	strd	r2, r7, [r5]
 8000a7e:	2600      	movs	r6, #0
 8000a80:	4631      	mov	r1, r6
 8000a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a86:	462e      	mov	r6, r5
 8000a88:	4628      	mov	r0, r5
 8000a8a:	e70b      	b.n	80008a4 <__udivmoddi4+0xa0>
 8000a8c:	4606      	mov	r6, r0
 8000a8e:	e6e9      	b.n	8000864 <__udivmoddi4+0x60>
 8000a90:	4618      	mov	r0, r3
 8000a92:	e6fd      	b.n	8000890 <__udivmoddi4+0x8c>
 8000a94:	4543      	cmp	r3, r8
 8000a96:	d2e5      	bcs.n	8000a64 <__udivmoddi4+0x260>
 8000a98:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a9c:	eb69 0104 	sbc.w	r1, r9, r4
 8000aa0:	3801      	subs	r0, #1
 8000aa2:	e7df      	b.n	8000a64 <__udivmoddi4+0x260>
 8000aa4:	4608      	mov	r0, r1
 8000aa6:	e7d2      	b.n	8000a4e <__udivmoddi4+0x24a>
 8000aa8:	4660      	mov	r0, ip
 8000aaa:	e78d      	b.n	80009c8 <__udivmoddi4+0x1c4>
 8000aac:	4681      	mov	r9, r0
 8000aae:	e7b9      	b.n	8000a24 <__udivmoddi4+0x220>
 8000ab0:	4666      	mov	r6, ip
 8000ab2:	e775      	b.n	80009a0 <__udivmoddi4+0x19c>
 8000ab4:	4630      	mov	r0, r6
 8000ab6:	e74a      	b.n	800094e <__udivmoddi4+0x14a>
 8000ab8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000abc:	4439      	add	r1, r7
 8000abe:	e713      	b.n	80008e8 <__udivmoddi4+0xe4>
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	443c      	add	r4, r7
 8000ac4:	e724      	b.n	8000910 <__udivmoddi4+0x10c>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_idiv0>:
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000acc:	b5b0      	push	{r4, r5, r7, lr}
 8000ace:	b08a      	sub	sp, #40	; 0x28
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad2:	f000 ffdc 	bl	8001a8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad6:	f000 f8ef 	bl	8000cb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ada:	f000 fa91 	bl	8001000 <MX_GPIO_Init>
  MX_UART4_Init();
 8000ade:	f000 fa5f 	bl	8000fa0 <MX_UART4_Init>
  MX_TIM7_Init();
 8000ae2:	f000 f997 	bl	8000e14 <MX_TIM7_Init>
  MX_TIM3_Init();
 8000ae6:	f000 f939 	bl	8000d5c <MX_TIM3_Init>
  MX_TIM8_Init();
 8000aea:	f000 f9c9 	bl	8000e80 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Init(&htim7);
 8000aee:	486c      	ldr	r0, [pc, #432]	; (8000ca0 <main+0x1d4>)
 8000af0:	f002 fe76 	bl	80037e0 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim7);
 8000af4:	486a      	ldr	r0, [pc, #424]	; (8000ca0 <main+0x1d4>)
 8000af6:	f002 fecb 	bl	8003890 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000afa:	2108      	movs	r1, #8
 8000afc:	4869      	ldr	r0, [pc, #420]	; (8000ca4 <main+0x1d8>)
 8000afe:	f002 ff87 	bl	8003a10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000b02:	2100      	movs	r1, #0
 8000b04:	4868      	ldr	r0, [pc, #416]	; (8000ca8 <main+0x1dc>)
 8000b06:	f002 ff83 	bl	8003a10 <HAL_TIM_PWM_Start>

  sensor_state = 0;
 8000b0a:	4b68      	ldr	r3, [pc, #416]	; (8000cac <main+0x1e0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
  sensor_state += HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) ? 1 : 0; // Sensor Gauche
 8000b10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b18:	f001 fb0e 	bl	8002138 <HAL_GPIO_ReadPin>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	bf14      	ite	ne
 8000b22:	2301      	movne	r3, #1
 8000b24:	2300      	moveq	r3, #0
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b60      	ldr	r3, [pc, #384]	; (8000cac <main+0x1e0>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	4a5e      	ldr	r2, [pc, #376]	; (8000cac <main+0x1e0>)
 8000b32:	6013      	str	r3, [r2, #0]
  sensor_state += HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) ? 2 : 0; // Sensor Droit
 8000b34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3c:	f001 fafc 	bl	8002138 <HAL_GPIO_ReadPin>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <main+0x7e>
 8000b46:	2202      	movs	r2, #2
 8000b48:	e000      	b.n	8000b4c <main+0x80>
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	4b57      	ldr	r3, [pc, #348]	; (8000cac <main+0x1e0>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4413      	add	r3, r2
 8000b52:	4a56      	ldr	r2, [pc, #344]	; (8000cac <main+0x1e0>)
 8000b54:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  if (!boutton())
 8000b56:	f000 fb1f 	bl	8001198 <boutton>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d116      	bne.n	8000b8e <main+0xc2>
	  {
		  button = button == 0 ? 1 : 0;
 8000b60:	4b53      	ldr	r3, [pc, #332]	; (8000cb0 <main+0x1e4>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	bf0c      	ite	eq
 8000b68:	2301      	moveq	r3, #1
 8000b6a:	2300      	movne	r3, #0
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4b4f      	ldr	r3, [pc, #316]	; (8000cb0 <main+0x1e4>)
 8000b72:	601a      	str	r2, [r3, #0]

		  char charButton = button == 0 ? '0' : '1';
 8000b74:	4b4e      	ldr	r3, [pc, #312]	; (8000cb0 <main+0x1e4>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d101      	bne.n	8000b80 <main+0xb4>
 8000b7c:	2330      	movs	r3, #48	; 0x30
 8000b7e:	e000      	b.n	8000b82 <main+0xb6>
 8000b80:	2331      	movs	r3, #49	; 0x31
 8000b82:	77fb      	strb	r3, [r7, #31]

		  nodemcu_send('1', charButton);
 8000b84:	7ffb      	ldrb	r3, [r7, #31]
 8000b86:	4619      	mov	r1, r3
 8000b88:	2031      	movs	r0, #49	; 0x31
 8000b8a:	f000 fae9 	bl	8001160 <nodemcu_send>
	  }

      /* Creation du message vide */
      char full_path[4];
      full_path[0] = '\0';
 8000b8e:	2300      	movs	r3, #0
 8000b90:	723b      	strb	r3, [r7, #8]
      /* Reception du message avec un timeout de 2s */
      HAL_UART_Receive(&huart4, full_path, 4, 2000);
 8000b92:	f107 0108 	add.w	r1, r7, #8
 8000b96:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b9a:	2204      	movs	r2, #4
 8000b9c:	4845      	ldr	r0, [pc, #276]	; (8000cb4 <main+0x1e8>)
 8000b9e:	f003 ff61 	bl	8004a64 <HAL_UART_Receive>
      /* Attente */
      //HAL_Delay(100);

      if (full_path[0] == 'P')
 8000ba2:	7a3b      	ldrb	r3, [r7, #8]
 8000ba4:	2b50      	cmp	r3, #80	; 0x50
 8000ba6:	d1d6      	bne.n	8000b56 <main+0x8a>
      {
 8000ba8:	466b      	mov	r3, sp
 8000baa:	461d      	mov	r5, r3
    	  int path_length = full_path[1] - 48;
 8000bac:	7a7b      	ldrb	r3, [r7, #9]
 8000bae:	3b30      	subs	r3, #48	; 0x30
 8000bb0:	61bb      	str	r3, [r7, #24]
    	  char paths[path_length][4];
 8000bb2:	69bc      	ldr	r4, [r7, #24]
 8000bb4:	1e63      	subs	r3, r4, #1
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	4623      	mov	r3, r4
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f04f 0100 	mov.w	r1, #0
 8000bc0:	f04f 0200 	mov.w	r2, #0
 8000bc4:	f04f 0300 	mov.w	r3, #0
 8000bc8:	014b      	lsls	r3, r1, #5
 8000bca:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000bce:	0142      	lsls	r2, r0, #5
 8000bd0:	4623      	mov	r3, r4
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f04f 0100 	mov.w	r1, #0
 8000bd8:	f04f 0200 	mov.w	r2, #0
 8000bdc:	f04f 0300 	mov.w	r3, #0
 8000be0:	014b      	lsls	r3, r1, #5
 8000be2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000be6:	0142      	lsls	r2, r0, #5
 8000be8:	4623      	mov	r3, r4
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	3307      	adds	r3, #7
 8000bee:	08db      	lsrs	r3, r3, #3
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	ebad 0d03 	sub.w	sp, sp, r3
 8000bf6:	466b      	mov	r3, sp
 8000bf8:	3300      	adds	r3, #0
 8000bfa:	613b      	str	r3, [r7, #16]

    	  for (int i = 0; i < path_length;)
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
 8000c00:	e02e      	b.n	8000c60 <main+0x194>
    	  {
    		  char part_path[4];
    		  part_path[1] = '\0';
 8000c02:	2300      	movs	r3, #0
 8000c04:	717b      	strb	r3, [r7, #5]

    		  HAL_UART_Receive(&huart4, part_path, 4, 2000);
 8000c06:	1d39      	adds	r1, r7, #4
 8000c08:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c0c:	2204      	movs	r2, #4
 8000c0e:	4829      	ldr	r0, [pc, #164]	; (8000cb4 <main+0x1e8>)
 8000c10:	f003 ff28 	bl	8004a64 <HAL_UART_Receive>

    		  if (part_path[1] == 'L' || part_path[1] == 'R')
 8000c14:	797b      	ldrb	r3, [r7, #5]
 8000c16:	2b4c      	cmp	r3, #76	; 0x4c
 8000c18:	d002      	beq.n	8000c20 <main+0x154>
 8000c1a:	797b      	ldrb	r3, [r7, #5]
 8000c1c:	2b52      	cmp	r3, #82	; 0x52
 8000c1e:	d11f      	bne.n	8000c60 <main+0x194>
    		  {
    			  int path_id = part_path[0] - 48;
 8000c20:	793b      	ldrb	r3, [r7, #4]
 8000c22:	3b30      	subs	r3, #48	; 0x30
 8000c24:	60fb      	str	r3, [r7, #12]
    			  paths[path_id][0] = part_path[0];
 8000c26:	7939      	ldrb	r1, [r7, #4]
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    			  paths[path_id][1] = part_path[1];
 8000c30:	7979      	ldrb	r1, [r7, #5]
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	4413      	add	r3, r2
 8000c3a:	460a      	mov	r2, r1
 8000c3c:	705a      	strb	r2, [r3, #1]
    			  paths[path_id][2] = part_path[2];
 8000c3e:	79b9      	ldrb	r1, [r7, #6]
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	4413      	add	r3, r2
 8000c48:	460a      	mov	r2, r1
 8000c4a:	709a      	strb	r2, [r3, #2]
    			  paths[path_id][3] = part_path[3];
 8000c4c:	79f9      	ldrb	r1, [r7, #7]
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	4413      	add	r3, r2
 8000c56:	460a      	mov	r2, r1
 8000c58:	70da      	strb	r2, [r3, #3]
    			  i++;
 8000c5a:	6a3b      	ldr	r3, [r7, #32]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	623b      	str	r3, [r7, #32]
    	  for (int i = 0; i < path_length;)
 8000c60:	6a3a      	ldr	r2, [r7, #32]
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	dbcc      	blt.n	8000c02 <main+0x136>
    		  }
    	  }

    	  for (int i = 0; i < path_length; i++)
 8000c68:	2300      	movs	r3, #0
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c6c:	e012      	b.n	8000c94 <main+0x1c8>
    	  {
    		  follow_path(paths[i][1]);
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	785b      	ldrb	r3, [r3, #1]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 fa99 	bl	80011b0 <follow_path>
			  nodemcu_send('2', paths[i][0]);
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c82:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8000c86:	4619      	mov	r1, r3
 8000c88:	2032      	movs	r0, #50	; 0x32
 8000c8a:	f000 fa69 	bl	8001160 <nodemcu_send>
    	  for (int i = 0; i < path_length; i++)
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c90:	3301      	adds	r3, #1
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
 8000c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	dbe8      	blt.n	8000c6e <main+0x1a2>
 8000c9c:	46ad      	mov	sp, r5
  {
 8000c9e:	e75a      	b.n	8000b56 <main+0x8a>
 8000ca0:	20000164 	.word	0x20000164
 8000ca4:	20000094 	.word	0x20000094
 8000ca8:	20000048 	.word	0x20000048
 8000cac:	20000044 	.word	0x20000044
 8000cb0:	2000000c 	.word	0x2000000c
 8000cb4:	200000e0 	.word	0x200000e0

08000cb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b096      	sub	sp, #88	; 0x58
 8000cbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	2244      	movs	r2, #68	; 0x44
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f004 fbb4 	bl	8005434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ccc:	463b      	mov	r3, r7
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
 8000cd8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cda:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cde:	f001 fa81 	bl	80021e4 <HAL_PWREx_ControlVoltageScaling>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ce8:	f000 fd02 	bl	80016f0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000cec:	2310      	movs	r3, #16
 8000cee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000cf8:	2360      	movs	r3, #96	; 0x60
 8000cfa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d00:	2301      	movs	r3, #1
 8000d02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d04:	2301      	movs	r3, #1
 8000d06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000d08:	2328      	movs	r3, #40	; 0x28
 8000d0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d0c:	2307      	movs	r3, #7
 8000d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d10:	2302      	movs	r3, #2
 8000d12:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d14:	2302      	movs	r3, #2
 8000d16:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f001 fab7 	bl	8002290 <HAL_RCC_OscConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000d28:	f000 fce2 	bl	80016f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2c:	230f      	movs	r3, #15
 8000d2e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d30:	2303      	movs	r3, #3
 8000d32:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d40:	463b      	mov	r3, r7
 8000d42:	2104      	movs	r1, #4
 8000d44:	4618      	mov	r0, r3
 8000d46:	f001 fe89 	bl	8002a5c <HAL_RCC_ClockConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d50:	f000 fcce 	bl	80016f0 <Error_Handler>
  }
}
 8000d54:	bf00      	nop
 8000d56:	3758      	adds	r7, #88	; 0x58
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d6e:	463b      	mov	r3, r7
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
 8000d7c:	615a      	str	r2, [r3, #20]
 8000d7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d80:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <MX_TIM3_Init+0xb0>)
 8000d82:	4a23      	ldr	r2, [pc, #140]	; (8000e10 <MX_TIM3_Init+0xb4>)
 8000d84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8000d86:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <MX_TIM3_Init+0xb0>)
 8000d88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d8c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8e:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <MX_TIM3_Init+0xb0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000d94:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <MX_TIM3_Init+0xb0>)
 8000d96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9c:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <MX_TIM3_Init+0xb0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da2:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <MX_TIM3_Init+0xb0>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000da8:	4818      	ldr	r0, [pc, #96]	; (8000e0c <MX_TIM3_Init+0xb0>)
 8000daa:	f002 fdd9 	bl	8003960 <HAL_TIM_PWM_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8000db4:	f000 fc9c 	bl	80016f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4811      	ldr	r0, [pc, #68]	; (8000e0c <MX_TIM3_Init+0xb0>)
 8000dc8:	f003 fc64 	bl	8004694 <HAL_TIMEx_MasterConfigSynchronization>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000dd2:	f000 fc8d 	bl	80016f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dd6:	2360      	movs	r3, #96	; 0x60
 8000dd8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000de6:	463b      	mov	r3, r7
 8000de8:	2208      	movs	r2, #8
 8000dea:	4619      	mov	r1, r3
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <MX_TIM3_Init+0xb0>)
 8000dee:	f002 ffab 	bl	8003d48 <HAL_TIM_PWM_ConfigChannel>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000df8:	f000 fc7a 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dfc:	4803      	ldr	r0, [pc, #12]	; (8000e0c <MX_TIM3_Init+0xb0>)
 8000dfe:	f000 fcf5 	bl	80017ec <HAL_TIM_MspPostInit>

}
 8000e02:	bf00      	nop
 8000e04:	3728      	adds	r7, #40	; 0x28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000094 	.word	0x20000094
 8000e10:	40000400 	.word	0x40000400

08000e14 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <MX_TIM7_Init+0x64>)
 8000e26:	4a15      	ldr	r2, [pc, #84]	; (8000e7c <MX_TIM7_Init+0x68>)
 8000e28:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 79;
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <MX_TIM7_Init+0x64>)
 8000e2c:	224f      	movs	r2, #79	; 0x4f
 8000e2e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <MX_TIM7_Init+0x64>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <MX_TIM7_Init+0x64>)
 8000e38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e3c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <MX_TIM7_Init+0x64>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000e44:	480c      	ldr	r0, [pc, #48]	; (8000e78 <MX_TIM7_Init+0x64>)
 8000e46:	f002 fccb 	bl	80037e0 <HAL_TIM_Base_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000e50:	f000 fc4e 	bl	80016f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e54:	2300      	movs	r3, #0
 8000e56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <MX_TIM7_Init+0x64>)
 8000e62:	f003 fc17 	bl	8004694 <HAL_TIMEx_MasterConfigSynchronization>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000e6c:	f000 fc40 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000e70:	bf00      	nop
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000164 	.word	0x20000164
 8000e7c:	40001400 	.word	0x40001400

08000e80 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b096      	sub	sp, #88	; 0x58
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]
 8000ea2:	615a      	str	r2, [r3, #20]
 8000ea4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	222c      	movs	r2, #44	; 0x2c
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f004 fac1 	bl	8005434 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000eb2:	4b39      	ldr	r3, [pc, #228]	; (8000f98 <MX_TIM8_Init+0x118>)
 8000eb4:	4a39      	ldr	r2, [pc, #228]	; (8000f9c <MX_TIM8_Init+0x11c>)
 8000eb6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 999;
 8000eb8:	4b37      	ldr	r3, [pc, #220]	; (8000f98 <MX_TIM8_Init+0x118>)
 8000eba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ebe:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec0:	4b35      	ldr	r3, [pc, #212]	; (8000f98 <MX_TIM8_Init+0x118>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8000ec6:	4b34      	ldr	r3, [pc, #208]	; (8000f98 <MX_TIM8_Init+0x118>)
 8000ec8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ecc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ece:	4b32      	ldr	r3, [pc, #200]	; (8000f98 <MX_TIM8_Init+0x118>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000ed4:	4b30      	ldr	r3, [pc, #192]	; (8000f98 <MX_TIM8_Init+0x118>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eda:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <MX_TIM8_Init+0x118>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000ee0:	482d      	ldr	r0, [pc, #180]	; (8000f98 <MX_TIM8_Init+0x118>)
 8000ee2:	f002 fd3d 	bl	8003960 <HAL_TIM_PWM_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM8_Init+0x70>
  {
    Error_Handler();
 8000eec:	f000 fc00 	bl	80016f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000efc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f00:	4619      	mov	r1, r3
 8000f02:	4825      	ldr	r0, [pc, #148]	; (8000f98 <MX_TIM8_Init+0x118>)
 8000f04:	f003 fbc6 	bl	8004694 <HAL_TIMEx_MasterConfigSynchronization>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8000f0e:	f000 fbef 	bl	80016f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f12:	2360      	movs	r3, #96	; 0x60
 8000f14:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f32:	2200      	movs	r2, #0
 8000f34:	4619      	mov	r1, r3
 8000f36:	4818      	ldr	r0, [pc, #96]	; (8000f98 <MX_TIM8_Init+0x118>)
 8000f38:	f002 ff06 	bl	8003d48 <HAL_TIM_PWM_ConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8000f42:	f000 fbd5 	bl	80016f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f5e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4807      	ldr	r0, [pc, #28]	; (8000f98 <MX_TIM8_Init+0x118>)
 8000f7c:	f003 fc12 	bl	80047a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM8_Init+0x10a>
  {
    Error_Handler();
 8000f86:	f000 fbb3 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000f8a:	4803      	ldr	r0, [pc, #12]	; (8000f98 <MX_TIM8_Init+0x118>)
 8000f8c:	f000 fc2e 	bl	80017ec <HAL_TIM_MspPostInit>

}
 8000f90:	bf00      	nop
 8000f92:	3758      	adds	r7, #88	; 0x58
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000048 	.word	0x20000048
 8000f9c:	40013400 	.word	0x40013400

08000fa0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <MX_UART4_Init+0x58>)
 8000fa6:	4a15      	ldr	r2, [pc, #84]	; (8000ffc <MX_UART4_Init+0x5c>)
 8000fa8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000faa:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <MX_UART4_Init+0x58>)
 8000fac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fb0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_UART4_Init+0x58>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <MX_UART4_Init+0x58>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <MX_UART4_Init+0x58>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <MX_UART4_Init+0x58>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <MX_UART4_Init+0x58>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd0:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <MX_UART4_Init+0x58>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <MX_UART4_Init+0x58>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <MX_UART4_Init+0x58>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <MX_UART4_Init+0x58>)
 8000fe4:	f003 fc5c 	bl	80048a0 <HAL_UART_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000fee:	f000 fb7f 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200000e0 	.word	0x200000e0
 8000ffc:	40004c00 	.word	0x40004c00

08001000 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001016:	4b4e      	ldr	r3, [pc, #312]	; (8001150 <MX_GPIO_Init+0x150>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	4a4d      	ldr	r2, [pc, #308]	; (8001150 <MX_GPIO_Init+0x150>)
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001022:	4b4b      	ldr	r3, [pc, #300]	; (8001150 <MX_GPIO_Init+0x150>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	f003 0304 	and.w	r3, r3, #4
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	4b48      	ldr	r3, [pc, #288]	; (8001150 <MX_GPIO_Init+0x150>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	4a47      	ldr	r2, [pc, #284]	; (8001150 <MX_GPIO_Init+0x150>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103a:	4b45      	ldr	r3, [pc, #276]	; (8001150 <MX_GPIO_Init+0x150>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	4b42      	ldr	r3, [pc, #264]	; (8001150 <MX_GPIO_Init+0x150>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104a:	4a41      	ldr	r2, [pc, #260]	; (8001150 <MX_GPIO_Init+0x150>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001052:	4b3f      	ldr	r3, [pc, #252]	; (8001150 <MX_GPIO_Init+0x150>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	2102      	movs	r1, #2
 8001062:	483c      	ldr	r0, [pc, #240]	; (8001154 <MX_GPIO_Init+0x154>)
 8001064:	f001 f880 	bl	8002168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	2120      	movs	r1, #32
 800106c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001070:	f001 f87a 	bl	8002168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	f44f 7140 	mov.w	r1, #768	; 0x300
 800107a:	4837      	ldr	r0, [pc, #220]	; (8001158 <MX_GPIO_Init+0x158>)
 800107c:	f001 f874 	bl	8002168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001080:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001084:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	4619      	mov	r1, r3
 8001094:	482f      	ldr	r0, [pc, #188]	; (8001154 <MX_GPIO_Init+0x154>)
 8001096:	f000 fea5 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800109a:	2301      	movs	r3, #1
 800109c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800109e:	4b2f      	ldr	r3, [pc, #188]	; (800115c <MX_GPIO_Init+0x15c>)
 80010a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	4619      	mov	r1, r3
 80010ac:	4829      	ldr	r0, [pc, #164]	; (8001154 <MX_GPIO_Init+0x154>)
 80010ae:	f000 fe99 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010b2:	2302      	movs	r3, #2
 80010b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b6:	2301      	movs	r3, #1
 80010b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	4619      	mov	r1, r3
 80010c8:	4822      	ldr	r0, [pc, #136]	; (8001154 <MX_GPIO_Init+0x154>)
 80010ca:	f000 fe8b 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010ce:	2320      	movs	r3, #32
 80010d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	4619      	mov	r1, r3
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e8:	f000 fe7c 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010f2:	4b1a      	ldr	r3, [pc, #104]	; (800115c <MX_GPIO_Init+0x15c>)
 80010f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	4619      	mov	r1, r3
 8001100:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001104:	f000 fe6e 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001108:	f44f 7340 	mov.w	r3, #768	; 0x300
 800110c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	2301      	movs	r3, #1
 8001110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	4619      	mov	r1, r3
 8001120:	480d      	ldr	r0, [pc, #52]	; (8001158 <MX_GPIO_Init+0x158>)
 8001122:	f000 fe5f 	bl	8001de4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2100      	movs	r1, #0
 800112a:	2006      	movs	r0, #6
 800112c:	f000 fe23 	bl	8001d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001130:	2006      	movs	r0, #6
 8001132:	f000 fe3c 	bl	8001dae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	2028      	movs	r0, #40	; 0x28
 800113c:	f000 fe1b 	bl	8001d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001140:	2028      	movs	r0, #40	; 0x28
 8001142:	f000 fe34 	bl	8001dae <HAL_NVIC_EnableIRQ>

}
 8001146:	bf00      	nop
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000
 8001154:	48000800 	.word	0x48000800
 8001158:	48000400 	.word	0x48000400
 800115c:	10310000 	.word	0x10310000

08001160 <nodemcu_send>:

/* USER CODE BEGIN 4 */

void nodemcu_send(char context, char data)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	460a      	mov	r2, r1
 800116a:	71fb      	strb	r3, [r7, #7]
 800116c:	4613      	mov	r3, r2
 800116e:	71bb      	strb	r3, [r7, #6]
	char message[3];
	message[0] = context;
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	733b      	strb	r3, [r7, #12]
	message[1] = data;
 8001174:	79bb      	ldrb	r3, [r7, #6]
 8001176:	737b      	strb	r3, [r7, #13]
	message[2] = '.';
 8001178:	232e      	movs	r3, #46	; 0x2e
 800117a:	73bb      	strb	r3, [r7, #14]

	/* Envoi par UART avec un timeout de 100 ms */
	HAL_UART_Transmit(&huart4, message, 3, 100);
 800117c:	f107 010c 	add.w	r1, r7, #12
 8001180:	2364      	movs	r3, #100	; 0x64
 8001182:	2203      	movs	r2, #3
 8001184:	4803      	ldr	r0, [pc, #12]	; (8001194 <nodemcu_send+0x34>)
 8001186:	f003 fbd9 	bl	800493c <HAL_UART_Transmit>
	/* Attente */
}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200000e0 	.word	0x200000e0

08001198 <boutton>:
//{
//    HAL_UART_Receive_IT(huart, dataReceived, 100);
//}

int boutton()
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800119c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <boutton+0x14>)
 80011a2:	f000 ffc9 	bl	8002138 <HAL_GPIO_ReadPin>
 80011a6:	4603      	mov	r3, r0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	48000800 	.word	0x48000800

080011b0 <follow_path>:

void follow_path(int path)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	moving_state = 0;
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <follow_path+0x2c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]

	fix_path(path);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 f810 	bl	80011e4 <fix_path>
	follow_line();
 80011c4:	f000 f8c2 	bl	800134c <follow_line>
	HAL_Delay(temps_pause);
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <follow_path+0x30>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 fcd3 	bl	8001b78 <HAL_Delay>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000040 	.word	0x20000040
 80011e0:	20000008 	.word	0x20000008

080011e4 <fix_path>:

void fix_path(int path)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	switch(path)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b4c      	cmp	r3, #76	; 0x4c
 80011f0:	d003      	beq.n	80011fa <fix_path+0x16>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b52      	cmp	r3, #82	; 0x52
 80011f6:	d04a      	beq.n	800128e <fix_path+0xaa>
 80011f8:	e093      	b.n	8001322 <fix_path+0x13e>
	{
	case 'L': // gauche
		moteur_gauche(vitesse_moteurs, ARRIERE);
 80011fa:	4b50      	ldr	r3, [pc, #320]	; (800133c <fix_path+0x158>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	2101      	movs	r1, #1
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f950 	bl	80014a8 <moteur_gauche>
		HAL_Delay(temps_fix);
 8001208:	4b4d      	ldr	r3, [pc, #308]	; (8001340 <fix_path+0x15c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f000 fcb3 	bl	8001b78 <HAL_Delay>
		moteur_gauche(vitesse_moteurs, AVANT);
 8001212:	4b4a      	ldr	r3, [pc, #296]	; (800133c <fix_path+0x158>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	b29b      	uxth	r3, r3
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f000 f944 	bl	80014a8 <moteur_gauche>
		moteur_droit(vitesse_moteurs, AVANT);
 8001220:	4b46      	ldr	r3, [pc, #280]	; (800133c <fix_path+0x158>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	b29b      	uxth	r3, r3
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f000 f91d 	bl	8001468 <moteur_droit>
		HAL_Delay(temps_fix * 1.5);
 800122e:	4b44      	ldr	r3, [pc, #272]	; (8001340 <fix_path+0x15c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff fa44 	bl	80006c0 <__aeabi_i2d>
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	4b41      	ldr	r3, [pc, #260]	; (8001344 <fix_path+0x160>)
 800123e:	f7fe ffc3 	bl	80001c8 <__aeabi_dmul>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4610      	mov	r0, r2
 8001248:	4619      	mov	r1, r3
 800124a:	f7ff faa3 	bl	8000794 <__aeabi_d2uiz>
 800124e:	4603      	mov	r3, r0
 8001250:	4618      	mov	r0, r3
 8001252:	f000 fc91 	bl	8001b78 <HAL_Delay>
		moteur_gauche(0, AVANT);
 8001256:	2100      	movs	r1, #0
 8001258:	2000      	movs	r0, #0
 800125a:	f000 f925 	bl	80014a8 <moteur_gauche>
		moteur_droit(0, AVANT);
 800125e:	2100      	movs	r1, #0
 8001260:	2000      	movs	r0, #0
 8001262:	f000 f901 	bl	8001468 <moteur_droit>
		while(sensor_state == 2 || sensor_state == 3)
 8001266:	e009      	b.n	800127c <fix_path+0x98>
		{
			moteur_droit(vitesse_moteurs, AVANT);
 8001268:	4b34      	ldr	r3, [pc, #208]	; (800133c <fix_path+0x158>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	b29b      	uxth	r3, r3
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f000 f8f9 	bl	8001468 <moteur_droit>
			HAL_Delay(10);
 8001276:	200a      	movs	r0, #10
 8001278:	f000 fc7e 	bl	8001b78 <HAL_Delay>
		while(sensor_state == 2 || sensor_state == 3)
 800127c:	4b32      	ldr	r3, [pc, #200]	; (8001348 <fix_path+0x164>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d0f1      	beq.n	8001268 <fix_path+0x84>
 8001284:	4b30      	ldr	r3, [pc, #192]	; (8001348 <fix_path+0x164>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b03      	cmp	r3, #3
 800128a:	d0ed      	beq.n	8001268 <fix_path+0x84>
		}
		break;
 800128c:	e049      	b.n	8001322 <fix_path+0x13e>
	case 'R': // droite
		moteur_droit(vitesse_moteurs, ARRIERE);
 800128e:	4b2b      	ldr	r3, [pc, #172]	; (800133c <fix_path+0x158>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	b29b      	uxth	r3, r3
 8001294:	2101      	movs	r1, #1
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f8e6 	bl	8001468 <moteur_droit>
		HAL_Delay(temps_fix);
 800129c:	4b28      	ldr	r3, [pc, #160]	; (8001340 <fix_path+0x15c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 fc69 	bl	8001b78 <HAL_Delay>
		moteur_gauche(vitesse_moteurs, AVANT);
 80012a6:	4b25      	ldr	r3, [pc, #148]	; (800133c <fix_path+0x158>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f8fa 	bl	80014a8 <moteur_gauche>
		moteur_droit(vitesse_moteurs, AVANT);
 80012b4:	4b21      	ldr	r3, [pc, #132]	; (800133c <fix_path+0x158>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 f8d3 	bl	8001468 <moteur_droit>
		HAL_Delay(temps_fix * 1.5);
 80012c2:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <fix_path+0x15c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f9fa 	bl	80006c0 <__aeabi_i2d>
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <fix_path+0x160>)
 80012d2:	f7fe ff79 	bl	80001c8 <__aeabi_dmul>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f7ff fa59 	bl	8000794 <__aeabi_d2uiz>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 fc47 	bl	8001b78 <HAL_Delay>
		moteur_gauche(0, AVANT);
 80012ea:	2100      	movs	r1, #0
 80012ec:	2000      	movs	r0, #0
 80012ee:	f000 f8db 	bl	80014a8 <moteur_gauche>
		moteur_droit(0, AVANT);
 80012f2:	2100      	movs	r1, #0
 80012f4:	2000      	movs	r0, #0
 80012f6:	f000 f8b7 	bl	8001468 <moteur_droit>
		while(sensor_state == 2 || sensor_state == 3)
 80012fa:	e009      	b.n	8001310 <fix_path+0x12c>
		{
			moteur_gauche(vitesse_moteurs, AVANT);
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <fix_path+0x158>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	b29b      	uxth	r3, r3
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f000 f8cf 	bl	80014a8 <moteur_gauche>
			HAL_Delay(10);
 800130a:	200a      	movs	r0, #10
 800130c:	f000 fc34 	bl	8001b78 <HAL_Delay>
		while(sensor_state == 2 || sensor_state == 3)
 8001310:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <fix_path+0x164>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d0f1      	beq.n	80012fc <fix_path+0x118>
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <fix_path+0x164>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b03      	cmp	r3, #3
 800131e:	d0ed      	beq.n	80012fc <fix_path+0x118>
		}
		break;
 8001320:	bf00      	nop
	}

	moteur_droit(0, AVANT);
 8001322:	2100      	movs	r1, #0
 8001324:	2000      	movs	r0, #0
 8001326:	f000 f89f 	bl	8001468 <moteur_droit>
	moteur_gauche(0, AVANT);
 800132a:	2100      	movs	r1, #0
 800132c:	2000      	movs	r0, #0
 800132e:	f000 f8bb 	bl	80014a8 <moteur_gauche>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000000 	.word	0x20000000
 8001340:	20000004 	.word	0x20000004
 8001344:	3ff80000 	.word	0x3ff80000
 8001348:	20000044 	.word	0x20000044

0800134c <follow_line>:

void follow_line()
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	while (moving_state == 0)
 8001350:	e07a      	b.n	8001448 <follow_line+0xfc>
	{
		switch (sensor_state) // (sensor g;sensor d)
 8001352:	4b41      	ldr	r3, [pc, #260]	; (8001458 <follow_line+0x10c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b03      	cmp	r3, #3
 8001358:	d851      	bhi.n	80013fe <follow_line+0xb2>
 800135a:	a201      	add	r2, pc, #4	; (adr r2, 8001360 <follow_line+0x14>)
 800135c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001360:	08001371 	.word	0x08001371
 8001364:	0800138f 	.word	0x0800138f
 8001368:	080013bb 	.word	0x080013bb
 800136c:	080013e7 	.word	0x080013e7
		{
		case 0: // 00
			moteur_droit(vitesse_moteurs, AVANT);
 8001370:	4b3a      	ldr	r3, [pc, #232]	; (800145c <follow_line+0x110>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	b29b      	uxth	r3, r3
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f875 	bl	8001468 <moteur_droit>
			moteur_gauche(vitesse_moteurs, AVANT);
 800137e:	4b37      	ldr	r3, [pc, #220]	; (800145c <follow_line+0x110>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	b29b      	uxth	r3, r3
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f000 f88e 	bl	80014a8 <moteur_gauche>
			break;
 800138c:	e045      	b.n	800141a <follow_line+0xce>
		case 1: // 01
			moteur_gauche(vitesse_moteurs, ARRIERE);
 800138e:	4b33      	ldr	r3, [pc, #204]	; (800145c <follow_line+0x110>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	b29b      	uxth	r3, r3
 8001394:	2101      	movs	r1, #1
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f886 	bl	80014a8 <moteur_gauche>
			HAL_Delay(20);
 800139c:	2014      	movs	r0, #20
 800139e:	f000 fbeb 	bl	8001b78 <HAL_Delay>
			moteur_gauche(0, AVANT);
 80013a2:	2100      	movs	r1, #0
 80013a4:	2000      	movs	r0, #0
 80013a6:	f000 f87f 	bl	80014a8 <moteur_gauche>
			moteur_droit(vitesse_moteurs, AVANT);
 80013aa:	4b2c      	ldr	r3, [pc, #176]	; (800145c <follow_line+0x110>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f858 	bl	8001468 <moteur_droit>
			break;
 80013b8:	e02f      	b.n	800141a <follow_line+0xce>
		case 2: // 10
			moteur_droit(vitesse_moteurs, ARRIERE);
 80013ba:	4b28      	ldr	r3, [pc, #160]	; (800145c <follow_line+0x110>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	2101      	movs	r1, #1
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 f850 	bl	8001468 <moteur_droit>
			HAL_Delay(20);
 80013c8:	2014      	movs	r0, #20
 80013ca:	f000 fbd5 	bl	8001b78 <HAL_Delay>
			moteur_droit(0, AVANT);
 80013ce:	2100      	movs	r1, #0
 80013d0:	2000      	movs	r0, #0
 80013d2:	f000 f849 	bl	8001468 <moteur_droit>
			moteur_gauche(vitesse_moteurs, AVANT);
 80013d6:	4b21      	ldr	r3, [pc, #132]	; (800145c <follow_line+0x110>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f862 	bl	80014a8 <moteur_gauche>
			break;
 80013e4:	e019      	b.n	800141a <follow_line+0xce>
		case 3: // 11
			moteur_droit(0, AVANT);
 80013e6:	2100      	movs	r1, #0
 80013e8:	2000      	movs	r0, #0
 80013ea:	f000 f83d 	bl	8001468 <moteur_droit>
			moteur_gauche(0, AVANT);
 80013ee:	2100      	movs	r1, #0
 80013f0:	2000      	movs	r0, #0
 80013f2:	f000 f859 	bl	80014a8 <moteur_gauche>
			moving_state = 1;
 80013f6:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <follow_line+0x114>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	601a      	str	r2, [r3, #0]
			break;
 80013fc:	e00d      	b.n	800141a <follow_line+0xce>
		default:
			moteur_droit(vitesse_moteurs, ARRIERE);
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <follow_line+0x110>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	b29b      	uxth	r3, r3
 8001404:	2101      	movs	r1, #1
 8001406:	4618      	mov	r0, r3
 8001408:	f000 f82e 	bl	8001468 <moteur_droit>
			moteur_gauche(vitesse_moteurs, ARRIERE);
 800140c:	4b13      	ldr	r3, [pc, #76]	; (800145c <follow_line+0x110>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	b29b      	uxth	r3, r3
 8001412:	2101      	movs	r1, #1
 8001414:	4618      	mov	r0, r3
 8001416:	f000 f847 	bl	80014a8 <moteur_gauche>
		}
		HAL_Delay(10);
 800141a:	200a      	movs	r0, #10
 800141c:	f000 fbac 	bl	8001b78 <HAL_Delay>

		sonar_distance();
 8001420:	f000 f862 	bl	80014e8 <sonar_distance>

		while (distance < 200)
 8001424:	e00c      	b.n	8001440 <follow_line+0xf4>
		{
			sonar_distance();
 8001426:	f000 f85f 	bl	80014e8 <sonar_distance>
			moteur_droit(0, AVANT);
 800142a:	2100      	movs	r1, #0
 800142c:	2000      	movs	r0, #0
 800142e:	f000 f81b 	bl	8001468 <moteur_droit>
			moteur_gauche(0, AVANT);
 8001432:	2100      	movs	r1, #0
 8001434:	2000      	movs	r0, #0
 8001436:	f000 f837 	bl	80014a8 <moteur_gauche>
			HAL_Delay(100);
 800143a:	2064      	movs	r0, #100	; 0x64
 800143c:	f000 fb9c 	bl	8001b78 <HAL_Delay>
		while (distance < 200)
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <follow_line+0x118>)
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	2bc7      	cmp	r3, #199	; 0xc7
 8001446:	d9ee      	bls.n	8001426 <follow_line+0xda>
	while (moving_state == 0)
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <follow_line+0x114>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d080      	beq.n	8001352 <follow_line+0x6>
		}
	}
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000044 	.word	0x20000044
 800145c:	20000000 	.word	0x20000000
 8001460:	20000040 	.word	0x20000040
 8001464:	2000003a 	.word	0x2000003a

08001468 <moteur_droit>:

void moteur_droit(uint16_t speed, GPIO_PinState direction)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	460a      	mov	r2, r1
 8001472:	80fb      	strh	r3, [r7, #6]
 8001474:	4613      	mov	r3, r2
 8001476:	717b      	strb	r3, [r7, #5]
	PWM_TIM8_SET_PULSE(speed);
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	4618      	mov	r0, r3
 800147c:	f000 f904 	bl	8001688 <PWM_TIM8_SET_PULSE>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001480:	2100      	movs	r1, #0
 8001482:	4807      	ldr	r0, [pc, #28]	; (80014a0 <moteur_droit+0x38>)
 8001484:	f002 fac4 	bl	8003a10 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, direction);
 8001488:	797b      	ldrb	r3, [r7, #5]
 800148a:	461a      	mov	r2, r3
 800148c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001490:	4804      	ldr	r0, [pc, #16]	; (80014a4 <moteur_droit+0x3c>)
 8001492:	f000 fe69 	bl	8002168 <HAL_GPIO_WritePin>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000048 	.word	0x20000048
 80014a4:	48000400 	.word	0x48000400

080014a8 <moteur_gauche>:

void moteur_gauche(uint16_t speed, GPIO_PinState direction)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	460a      	mov	r2, r1
 80014b2:	80fb      	strh	r3, [r7, #6]
 80014b4:	4613      	mov	r3, r2
 80014b6:	717b      	strb	r3, [r7, #5]
	PWM_TIM3_SET_PULSE(speed);
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 f8b6 	bl	800162c <PWM_TIM3_SET_PULSE>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80014c0:	2108      	movs	r1, #8
 80014c2:	4807      	ldr	r0, [pc, #28]	; (80014e0 <moteur_gauche+0x38>)
 80014c4:	f002 faa4 	bl	8003a10 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, direction);
 80014c8:	797b      	ldrb	r3, [r7, #5]
 80014ca:	461a      	mov	r2, r3
 80014cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d0:	4804      	ldr	r0, [pc, #16]	; (80014e4 <moteur_gauche+0x3c>)
 80014d2:	f000 fe49 	bl	8002168 <HAL_GPIO_WritePin>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000094 	.word	0x20000094
 80014e4:	48000400 	.word	0x48000400

080014e8 <sonar_distance>:

void sonar_distance()
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	//Generation de la pulsation trigger :
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80014ec:	2201      	movs	r2, #1
 80014ee:	2102      	movs	r1, #2
 80014f0:	480e      	ldr	r0, [pc, #56]	; (800152c <sonar_distance+0x44>)
 80014f2:	f000 fe39 	bl	8002168 <HAL_GPIO_WritePin>
	debut = __HAL_TIM_GET_COUNTER(&htim7);
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <sonar_distance+0x48>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <sonar_distance+0x4c>)
 8001500:	801a      	strh	r2, [r3, #0]
	do
	{
		fin = __HAL_TIM_GET_COUNTER(&htim7);
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <sonar_distance+0x48>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001508:	b29a      	uxth	r2, r3
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <sonar_distance+0x50>)
 800150c:	801a      	strh	r2, [r3, #0]
	}
	while (fin - debut < 10);
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <sonar_distance+0x50>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <sonar_distance+0x4c>)
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b09      	cmp	r3, #9
 800151c:	ddf1      	ble.n	8001502 <sonar_distance+0x1a>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800151e:	2200      	movs	r2, #0
 8001520:	2102      	movs	r1, #2
 8001522:	4802      	ldr	r0, [pc, #8]	; (800152c <sonar_distance+0x44>)
 8001524:	f000 fe20 	bl	8002168 <HAL_GPIO_WritePin>
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	48000800 	.word	0x48000800
 8001530:	20000164 	.word	0x20000164
 8001534:	2000003c 	.word	0x2000003c
 8001538:	2000003e 	.word	0x2000003e
 800153c:	00000000 	.word	0x00000000

08001540 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	80fb      	strh	r3, [r7, #6]
	int etat_gauche = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11);
 800154a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800154e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001552:	f000 fdf1 	bl	8002138 <HAL_GPIO_ReadPin>
 8001556:	4603      	mov	r3, r0
 8001558:	60fb      	str	r3, [r7, #12]
	int etat_droit = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12);
 800155a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800155e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001562:	f000 fde9 	bl	8002138 <HAL_GPIO_ReadPin>
 8001566:	4603      	mov	r3, r0
 8001568:	60bb      	str	r3, [r7, #8]

	sensor_state = 0;
 800156a:	4b29      	ldr	r3, [pc, #164]	; (8001610 <HAL_GPIO_EXTI_Callback+0xd0>)
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
	sensor_state += etat_gauche ? 1 : 0; // Sensor Gauche
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	bf14      	ite	ne
 8001576:	2301      	movne	r3, #1
 8001578:	2300      	moveq	r3, #0
 800157a:	b2db      	uxtb	r3, r3
 800157c:	461a      	mov	r2, r3
 800157e:	4b24      	ldr	r3, [pc, #144]	; (8001610 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4413      	add	r3, r2
 8001584:	4a22      	ldr	r2, [pc, #136]	; (8001610 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001586:	6013      	str	r3, [r2, #0]
	sensor_state += etat_droit ? 2 : 0; // Sensor Droit
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_GPIO_EXTI_Callback+0x52>
 800158e:	2202      	movs	r2, #2
 8001590:	e000      	b.n	8001594 <HAL_GPIO_EXTI_Callback+0x54>
 8001592:	2200      	movs	r2, #0
 8001594:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4413      	add	r3, r2
 800159a:	4a1d      	ldr	r2, [pc, #116]	; (8001610 <HAL_GPIO_EXTI_Callback+0xd0>)
 800159c:	6013      	str	r3, [r2, #0]

	// if (GPIO_Pin != 1) return; // Condition si la pin du SONAR !

	if ( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 1 )
 800159e:	2101      	movs	r1, #1
 80015a0:	481c      	ldr	r0, [pc, #112]	; (8001614 <HAL_GPIO_EXTI_Callback+0xd4>)
 80015a2:	f000 fdc9 	bl	8002138 <HAL_GPIO_ReadPin>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d106      	bne.n	80015ba <HAL_GPIO_EXTI_Callback+0x7a>
	{
		debut = __HAL_TIM_GET_COUNTER(&htim7);
 80015ac:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <HAL_GPIO_EXTI_Callback+0xd8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	4b19      	ldr	r3, [pc, #100]	; (800161c <HAL_GPIO_EXTI_Callback+0xdc>)
 80015b6:	801a      	strh	r2, [r3, #0]

		//Calcul apres reception signal :
		ecart_temps = fin - debut;
		distance = ecart_temps * 0.17;  //distance en mm
	}
}
 80015b8:	e021      	b.n	80015fe <HAL_GPIO_EXTI_Callback+0xbe>
		fin = __HAL_TIM_GET_COUNTER(&htim7);
 80015ba:	4b17      	ldr	r3, [pc, #92]	; (8001618 <HAL_GPIO_EXTI_Callback+0xd8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	4b17      	ldr	r3, [pc, #92]	; (8001620 <HAL_GPIO_EXTI_Callback+0xe0>)
 80015c4:	801a      	strh	r2, [r3, #0]
		ecart_temps = fin - debut;
 80015c6:	4b16      	ldr	r3, [pc, #88]	; (8001620 <HAL_GPIO_EXTI_Callback+0xe0>)
 80015c8:	881a      	ldrh	r2, [r3, #0]
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <HAL_GPIO_EXTI_Callback+0xdc>)
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	4b14      	ldr	r3, [pc, #80]	; (8001624 <HAL_GPIO_EXTI_Callback+0xe4>)
 80015d4:	801a      	strh	r2, [r3, #0]
		distance = ecart_temps * 0.17;  //distance en mm
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <HAL_GPIO_EXTI_Callback+0xe4>)
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff f870 	bl	80006c0 <__aeabi_i2d>
 80015e0:	a309      	add	r3, pc, #36	; (adr r3, 8001608 <HAL_GPIO_EXTI_Callback+0xc8>)
 80015e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e6:	f7fe fdef 	bl	80001c8 <__aeabi_dmul>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f7ff f8cf 	bl	8000794 <__aeabi_d2uiz>
 80015f6:	4603      	mov	r3, r0
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <HAL_GPIO_EXTI_Callback+0xe8>)
 80015fc:	801a      	strh	r2, [r3, #0]
}
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	5c28f5c3 	.word	0x5c28f5c3
 800160c:	3fc5c28f 	.word	0x3fc5c28f
 8001610:	20000044 	.word	0x20000044
 8001614:	48000800 	.word	0x48000800
 8001618:	20000164 	.word	0x20000164
 800161c:	2000003c 	.word	0x2000003c
 8001620:	2000003e 	.word	0x2000003e
 8001624:	20000038 	.word	0x20000038
 8001628:	2000003a 	.word	0x2000003a

0800162c <PWM_TIM3_SET_PULSE>:

void PWM_TIM3_SET_PULSE(uint16_t newPulse)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001636:	2108      	movs	r1, #8
 8001638:	4812      	ldr	r0, [pc, #72]	; (8001684 <PWM_TIM3_SET_PULSE+0x58>)
 800163a:	f002 faef 	bl	8003c1c <HAL_TIM_PWM_Stop>

	TIM_OC_InitTypeDef sConfigOC = {0};
 800163e:	f107 030c 	add.w	r3, r7, #12
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]
 800164e:	615a      	str	r2, [r3, #20]
 8001650:	619a      	str	r2, [r3, #24]

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001652:	2360      	movs	r3, #96	; 0x60
 8001654:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = newPulse;
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	2208      	movs	r2, #8
 8001668:	4619      	mov	r1, r3
 800166a:	4806      	ldr	r0, [pc, #24]	; (8001684 <PWM_TIM3_SET_PULSE+0x58>)
 800166c:	f002 fb6c 	bl	8003d48 <HAL_TIM_PWM_ConfigChannel>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <PWM_TIM3_SET_PULSE+0x4e>
	{
	    Error_Handler();
 8001676:	f000 f83b 	bl	80016f0 <Error_Handler>
	}
}
 800167a:	bf00      	nop
 800167c:	3728      	adds	r7, #40	; 0x28
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000094 	.word	0x20000094

08001688 <PWM_TIM8_SET_PULSE>:

void PWM_TIM8_SET_PULSE(uint16_t newPulse)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8001692:	2100      	movs	r1, #0
 8001694:	4815      	ldr	r0, [pc, #84]	; (80016ec <PWM_TIM8_SET_PULSE+0x64>)
 8001696:	f002 fac1 	bl	8003c1c <HAL_TIM_PWM_Stop>

	TIM_OC_InitTypeDef sConfigOC = {0};
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]
 80016aa:	615a      	str	r2, [r3, #20]
 80016ac:	619a      	str	r2, [r3, #24]

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ae:	2360      	movs	r3, #96	; 0x60
 80016b0:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = newPulse;
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016c2:	2300      	movs	r3, #0
 80016c4:	623b      	str	r3, [r7, #32]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	2200      	movs	r2, #0
 80016d0:	4619      	mov	r1, r3
 80016d2:	4806      	ldr	r0, [pc, #24]	; (80016ec <PWM_TIM8_SET_PULSE+0x64>)
 80016d4:	f002 fb38 	bl	8003d48 <HAL_TIM_PWM_ConfigChannel>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <PWM_TIM8_SET_PULSE+0x5a>
	{
	    Error_Handler();
 80016de:	f000 f807 	bl	80016f0 <Error_Handler>
	}
}
 80016e2:	bf00      	nop
 80016e4:	3728      	adds	r7, #40	; 0x28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000048 	.word	0x20000048

080016f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f4:	b672      	cpsid	i
}
 80016f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <Error_Handler+0x8>
	...

080016fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_MspInit+0x44>)
 8001704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001706:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <HAL_MspInit+0x44>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6613      	str	r3, [r2, #96]	; 0x60
 800170e:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <HAL_MspInit+0x44>)
 8001710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_MspInit+0x44>)
 800171c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171e:	4a08      	ldr	r2, [pc, #32]	; (8001740 <HAL_MspInit+0x44>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001724:	6593      	str	r3, [r2, #88]	; 0x58
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_MspInit+0x44>)
 8001728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40021000 	.word	0x40021000

08001744 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d10c      	bne.n	8001770 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001756:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <HAL_TIM_PWM_MspInit+0x60>)
 8001758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175a:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <HAL_TIM_PWM_MspInit+0x60>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	6593      	str	r3, [r2, #88]	; 0x58
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <HAL_TIM_PWM_MspInit+0x60>)
 8001764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800176e:	e010      	b.n	8001792 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM8)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0c      	ldr	r2, [pc, #48]	; (80017a8 <HAL_TIM_PWM_MspInit+0x64>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d10b      	bne.n	8001792 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_TIM_PWM_MspInit+0x60>)
 800177c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177e:	4a09      	ldr	r2, [pc, #36]	; (80017a4 <HAL_TIM_PWM_MspInit+0x60>)
 8001780:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001784:	6613      	str	r3, [r2, #96]	; 0x60
 8001786:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <HAL_TIM_PWM_MspInit+0x60>)
 8001788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800178a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
}
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40000400 	.word	0x40000400
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40013400 	.word	0x40013400

080017ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <HAL_TIM_Base_MspInit+0x38>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d10b      	bne.n	80017d6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <HAL_TIM_Base_MspInit+0x3c>)
 80017c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c2:	4a09      	ldr	r2, [pc, #36]	; (80017e8 <HAL_TIM_Base_MspInit+0x3c>)
 80017c4:	f043 0320 	orr.w	r3, r3, #32
 80017c8:	6593      	str	r3, [r2, #88]	; 0x58
 80017ca:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <HAL_TIM_Base_MspInit+0x3c>)
 80017cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ce:	f003 0320 	and.w	r3, r3, #32
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80017d6:	bf00      	nop
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40001400 	.word	0x40001400
 80017e8:	40021000 	.word	0x40021000

080017ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a22      	ldr	r2, [pc, #136]	; (8001894 <HAL_TIM_MspPostInit+0xa8>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d11d      	bne.n	800184a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800180e:	4b22      	ldr	r3, [pc, #136]	; (8001898 <HAL_TIM_MspPostInit+0xac>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	4a21      	ldr	r2, [pc, #132]	; (8001898 <HAL_TIM_MspPostInit+0xac>)
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181a:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <HAL_TIM_MspPostInit+0xac>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800182a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001834:	2300      	movs	r3, #0
 8001836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001838:	2302      	movs	r3, #2
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4619      	mov	r1, r3
 8001842:	4816      	ldr	r0, [pc, #88]	; (800189c <HAL_TIM_MspPostInit+0xb0>)
 8001844:	f000 face 	bl	8001de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001848:	e020      	b.n	800188c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a14      	ldr	r2, [pc, #80]	; (80018a0 <HAL_TIM_MspPostInit+0xb4>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d11b      	bne.n	800188c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001854:	4b10      	ldr	r3, [pc, #64]	; (8001898 <HAL_TIM_MspPostInit+0xac>)
 8001856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001858:	4a0f      	ldr	r2, [pc, #60]	; (8001898 <HAL_TIM_MspPostInit+0xac>)
 800185a:	f043 0304 	orr.w	r3, r3, #4
 800185e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001860:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <HAL_TIM_MspPostInit+0xac>)
 8001862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800186c:	2340      	movs	r3, #64	; 0x40
 800186e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2300      	movs	r3, #0
 800187a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800187c:	2303      	movs	r3, #3
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	4619      	mov	r1, r3
 8001886:	4805      	ldr	r0, [pc, #20]	; (800189c <HAL_TIM_MspPostInit+0xb0>)
 8001888:	f000 faac 	bl	8001de4 <HAL_GPIO_Init>
}
 800188c:	bf00      	nop
 800188e:	3728      	adds	r7, #40	; 0x28
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40000400 	.word	0x40000400
 8001898:	40021000 	.word	0x40021000
 800189c:	48000800 	.word	0x48000800
 80018a0:	40013400 	.word	0x40013400

080018a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b0ac      	sub	sp, #176	; 0xb0
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	2288      	movs	r2, #136	; 0x88
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f003 fdb5 	bl	8005434 <memset>
  if(huart->Instance==UART4)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a21      	ldr	r2, [pc, #132]	; (8001954 <HAL_UART_MspInit+0xb0>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d13b      	bne.n	800194c <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80018d4:	2308      	movs	r3, #8
 80018d6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80018d8:	2300      	movs	r3, #0
 80018da:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	4618      	mov	r0, r3
 80018e2:	f001 fac1 	bl	8002e68 <HAL_RCCEx_PeriphCLKConfig>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018ec:	f7ff ff00 	bl	80016f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80018f0:	4b19      	ldr	r3, [pc, #100]	; (8001958 <HAL_UART_MspInit+0xb4>)
 80018f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f4:	4a18      	ldr	r2, [pc, #96]	; (8001958 <HAL_UART_MspInit+0xb4>)
 80018f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018fa:	6593      	str	r3, [r2, #88]	; 0x58
 80018fc:	4b16      	ldr	r3, [pc, #88]	; (8001958 <HAL_UART_MspInit+0xb4>)
 80018fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001900:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001908:	4b13      	ldr	r3, [pc, #76]	; (8001958 <HAL_UART_MspInit+0xb4>)
 800190a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190c:	4a12      	ldr	r2, [pc, #72]	; (8001958 <HAL_UART_MspInit+0xb4>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001914:	4b10      	ldr	r3, [pc, #64]	; (8001958 <HAL_UART_MspInit+0xb4>)
 8001916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001920:	2303      	movs	r3, #3
 8001922:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001926:	2302      	movs	r3, #2
 8001928:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001932:	2303      	movs	r3, #3
 8001934:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001938:	2308      	movs	r3, #8
 800193a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001942:	4619      	mov	r1, r3
 8001944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001948:	f000 fa4c 	bl	8001de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800194c:	bf00      	nop
 800194e:	37b0      	adds	r7, #176	; 0xb0
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40004c00 	.word	0x40004c00
 8001958:	40021000 	.word	0x40021000

0800195c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <NMI_Handler+0x4>

08001962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <HardFault_Handler+0x4>

08001968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <MemManage_Handler+0x4>

0800196e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <BusFault_Handler+0x4>

08001974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <UsageFault_Handler+0x4>

0800197a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a8:	f000 f8c6 	bl	8001b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80019b4:	2001      	movs	r0, #1
 80019b6:	f000 fbef 	bl	8002198 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}

080019be <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80019c2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80019c6:	f000 fbe7 	bl	8002198 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80019ca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80019ce:	f000 fbe3 	bl	8002198 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <SystemInit+0x5c>)
 80019de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e2:	4a14      	ldr	r2, [pc, #80]	; (8001a34 <SystemInit+0x5c>)
 80019e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <SystemInit+0x60>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <SystemInit+0x60>)
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80019f8:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <SystemInit+0x60>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <SystemInit+0x60>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a0d      	ldr	r2, [pc, #52]	; (8001a38 <SystemInit+0x60>)
 8001a04:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001a08:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001a0c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <SystemInit+0x60>)
 8001a10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a14:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a16:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <SystemInit+0x60>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a07      	ldr	r2, [pc, #28]	; (8001a38 <SystemInit+0x60>)
 8001a1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a20:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001a22:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <SystemInit+0x60>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000ed00 	.word	0xe000ed00
 8001a38:	40021000 	.word	0x40021000

08001a3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a40:	f7ff ffca 	bl	80019d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a44:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a46:	e003      	b.n	8001a50 <LoopCopyDataInit>

08001a48 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a4a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a4c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a4e:	3104      	adds	r1, #4

08001a50 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a50:	480a      	ldr	r0, [pc, #40]	; (8001a7c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a52:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a54:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a56:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a58:	d3f6      	bcc.n	8001a48 <CopyDataInit>
	ldr	r2, =_sbss
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a5c:	e002      	b.n	8001a64 <LoopFillZerobss>

08001a5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a5e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a60:	f842 3b04 	str.w	r3, [r2], #4

08001a64 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <LoopForever+0x16>)
	cmp	r2, r3
 8001a66:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a68:	d3f9      	bcc.n	8001a5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a6a:	f003 fcbf 	bl	80053ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a6e:	f7ff f82d 	bl	8000acc <main>

08001a72 <LoopForever>:

LoopForever:
    b LoopForever
 8001a72:	e7fe      	b.n	8001a72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a74:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001a78:	080054b4 	.word	0x080054b4
	ldr	r0, =_sdata
 8001a7c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a80:	2000001c 	.word	0x2000001c
	ldr	r2, =_sbss
 8001a84:	2000001c 	.word	0x2000001c
	ldr	r3, = _ebss
 8001a88:	200001b4 	.word	0x200001b4

08001a8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a8c:	e7fe      	b.n	8001a8c <ADC1_2_IRQHandler>

08001a8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a98:	2003      	movs	r0, #3
 8001a9a:	f000 f961 	bl	8001d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a9e:	200f      	movs	r0, #15
 8001aa0:	f000 f80e 	bl	8001ac0 <HAL_InitTick>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d002      	beq.n	8001ab0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	71fb      	strb	r3, [r7, #7]
 8001aae:	e001      	b.n	8001ab4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ab0:	f7ff fe24 	bl	80016fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001acc:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <HAL_InitTick+0x6c>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d023      	beq.n	8001b1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ad4:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <HAL_InitTick+0x70>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <HAL_InitTick+0x6c>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	4619      	mov	r1, r3
 8001ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 f96d 	bl	8001dca <HAL_SYSTICK_Config>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10f      	bne.n	8001b16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b0f      	cmp	r3, #15
 8001afa:	d809      	bhi.n	8001b10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001afc:	2200      	movs	r2, #0
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b04:	f000 f937 	bl	8001d76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b08:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <HAL_InitTick+0x74>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	e007      	b.n	8001b20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	73fb      	strb	r3, [r7, #15]
 8001b14:	e004      	b.n	8001b20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	73fb      	strb	r3, [r7, #15]
 8001b1a:	e001      	b.n	8001b20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000018 	.word	0x20000018
 8001b30:	20000010 	.word	0x20000010
 8001b34:	20000014 	.word	0x20000014

08001b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_IncTick+0x20>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_IncTick+0x24>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <HAL_IncTick+0x24>)
 8001b4a:	6013      	str	r3, [r2, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20000018 	.word	0x20000018
 8001b5c:	200001b0 	.word	0x200001b0

08001b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return uwTick;
 8001b64:	4b03      	ldr	r3, [pc, #12]	; (8001b74 <HAL_GetTick+0x14>)
 8001b66:	681b      	ldr	r3, [r3, #0]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	200001b0 	.word	0x200001b0

08001b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b80:	f7ff ffee 	bl	8001b60 <HAL_GetTick>
 8001b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b90:	d005      	beq.n	8001b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b92:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <HAL_Delay+0x44>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b9e:	bf00      	nop
 8001ba0:	f7ff ffde 	bl	8001b60 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d8f7      	bhi.n	8001ba0 <HAL_Delay+0x28>
  {
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000018 	.word	0x20000018

08001bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bdc:	4013      	ands	r3, r2
 8001bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bf2:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	60d3      	str	r3, [r2, #12]
}
 8001bf8:	bf00      	nop
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <__NVIC_GetPriorityGrouping+0x18>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	f003 0307 	and.w	r3, r3, #7
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	db0b      	blt.n	8001c4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	f003 021f 	and.w	r2, r3, #31
 8001c3c:	4907      	ldr	r1, [pc, #28]	; (8001c5c <__NVIC_EnableIRQ+0x38>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	095b      	lsrs	r3, r3, #5
 8001c44:	2001      	movs	r0, #1
 8001c46:	fa00 f202 	lsl.w	r2, r0, r2
 8001c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000e100 	.word	0xe000e100

08001c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	6039      	str	r1, [r7, #0]
 8001c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	db0a      	blt.n	8001c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	490c      	ldr	r1, [pc, #48]	; (8001cac <__NVIC_SetPriority+0x4c>)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	0112      	lsls	r2, r2, #4
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	440b      	add	r3, r1
 8001c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c88:	e00a      	b.n	8001ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	4908      	ldr	r1, [pc, #32]	; (8001cb0 <__NVIC_SetPriority+0x50>)
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	3b04      	subs	r3, #4
 8001c98:	0112      	lsls	r2, r2, #4
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	761a      	strb	r2, [r3, #24]
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	e000e100 	.word	0xe000e100
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b089      	sub	sp, #36	; 0x24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f1c3 0307 	rsb	r3, r3, #7
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	bf28      	it	cs
 8001cd2:	2304      	movcs	r3, #4
 8001cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	2b06      	cmp	r3, #6
 8001cdc:	d902      	bls.n	8001ce4 <NVIC_EncodePriority+0x30>
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3b03      	subs	r3, #3
 8001ce2:	e000      	b.n	8001ce6 <NVIC_EncodePriority+0x32>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43da      	mvns	r2, r3
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	401a      	ands	r2, r3
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	fa01 f303 	lsl.w	r3, r1, r3
 8001d06:	43d9      	mvns	r1, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0c:	4313      	orrs	r3, r2
         );
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3724      	adds	r7, #36	; 0x24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d2c:	d301      	bcc.n	8001d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e00f      	b.n	8001d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d32:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <SysTick_Config+0x40>)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d3a:	210f      	movs	r1, #15
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d40:	f7ff ff8e 	bl	8001c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d44:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <SysTick_Config+0x40>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d4a:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <SysTick_Config+0x40>)
 8001d4c:	2207      	movs	r2, #7
 8001d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	e000e010 	.word	0xe000e010

08001d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff ff29 	bl	8001bc0 <__NVIC_SetPriorityGrouping>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b086      	sub	sp, #24
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
 8001d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d88:	f7ff ff3e 	bl	8001c08 <__NVIC_GetPriorityGrouping>
 8001d8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	68b9      	ldr	r1, [r7, #8]
 8001d92:	6978      	ldr	r0, [r7, #20]
 8001d94:	f7ff ff8e 	bl	8001cb4 <NVIC_EncodePriority>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff5d 	bl	8001c60 <__NVIC_SetPriority>
}
 8001da6:	bf00      	nop
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff31 	bl	8001c24 <__NVIC_EnableIRQ>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff ffa2 	bl	8001d1c <SysTick_Config>
 8001dd8:	4603      	mov	r3, r0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df2:	e17f      	b.n	80020f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2101      	movs	r1, #1
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001e00:	4013      	ands	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 8171 	beq.w	80020ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d00b      	beq.n	8001e2c <HAL_GPIO_Init+0x48>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d007      	beq.n	8001e2c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e20:	2b11      	cmp	r3, #17
 8001e22:	d003      	beq.n	8001e2c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b12      	cmp	r3, #18
 8001e2a:	d130      	bne.n	8001e8e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	2203      	movs	r2, #3
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4013      	ands	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e62:	2201      	movs	r2, #1
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	091b      	lsrs	r3, r3, #4
 8001e78:	f003 0201 	and.w	r2, r3, #1
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	d118      	bne.n	8001ecc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4013      	ands	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	08db      	lsrs	r3, r3, #3
 8001eb6:	f003 0201 	and.w	r2, r3, #1
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x128>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b12      	cmp	r3, #18
 8001f0a:	d123      	bne.n	8001f54 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	08da      	lsrs	r2, r3, #3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3208      	adds	r2, #8
 8001f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	220f      	movs	r2, #15
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	08da      	lsrs	r2, r3, #3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3208      	adds	r2, #8
 8001f4e:	6939      	ldr	r1, [r7, #16]
 8001f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	2203      	movs	r2, #3
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0203 	and.w	r2, r3, #3
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 80ac 	beq.w	80020ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f96:	4b5f      	ldr	r3, [pc, #380]	; (8002114 <HAL_GPIO_Init+0x330>)
 8001f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9a:	4a5e      	ldr	r2, [pc, #376]	; (8002114 <HAL_GPIO_Init+0x330>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6613      	str	r3, [r2, #96]	; 0x60
 8001fa2:	4b5c      	ldr	r3, [pc, #368]	; (8002114 <HAL_GPIO_Init+0x330>)
 8001fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fae:	4a5a      	ldr	r2, [pc, #360]	; (8002118 <HAL_GPIO_Init+0x334>)
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	220f      	movs	r2, #15
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fd8:	d025      	beq.n	8002026 <HAL_GPIO_Init+0x242>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a4f      	ldr	r2, [pc, #316]	; (800211c <HAL_GPIO_Init+0x338>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d01f      	beq.n	8002022 <HAL_GPIO_Init+0x23e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a4e      	ldr	r2, [pc, #312]	; (8002120 <HAL_GPIO_Init+0x33c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d019      	beq.n	800201e <HAL_GPIO_Init+0x23a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a4d      	ldr	r2, [pc, #308]	; (8002124 <HAL_GPIO_Init+0x340>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d013      	beq.n	800201a <HAL_GPIO_Init+0x236>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a4c      	ldr	r2, [pc, #304]	; (8002128 <HAL_GPIO_Init+0x344>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d00d      	beq.n	8002016 <HAL_GPIO_Init+0x232>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4b      	ldr	r2, [pc, #300]	; (800212c <HAL_GPIO_Init+0x348>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d007      	beq.n	8002012 <HAL_GPIO_Init+0x22e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4a      	ldr	r2, [pc, #296]	; (8002130 <HAL_GPIO_Init+0x34c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d101      	bne.n	800200e <HAL_GPIO_Init+0x22a>
 800200a:	2306      	movs	r3, #6
 800200c:	e00c      	b.n	8002028 <HAL_GPIO_Init+0x244>
 800200e:	2307      	movs	r3, #7
 8002010:	e00a      	b.n	8002028 <HAL_GPIO_Init+0x244>
 8002012:	2305      	movs	r3, #5
 8002014:	e008      	b.n	8002028 <HAL_GPIO_Init+0x244>
 8002016:	2304      	movs	r3, #4
 8002018:	e006      	b.n	8002028 <HAL_GPIO_Init+0x244>
 800201a:	2303      	movs	r3, #3
 800201c:	e004      	b.n	8002028 <HAL_GPIO_Init+0x244>
 800201e:	2302      	movs	r3, #2
 8002020:	e002      	b.n	8002028 <HAL_GPIO_Init+0x244>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <HAL_GPIO_Init+0x244>
 8002026:	2300      	movs	r3, #0
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	f002 0203 	and.w	r2, r2, #3
 800202e:	0092      	lsls	r2, r2, #2
 8002030:	4093      	lsls	r3, r2
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002038:	4937      	ldr	r1, [pc, #220]	; (8002118 <HAL_GPIO_Init+0x334>)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	089b      	lsrs	r3, r3, #2
 800203e:	3302      	adds	r3, #2
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002046:	4b3b      	ldr	r3, [pc, #236]	; (8002134 <HAL_GPIO_Init+0x350>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	43db      	mvns	r3, r3
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	4013      	ands	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800206a:	4a32      	ldr	r2, [pc, #200]	; (8002134 <HAL_GPIO_Init+0x350>)
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002070:	4b30      	ldr	r3, [pc, #192]	; (8002134 <HAL_GPIO_Init+0x350>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	43db      	mvns	r3, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002094:	4a27      	ldr	r2, [pc, #156]	; (8002134 <HAL_GPIO_Init+0x350>)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800209a:	4b26      	ldr	r3, [pc, #152]	; (8002134 <HAL_GPIO_Init+0x350>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4013      	ands	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020be:	4a1d      	ldr	r2, [pc, #116]	; (8002134 <HAL_GPIO_Init+0x350>)
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020c4:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <HAL_GPIO_Init+0x350>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4013      	ands	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020e8:	4a12      	ldr	r2, [pc, #72]	; (8002134 <HAL_GPIO_Init+0x350>)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	3301      	adds	r3, #1
 80020f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	fa22 f303 	lsr.w	r3, r2, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f47f ae78 	bne.w	8001df4 <HAL_GPIO_Init+0x10>
  }
}
 8002104:	bf00      	nop
 8002106:	bf00      	nop
 8002108:	371c      	adds	r7, #28
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40021000 	.word	0x40021000
 8002118:	40010000 	.word	0x40010000
 800211c:	48000400 	.word	0x48000400
 8002120:	48000800 	.word	0x48000800
 8002124:	48000c00 	.word	0x48000c00
 8002128:	48001000 	.word	0x48001000
 800212c:	48001400 	.word	0x48001400
 8002130:	48001800 	.word	0x48001800
 8002134:	40010400 	.word	0x40010400

08002138 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	887b      	ldrh	r3, [r7, #2]
 800214a:	4013      	ands	r3, r2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002150:	2301      	movs	r3, #1
 8002152:	73fb      	strb	r3, [r7, #15]
 8002154:	e001      	b.n	800215a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002156:	2300      	movs	r3, #0
 8002158:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800215a:	7bfb      	ldrb	r3, [r7, #15]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	807b      	strh	r3, [r7, #2]
 8002174:	4613      	mov	r3, r2
 8002176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002178:	787b      	ldrb	r3, [r7, #1]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800217e:	887a      	ldrh	r2, [r7, #2]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002184:	e002      	b.n	800218c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002186:	887a      	ldrh	r2, [r7, #2]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021a2:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021a4:	695a      	ldr	r2, [r3, #20]
 80021a6:	88fb      	ldrh	r3, [r7, #6]
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d006      	beq.n	80021bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021ae:	4a05      	ldr	r2, [pc, #20]	; (80021c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021b0:	88fb      	ldrh	r3, [r7, #6]
 80021b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021b4:	88fb      	ldrh	r3, [r7, #6]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff f9c2 	bl	8001540 <HAL_GPIO_EXTI_Callback>
  }
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40010400 	.word	0x40010400

080021c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021cc:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40007000 	.word	0x40007000

080021e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021f2:	d130      	bne.n	8002256 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021f4:	4b23      	ldr	r3, [pc, #140]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002200:	d038      	beq.n	8002274 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002202:	4b20      	ldr	r3, [pc, #128]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800220a:	4a1e      	ldr	r2, [pc, #120]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800220c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002210:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002212:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2232      	movs	r2, #50	; 0x32
 8002218:	fb02 f303 	mul.w	r3, r2, r3
 800221c:	4a1b      	ldr	r2, [pc, #108]	; (800228c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800221e:	fba2 2303 	umull	r2, r3, r2, r3
 8002222:	0c9b      	lsrs	r3, r3, #18
 8002224:	3301      	adds	r3, #1
 8002226:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002228:	e002      	b.n	8002230 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	3b01      	subs	r3, #1
 800222e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002230:	4b14      	ldr	r3, [pc, #80]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800223c:	d102      	bne.n	8002244 <HAL_PWREx_ControlVoltageScaling+0x60>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1f2      	bne.n	800222a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002244:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800224c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002250:	d110      	bne.n	8002274 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e00f      	b.n	8002276 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002256:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800225e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002262:	d007      	beq.n	8002274 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002264:	4b07      	ldr	r3, [pc, #28]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800226c:	4a05      	ldr	r2, [pc, #20]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002272:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40007000 	.word	0x40007000
 8002288:	20000010 	.word	0x20000010
 800228c:	431bde83 	.word	0x431bde83

08002290 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e3d4      	b.n	8002a4c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022a2:	4ba1      	ldr	r3, [pc, #644]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 030c 	and.w	r3, r3, #12
 80022aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022ac:	4b9e      	ldr	r3, [pc, #632]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0310 	and.w	r3, r3, #16
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 80e4 	beq.w	800248c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d007      	beq.n	80022da <HAL_RCC_OscConfig+0x4a>
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	2b0c      	cmp	r3, #12
 80022ce:	f040 808b 	bne.w	80023e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	f040 8087 	bne.w	80023e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022da:	4b93      	ldr	r3, [pc, #588]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d005      	beq.n	80022f2 <HAL_RCC_OscConfig+0x62>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e3ac      	b.n	8002a4c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1a      	ldr	r2, [r3, #32]
 80022f6:	4b8c      	ldr	r3, [pc, #560]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d004      	beq.n	800230c <HAL_RCC_OscConfig+0x7c>
 8002302:	4b89      	ldr	r3, [pc, #548]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800230a:	e005      	b.n	8002318 <HAL_RCC_OscConfig+0x88>
 800230c:	4b86      	ldr	r3, [pc, #536]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 800230e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002312:	091b      	lsrs	r3, r3, #4
 8002314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002318:	4293      	cmp	r3, r2
 800231a:	d223      	bcs.n	8002364 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4618      	mov	r0, r3
 8002322:	f000 fd41 	bl	8002da8 <RCC_SetFlashLatencyFromMSIRange>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e38d      	b.n	8002a4c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002330:	4b7d      	ldr	r3, [pc, #500]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a7c      	ldr	r2, [pc, #496]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 8002336:	f043 0308 	orr.w	r3, r3, #8
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4b7a      	ldr	r3, [pc, #488]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	4977      	ldr	r1, [pc, #476]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800234e:	4b76      	ldr	r3, [pc, #472]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	021b      	lsls	r3, r3, #8
 800235c:	4972      	ldr	r1, [pc, #456]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 800235e:	4313      	orrs	r3, r2
 8002360:	604b      	str	r3, [r1, #4]
 8002362:	e025      	b.n	80023b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002364:	4b70      	ldr	r3, [pc, #448]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a6f      	ldr	r2, [pc, #444]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 800236a:	f043 0308 	orr.w	r3, r3, #8
 800236e:	6013      	str	r3, [r2, #0]
 8002370:	4b6d      	ldr	r3, [pc, #436]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	496a      	ldr	r1, [pc, #424]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002382:	4b69      	ldr	r3, [pc, #420]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	021b      	lsls	r3, r3, #8
 8002390:	4965      	ldr	r1, [pc, #404]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 8002392:	4313      	orrs	r3, r2
 8002394:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d109      	bne.n	80023b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 fd01 	bl	8002da8 <RCC_SetFlashLatencyFromMSIRange>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e34d      	b.n	8002a4c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023b0:	f000 fc36 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 80023b4:	4602      	mov	r2, r0
 80023b6:	4b5c      	ldr	r3, [pc, #368]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	091b      	lsrs	r3, r3, #4
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	495a      	ldr	r1, [pc, #360]	; (800252c <HAL_RCC_OscConfig+0x29c>)
 80023c2:	5ccb      	ldrb	r3, [r1, r3]
 80023c4:	f003 031f 	and.w	r3, r3, #31
 80023c8:	fa22 f303 	lsr.w	r3, r2, r3
 80023cc:	4a58      	ldr	r2, [pc, #352]	; (8002530 <HAL_RCC_OscConfig+0x2a0>)
 80023ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023d0:	4b58      	ldr	r3, [pc, #352]	; (8002534 <HAL_RCC_OscConfig+0x2a4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fb73 	bl	8001ac0 <HAL_InitTick>
 80023da:	4603      	mov	r3, r0
 80023dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d052      	beq.n	800248a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	e331      	b.n	8002a4c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d032      	beq.n	8002456 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023f0:	4b4d      	ldr	r3, [pc, #308]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a4c      	ldr	r2, [pc, #304]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023fc:	f7ff fbb0 	bl	8001b60 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002404:	f7ff fbac 	bl	8001b60 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e31a      	b.n	8002a4c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002416:	4b44      	ldr	r3, [pc, #272]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002422:	4b41      	ldr	r3, [pc, #260]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a40      	ldr	r2, [pc, #256]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 8002428:	f043 0308 	orr.w	r3, r3, #8
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	4b3e      	ldr	r3, [pc, #248]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	493b      	ldr	r1, [pc, #236]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 800243c:	4313      	orrs	r3, r2
 800243e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002440:	4b39      	ldr	r3, [pc, #228]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	021b      	lsls	r3, r3, #8
 800244e:	4936      	ldr	r1, [pc, #216]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]
 8002454:	e01a      	b.n	800248c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002456:	4b34      	ldr	r3, [pc, #208]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a33      	ldr	r2, [pc, #204]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002462:	f7ff fb7d 	bl	8001b60 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800246a:	f7ff fb79 	bl	8001b60 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e2e7      	b.n	8002a4c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800247c:	4b2a      	ldr	r3, [pc, #168]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f0      	bne.n	800246a <HAL_RCC_OscConfig+0x1da>
 8002488:	e000      	b.n	800248c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800248a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d074      	beq.n	8002582 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	2b08      	cmp	r3, #8
 800249c:	d005      	beq.n	80024aa <HAL_RCC_OscConfig+0x21a>
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	2b0c      	cmp	r3, #12
 80024a2:	d10e      	bne.n	80024c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d10b      	bne.n	80024c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024aa:	4b1f      	ldr	r3, [pc, #124]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d064      	beq.n	8002580 <HAL_RCC_OscConfig+0x2f0>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d160      	bne.n	8002580 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e2c4      	b.n	8002a4c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ca:	d106      	bne.n	80024da <HAL_RCC_OscConfig+0x24a>
 80024cc:	4b16      	ldr	r3, [pc, #88]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a15      	ldr	r2, [pc, #84]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 80024d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	e01d      	b.n	8002516 <HAL_RCC_OscConfig+0x286>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024e2:	d10c      	bne.n	80024fe <HAL_RCC_OscConfig+0x26e>
 80024e4:	4b10      	ldr	r3, [pc, #64]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a0f      	ldr	r2, [pc, #60]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 80024ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a0c      	ldr	r2, [pc, #48]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 80024f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024fa:	6013      	str	r3, [r2, #0]
 80024fc:	e00b      	b.n	8002516 <HAL_RCC_OscConfig+0x286>
 80024fe:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a09      	ldr	r2, [pc, #36]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 8002504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	4b07      	ldr	r3, [pc, #28]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a06      	ldr	r2, [pc, #24]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 8002510:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002514:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d01c      	beq.n	8002558 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251e:	f7ff fb1f 	bl	8001b60 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002524:	e011      	b.n	800254a <HAL_RCC_OscConfig+0x2ba>
 8002526:	bf00      	nop
 8002528:	40021000 	.word	0x40021000
 800252c:	0800545c 	.word	0x0800545c
 8002530:	20000010 	.word	0x20000010
 8002534:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002538:	f7ff fb12 	bl	8001b60 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b64      	cmp	r3, #100	; 0x64
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e280      	b.n	8002a4c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800254a:	4baf      	ldr	r3, [pc, #700]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x2a8>
 8002556:	e014      	b.n	8002582 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002558:	f7ff fb02 	bl	8001b60 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002560:	f7ff fafe 	bl	8001b60 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b64      	cmp	r3, #100	; 0x64
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e26c      	b.n	8002a4c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002572:	4ba5      	ldr	r3, [pc, #660]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x2d0>
 800257e:	e000      	b.n	8002582 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d060      	beq.n	8002650 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	2b04      	cmp	r3, #4
 8002592:	d005      	beq.n	80025a0 <HAL_RCC_OscConfig+0x310>
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	2b0c      	cmp	r3, #12
 8002598:	d119      	bne.n	80025ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2b02      	cmp	r3, #2
 800259e:	d116      	bne.n	80025ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025a0:	4b99      	ldr	r3, [pc, #612]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_OscConfig+0x328>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e249      	b.n	8002a4c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b8:	4b93      	ldr	r3, [pc, #588]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	061b      	lsls	r3, r3, #24
 80025c6:	4990      	ldr	r1, [pc, #576]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025cc:	e040      	b.n	8002650 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d023      	beq.n	800261e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d6:	4b8c      	ldr	r3, [pc, #560]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a8b      	ldr	r2, [pc, #556]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 80025dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e2:	f7ff fabd 	bl	8001b60 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ea:	f7ff fab9 	bl	8001b60 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e227      	b.n	8002a4c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025fc:	4b82      	ldr	r3, [pc, #520]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0f0      	beq.n	80025ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002608:	4b7f      	ldr	r3, [pc, #508]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	061b      	lsls	r3, r3, #24
 8002616:	497c      	ldr	r1, [pc, #496]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]
 800261c:	e018      	b.n	8002650 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800261e:	4b7a      	ldr	r3, [pc, #488]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a79      	ldr	r2, [pc, #484]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 8002624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262a:	f7ff fa99 	bl	8001b60 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002632:	f7ff fa95 	bl	8001b60 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e203      	b.n	8002a4c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002644:	4b70      	ldr	r3, [pc, #448]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1f0      	bne.n	8002632 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d03c      	beq.n	80026d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d01c      	beq.n	800269e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002664:	4b68      	ldr	r3, [pc, #416]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 8002666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800266a:	4a67      	ldr	r2, [pc, #412]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002674:	f7ff fa74 	bl	8001b60 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800267c:	f7ff fa70 	bl	8001b60 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e1de      	b.n	8002a4c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800268e:	4b5e      	ldr	r3, [pc, #376]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 8002690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0ef      	beq.n	800267c <HAL_RCC_OscConfig+0x3ec>
 800269c:	e01b      	b.n	80026d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800269e:	4b5a      	ldr	r3, [pc, #360]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 80026a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a4:	4a58      	ldr	r2, [pc, #352]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 80026a6:	f023 0301 	bic.w	r3, r3, #1
 80026aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ae:	f7ff fa57 	bl	8001b60 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b6:	f7ff fa53 	bl	8001b60 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e1c1      	b.n	8002a4c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026c8:	4b4f      	ldr	r3, [pc, #316]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 80026ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1ef      	bne.n	80026b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 80a6 	beq.w	8002830 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e4:	2300      	movs	r3, #0
 80026e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026e8:	4b47      	ldr	r3, [pc, #284]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 80026ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10d      	bne.n	8002710 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f4:	4b44      	ldr	r3, [pc, #272]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 80026f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f8:	4a43      	ldr	r2, [pc, #268]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 80026fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002700:	4b41      	ldr	r3, [pc, #260]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 8002702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800270c:	2301      	movs	r3, #1
 800270e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002710:	4b3e      	ldr	r3, [pc, #248]	; (800280c <HAL_RCC_OscConfig+0x57c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002718:	2b00      	cmp	r3, #0
 800271a:	d118      	bne.n	800274e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800271c:	4b3b      	ldr	r3, [pc, #236]	; (800280c <HAL_RCC_OscConfig+0x57c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a3a      	ldr	r2, [pc, #232]	; (800280c <HAL_RCC_OscConfig+0x57c>)
 8002722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002726:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002728:	f7ff fa1a 	bl	8001b60 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002730:	f7ff fa16 	bl	8001b60 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e184      	b.n	8002a4c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002742:	4b32      	ldr	r3, [pc, #200]	; (800280c <HAL_RCC_OscConfig+0x57c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d108      	bne.n	8002768 <HAL_RCC_OscConfig+0x4d8>
 8002756:	4b2c      	ldr	r3, [pc, #176]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 8002758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275c:	4a2a      	ldr	r2, [pc, #168]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002766:	e024      	b.n	80027b2 <HAL_RCC_OscConfig+0x522>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b05      	cmp	r3, #5
 800276e:	d110      	bne.n	8002792 <HAL_RCC_OscConfig+0x502>
 8002770:	4b25      	ldr	r3, [pc, #148]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 8002772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002776:	4a24      	ldr	r2, [pc, #144]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 8002778:	f043 0304 	orr.w	r3, r3, #4
 800277c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002780:	4b21      	ldr	r3, [pc, #132]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002786:	4a20      	ldr	r2, [pc, #128]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002790:	e00f      	b.n	80027b2 <HAL_RCC_OscConfig+0x522>
 8002792:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 8002794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002798:	4a1b      	ldr	r2, [pc, #108]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 800279a:	f023 0301 	bic.w	r3, r3, #1
 800279e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027a2:	4b19      	ldr	r3, [pc, #100]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 80027a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a8:	4a17      	ldr	r2, [pc, #92]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 80027aa:	f023 0304 	bic.w	r3, r3, #4
 80027ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d016      	beq.n	80027e8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ba:	f7ff f9d1 	bl	8001b60 <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027c0:	e00a      	b.n	80027d8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c2:	f7ff f9cd 	bl	8001b60 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e139      	b.n	8002a4c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027d8:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <HAL_RCC_OscConfig+0x578>)
 80027da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0ed      	beq.n	80027c2 <HAL_RCC_OscConfig+0x532>
 80027e6:	e01a      	b.n	800281e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e8:	f7ff f9ba 	bl	8001b60 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027ee:	e00f      	b.n	8002810 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f0:	f7ff f9b6 	bl	8001b60 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fe:	4293      	cmp	r3, r2
 8002800:	d906      	bls.n	8002810 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e122      	b.n	8002a4c <HAL_RCC_OscConfig+0x7bc>
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000
 800280c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002810:	4b90      	ldr	r3, [pc, #576]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 8002812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1e8      	bne.n	80027f0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800281e:	7ffb      	ldrb	r3, [r7, #31]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d105      	bne.n	8002830 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002824:	4b8b      	ldr	r3, [pc, #556]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 8002826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002828:	4a8a      	ldr	r2, [pc, #552]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 800282a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800282e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 8108 	beq.w	8002a4a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283e:	2b02      	cmp	r3, #2
 8002840:	f040 80d0 	bne.w	80029e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002844:	4b83      	ldr	r3, [pc, #524]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f003 0203 	and.w	r2, r3, #3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	429a      	cmp	r2, r3
 8002856:	d130      	bne.n	80028ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	3b01      	subs	r3, #1
 8002864:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002866:	429a      	cmp	r2, r3
 8002868:	d127      	bne.n	80028ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002874:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002876:	429a      	cmp	r2, r3
 8002878:	d11f      	bne.n	80028ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002884:	2a07      	cmp	r2, #7
 8002886:	bf14      	ite	ne
 8002888:	2201      	movne	r2, #1
 800288a:	2200      	moveq	r2, #0
 800288c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800288e:	4293      	cmp	r3, r2
 8002890:	d113      	bne.n	80028ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289c:	085b      	lsrs	r3, r3, #1
 800289e:	3b01      	subs	r3, #1
 80028a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d109      	bne.n	80028ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	085b      	lsrs	r3, r3, #1
 80028b2:	3b01      	subs	r3, #1
 80028b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d06e      	beq.n	8002998 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	2b0c      	cmp	r3, #12
 80028be:	d069      	beq.n	8002994 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028c0:	4b64      	ldr	r3, [pc, #400]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d105      	bne.n	80028d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028cc:	4b61      	ldr	r3, [pc, #388]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0b7      	b.n	8002a4c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028dc:	4b5d      	ldr	r3, [pc, #372]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a5c      	ldr	r2, [pc, #368]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 80028e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028e8:	f7ff f93a 	bl	8001b60 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f0:	f7ff f936 	bl	8001b60 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e0a4      	b.n	8002a4c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002902:	4b54      	ldr	r3, [pc, #336]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800290e:	4b51      	ldr	r3, [pc, #324]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	4b51      	ldr	r3, [pc, #324]	; (8002a58 <HAL_RCC_OscConfig+0x7c8>)
 8002914:	4013      	ands	r3, r2
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800291e:	3a01      	subs	r2, #1
 8002920:	0112      	lsls	r2, r2, #4
 8002922:	4311      	orrs	r1, r2
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002928:	0212      	lsls	r2, r2, #8
 800292a:	4311      	orrs	r1, r2
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002930:	0852      	lsrs	r2, r2, #1
 8002932:	3a01      	subs	r2, #1
 8002934:	0552      	lsls	r2, r2, #21
 8002936:	4311      	orrs	r1, r2
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800293c:	0852      	lsrs	r2, r2, #1
 800293e:	3a01      	subs	r2, #1
 8002940:	0652      	lsls	r2, r2, #25
 8002942:	4311      	orrs	r1, r2
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002948:	0912      	lsrs	r2, r2, #4
 800294a:	0452      	lsls	r2, r2, #17
 800294c:	430a      	orrs	r2, r1
 800294e:	4941      	ldr	r1, [pc, #260]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 8002950:	4313      	orrs	r3, r2
 8002952:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002954:	4b3f      	ldr	r3, [pc, #252]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a3e      	ldr	r2, [pc, #248]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 800295a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800295e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002960:	4b3c      	ldr	r3, [pc, #240]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	4a3b      	ldr	r2, [pc, #236]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 8002966:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800296a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800296c:	f7ff f8f8 	bl	8001b60 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002974:	f7ff f8f4 	bl	8001b60 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e062      	b.n	8002a4c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002986:	4b33      	ldr	r3, [pc, #204]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002992:	e05a      	b.n	8002a4a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e059      	b.n	8002a4c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002998:	4b2e      	ldr	r3, [pc, #184]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d152      	bne.n	8002a4a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029a4:	4b2b      	ldr	r3, [pc, #172]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a2a      	ldr	r2, [pc, #168]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 80029aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029b0:	4b28      	ldr	r3, [pc, #160]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	4a27      	ldr	r2, [pc, #156]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 80029b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029bc:	f7ff f8d0 	bl	8001b60 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c4:	f7ff f8cc 	bl	8001b60 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e03a      	b.n	8002a4c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d6:	4b1f      	ldr	r3, [pc, #124]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0f0      	beq.n	80029c4 <HAL_RCC_OscConfig+0x734>
 80029e2:	e032      	b.n	8002a4a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	2b0c      	cmp	r3, #12
 80029e8:	d02d      	beq.n	8002a46 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ea:	4b1a      	ldr	r3, [pc, #104]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a19      	ldr	r2, [pc, #100]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 80029f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029f4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80029f6:	4b17      	ldr	r3, [pc, #92]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d105      	bne.n	8002a0e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002a02:	4b14      	ldr	r3, [pc, #80]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	4a13      	ldr	r2, [pc, #76]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 8002a08:	f023 0303 	bic.w	r3, r3, #3
 8002a0c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a0e:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	4a10      	ldr	r2, [pc, #64]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 8002a14:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1e:	f7ff f89f 	bl	8001b60 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a26:	f7ff f89b 	bl	8001b60 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e009      	b.n	8002a4c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_RCC_OscConfig+0x7c4>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1f0      	bne.n	8002a26 <HAL_RCC_OscConfig+0x796>
 8002a44:	e001      	b.n	8002a4a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3720      	adds	r7, #32
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40021000 	.word	0x40021000
 8002a58:	f99d808c 	.word	0xf99d808c

08002a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0c8      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a70:	4b66      	ldr	r3, [pc, #408]	; (8002c0c <HAL_RCC_ClockConfig+0x1b0>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d910      	bls.n	8002aa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7e:	4b63      	ldr	r3, [pc, #396]	; (8002c0c <HAL_RCC_ClockConfig+0x1b0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f023 0207 	bic.w	r2, r3, #7
 8002a86:	4961      	ldr	r1, [pc, #388]	; (8002c0c <HAL_RCC_ClockConfig+0x1b0>)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8e:	4b5f      	ldr	r3, [pc, #380]	; (8002c0c <HAL_RCC_ClockConfig+0x1b0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0b0      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d04c      	beq.n	8002b46 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d107      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab4:	4b56      	ldr	r3, [pc, #344]	; (8002c10 <HAL_RCC_ClockConfig+0x1b4>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d121      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e09e      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d107      	bne.n	8002adc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002acc:	4b50      	ldr	r3, [pc, #320]	; (8002c10 <HAL_RCC_ClockConfig+0x1b4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d115      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e092      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d107      	bne.n	8002af4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ae4:	4b4a      	ldr	r3, [pc, #296]	; (8002c10 <HAL_RCC_ClockConfig+0x1b4>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d109      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e086      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002af4:	4b46      	ldr	r3, [pc, #280]	; (8002c10 <HAL_RCC_ClockConfig+0x1b4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e07e      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b04:	4b42      	ldr	r3, [pc, #264]	; (8002c10 <HAL_RCC_ClockConfig+0x1b4>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f023 0203 	bic.w	r2, r3, #3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	493f      	ldr	r1, [pc, #252]	; (8002c10 <HAL_RCC_ClockConfig+0x1b4>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b16:	f7ff f823 	bl	8001b60 <HAL_GetTick>
 8002b1a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1c:	e00a      	b.n	8002b34 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b1e:	f7ff f81f 	bl	8001b60 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e066      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b34:	4b36      	ldr	r3, [pc, #216]	; (8002c10 <HAL_RCC_ClockConfig+0x1b4>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 020c 	and.w	r2, r3, #12
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d1eb      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d008      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b52:	4b2f      	ldr	r3, [pc, #188]	; (8002c10 <HAL_RCC_ClockConfig+0x1b4>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	492c      	ldr	r1, [pc, #176]	; (8002c10 <HAL_RCC_ClockConfig+0x1b4>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b64:	4b29      	ldr	r3, [pc, #164]	; (8002c0c <HAL_RCC_ClockConfig+0x1b0>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d210      	bcs.n	8002b94 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b72:	4b26      	ldr	r3, [pc, #152]	; (8002c0c <HAL_RCC_ClockConfig+0x1b0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 0207 	bic.w	r2, r3, #7
 8002b7a:	4924      	ldr	r1, [pc, #144]	; (8002c0c <HAL_RCC_ClockConfig+0x1b0>)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b82:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <HAL_RCC_ClockConfig+0x1b0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e036      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba0:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <HAL_RCC_ClockConfig+0x1b4>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4918      	ldr	r1, [pc, #96]	; (8002c10 <HAL_RCC_ClockConfig+0x1b4>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d009      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bbe:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <HAL_RCC_ClockConfig+0x1b4>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4910      	ldr	r1, [pc, #64]	; (8002c10 <HAL_RCC_ClockConfig+0x1b4>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bd2:	f000 f825 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <HAL_RCC_ClockConfig+0x1b4>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	091b      	lsrs	r3, r3, #4
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	490c      	ldr	r1, [pc, #48]	; (8002c14 <HAL_RCC_ClockConfig+0x1b8>)
 8002be4:	5ccb      	ldrb	r3, [r1, r3]
 8002be6:	f003 031f 	and.w	r3, r3, #31
 8002bea:	fa22 f303 	lsr.w	r3, r2, r3
 8002bee:	4a0a      	ldr	r2, [pc, #40]	; (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bf2:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <HAL_RCC_ClockConfig+0x1c0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe ff62 	bl	8001ac0 <HAL_InitTick>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c00:	7afb      	ldrb	r3, [r7, #11]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40022000 	.word	0x40022000
 8002c10:	40021000 	.word	0x40021000
 8002c14:	0800545c 	.word	0x0800545c
 8002c18:	20000010 	.word	0x20000010
 8002c1c:	20000014 	.word	0x20000014

08002c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b089      	sub	sp, #36	; 0x24
 8002c24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c2e:	4b3e      	ldr	r3, [pc, #248]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c38:	4b3b      	ldr	r3, [pc, #236]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0x34>
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	2b0c      	cmp	r3, #12
 8002c4c:	d121      	bne.n	8002c92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d11e      	bne.n	8002c92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c54:	4b34      	ldr	r3, [pc, #208]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d107      	bne.n	8002c70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c60:	4b31      	ldr	r3, [pc, #196]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	f003 030f 	and.w	r3, r3, #15
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	e005      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c70:	4b2d      	ldr	r3, [pc, #180]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	091b      	lsrs	r3, r3, #4
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c7c:	4a2b      	ldr	r2, [pc, #172]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10d      	bne.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c90:	e00a      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d102      	bne.n	8002c9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c98:	4b25      	ldr	r3, [pc, #148]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c9a:	61bb      	str	r3, [r7, #24]
 8002c9c:	e004      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d101      	bne.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ca4:	4b23      	ldr	r3, [pc, #140]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ca6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	2b0c      	cmp	r3, #12
 8002cac:	d134      	bne.n	8002d18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cae:	4b1e      	ldr	r3, [pc, #120]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d003      	beq.n	8002cc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d003      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0xac>
 8002cc4:	e005      	b.n	8002cd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cc6:	4b1a      	ldr	r3, [pc, #104]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cc8:	617b      	str	r3, [r7, #20]
      break;
 8002cca:	e005      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ccc:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cce:	617b      	str	r3, [r7, #20]
      break;
 8002cd0:	e002      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	617b      	str	r3, [r7, #20]
      break;
 8002cd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cd8:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ce6:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	0a1b      	lsrs	r3, r3, #8
 8002cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	fb02 f203 	mul.w	r2, r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	0e5b      	lsrs	r3, r3, #25
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	3301      	adds	r3, #1
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d18:	69bb      	ldr	r3, [r7, #24]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3724      	adds	r7, #36	; 0x24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	08005474 	.word	0x08005474
 8002d30:	00f42400 	.word	0x00f42400
 8002d34:	007a1200 	.word	0x007a1200

08002d38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d3c:	4b03      	ldr	r3, [pc, #12]	; (8002d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	20000010 	.word	0x20000010

08002d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d54:	f7ff fff0 	bl	8002d38 <HAL_RCC_GetHCLKFreq>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	0a1b      	lsrs	r3, r3, #8
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	4904      	ldr	r1, [pc, #16]	; (8002d78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d66:	5ccb      	ldrb	r3, [r1, r3]
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40021000 	.word	0x40021000
 8002d78:	0800546c 	.word	0x0800546c

08002d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d80:	f7ff ffda 	bl	8002d38 <HAL_RCC_GetHCLKFreq>
 8002d84:	4602      	mov	r2, r0
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	0adb      	lsrs	r3, r3, #11
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	4904      	ldr	r1, [pc, #16]	; (8002da4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d92:	5ccb      	ldrb	r3, [r1, r3]
 8002d94:	f003 031f 	and.w	r3, r3, #31
 8002d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40021000 	.word	0x40021000
 8002da4:	0800546c 	.word	0x0800546c

08002da8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002db0:	2300      	movs	r3, #0
 8002db2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002db4:	4b2a      	ldr	r3, [pc, #168]	; (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002dc0:	f7ff fa02 	bl	80021c8 <HAL_PWREx_GetVoltageRange>
 8002dc4:	6178      	str	r0, [r7, #20]
 8002dc6:	e014      	b.n	8002df2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dc8:	4b25      	ldr	r3, [pc, #148]	; (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dcc:	4a24      	ldr	r2, [pc, #144]	; (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	6593      	str	r3, [r2, #88]	; 0x58
 8002dd4:	4b22      	ldr	r3, [pc, #136]	; (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002de0:	f7ff f9f2 	bl	80021c8 <HAL_PWREx_GetVoltageRange>
 8002de4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002de6:	4b1e      	ldr	r3, [pc, #120]	; (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dea:	4a1d      	ldr	r2, [pc, #116]	; (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002df8:	d10b      	bne.n	8002e12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b80      	cmp	r3, #128	; 0x80
 8002dfe:	d919      	bls.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2ba0      	cmp	r3, #160	; 0xa0
 8002e04:	d902      	bls.n	8002e0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e06:	2302      	movs	r3, #2
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	e013      	b.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	e010      	b.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b80      	cmp	r3, #128	; 0x80
 8002e16:	d902      	bls.n	8002e1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e18:	2303      	movs	r3, #3
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	e00a      	b.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b80      	cmp	r3, #128	; 0x80
 8002e22:	d102      	bne.n	8002e2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e24:	2302      	movs	r3, #2
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	e004      	b.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b70      	cmp	r3, #112	; 0x70
 8002e2e:	d101      	bne.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e30:	2301      	movs	r3, #1
 8002e32:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e34:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f023 0207 	bic.w	r2, r3, #7
 8002e3c:	4909      	ldr	r1, [pc, #36]	; (8002e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e44:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d001      	beq.n	8002e56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40021000 	.word	0x40021000
 8002e64:	40022000 	.word	0x40022000

08002e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e70:	2300      	movs	r3, #0
 8002e72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e74:	2300      	movs	r3, #0
 8002e76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d041      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e88:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e8c:	d02a      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e8e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e92:	d824      	bhi.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e98:	d008      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e9e:	d81e      	bhi.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00a      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ea4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ea8:	d010      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002eaa:	e018      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002eac:	4b86      	ldr	r3, [pc, #536]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4a85      	ldr	r2, [pc, #532]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eb8:	e015      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 fabb 	bl	800343c <RCCEx_PLLSAI1_Config>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eca:	e00c      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3320      	adds	r3, #32
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 fba6 	bl	8003624 <RCCEx_PLLSAI2_Config>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002edc:	e003      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ee2:	e000      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ee6:	7cfb      	ldrb	r3, [r7, #19]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10b      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002eec:	4b76      	ldr	r3, [pc, #472]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002efa:	4973      	ldr	r1, [pc, #460]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f02:	e001      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f04:	7cfb      	ldrb	r3, [r7, #19]
 8002f06:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d041      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f18:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f1c:	d02a      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002f1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f22:	d824      	bhi.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f28:	d008      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f2e:	d81e      	bhi.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00a      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f38:	d010      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f3a:	e018      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f3c:	4b62      	ldr	r3, [pc, #392]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	4a61      	ldr	r2, [pc, #388]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f46:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f48:	e015      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	2100      	movs	r1, #0
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 fa73 	bl	800343c <RCCEx_PLLSAI1_Config>
 8002f56:	4603      	mov	r3, r0
 8002f58:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f5a:	e00c      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3320      	adds	r3, #32
 8002f60:	2100      	movs	r1, #0
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 fb5e 	bl	8003624 <RCCEx_PLLSAI2_Config>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f6c:	e003      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	74fb      	strb	r3, [r7, #19]
      break;
 8002f72:	e000      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f76:	7cfb      	ldrb	r3, [r7, #19]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10b      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f7c:	4b52      	ldr	r3, [pc, #328]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f82:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f8a:	494f      	ldr	r1, [pc, #316]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f92:	e001      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f94:	7cfb      	ldrb	r3, [r7, #19]
 8002f96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 80a0 	beq.w	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002faa:	4b47      	ldr	r3, [pc, #284]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00d      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc0:	4b41      	ldr	r3, [pc, #260]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc4:	4a40      	ldr	r2, [pc, #256]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fca:	6593      	str	r3, [r2, #88]	; 0x58
 8002fcc:	4b3e      	ldr	r3, [pc, #248]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fdc:	4b3b      	ldr	r3, [pc, #236]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a3a      	ldr	r2, [pc, #232]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fe8:	f7fe fdba 	bl	8001b60 <HAL_GetTick>
 8002fec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fee:	e009      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff0:	f7fe fdb6 	bl	8001b60 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d902      	bls.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	74fb      	strb	r3, [r7, #19]
        break;
 8003002:	e005      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003004:	4b31      	ldr	r3, [pc, #196]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0ef      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003010:	7cfb      	ldrb	r3, [r7, #19]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d15c      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003016:	4b2c      	ldr	r3, [pc, #176]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003020:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d01f      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	429a      	cmp	r2, r3
 8003032:	d019      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003034:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800303e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003040:	4b21      	ldr	r3, [pc, #132]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003046:	4a20      	ldr	r2, [pc, #128]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003050:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003056:	4a1c      	ldr	r2, [pc, #112]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800305c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003060:	4a19      	ldr	r2, [pc, #100]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d016      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003072:	f7fe fd75 	bl	8001b60 <HAL_GetTick>
 8003076:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003078:	e00b      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307a:	f7fe fd71 	bl	8001b60 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	f241 3288 	movw	r2, #5000	; 0x1388
 8003088:	4293      	cmp	r3, r2
 800308a:	d902      	bls.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	74fb      	strb	r3, [r7, #19]
            break;
 8003090:	e006      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003092:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0ec      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80030a0:	7cfb      	ldrb	r3, [r7, #19]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10c      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030a6:	4b08      	ldr	r3, [pc, #32]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030b6:	4904      	ldr	r1, [pc, #16]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030be:	e009      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030c0:	7cfb      	ldrb	r3, [r7, #19]
 80030c2:	74bb      	strb	r3, [r7, #18]
 80030c4:	e006      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80030c6:	bf00      	nop
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d0:	7cfb      	ldrb	r3, [r7, #19]
 80030d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030d4:	7c7b      	ldrb	r3, [r7, #17]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d105      	bne.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030da:	4b9e      	ldr	r3, [pc, #632]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030de:	4a9d      	ldr	r2, [pc, #628]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030f2:	4b98      	ldr	r3, [pc, #608]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f8:	f023 0203 	bic.w	r2, r3, #3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003100:	4994      	ldr	r1, [pc, #592]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003102:	4313      	orrs	r3, r2
 8003104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00a      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003114:	4b8f      	ldr	r3, [pc, #572]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311a:	f023 020c 	bic.w	r2, r3, #12
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003122:	498c      	ldr	r1, [pc, #560]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003136:	4b87      	ldr	r3, [pc, #540]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	4983      	ldr	r1, [pc, #524]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00a      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003158:	4b7e      	ldr	r3, [pc, #504]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003166:	497b      	ldr	r1, [pc, #492]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00a      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800317a:	4b76      	ldr	r3, [pc, #472]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800317c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003180:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003188:	4972      	ldr	r1, [pc, #456]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00a      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800319c:	4b6d      	ldr	r3, [pc, #436]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031aa:	496a      	ldr	r1, [pc, #424]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031be:	4b65      	ldr	r3, [pc, #404]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031cc:	4961      	ldr	r1, [pc, #388]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00a      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031e0:	4b5c      	ldr	r3, [pc, #368]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ee:	4959      	ldr	r1, [pc, #356]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003202:	4b54      	ldr	r3, [pc, #336]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003208:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003210:	4950      	ldr	r1, [pc, #320]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00a      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003224:	4b4b      	ldr	r3, [pc, #300]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003232:	4948      	ldr	r1, [pc, #288]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003246:	4b43      	ldr	r3, [pc, #268]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003254:	493f      	ldr	r1, [pc, #252]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d028      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003268:	4b3a      	ldr	r3, [pc, #232]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003276:	4937      	ldr	r1, [pc, #220]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003282:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003286:	d106      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003288:	4b32      	ldr	r3, [pc, #200]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	4a31      	ldr	r2, [pc, #196]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003292:	60d3      	str	r3, [r2, #12]
 8003294:	e011      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800329a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800329e:	d10c      	bne.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3304      	adds	r3, #4
 80032a4:	2101      	movs	r1, #1
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 f8c8 	bl	800343c <RCCEx_PLLSAI1_Config>
 80032ac:	4603      	mov	r3, r0
 80032ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032b0:	7cfb      	ldrb	r3, [r7, #19]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80032b6:	7cfb      	ldrb	r3, [r7, #19]
 80032b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d028      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032c6:	4b23      	ldr	r3, [pc, #140]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d4:	491f      	ldr	r1, [pc, #124]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032e4:	d106      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032e6:	4b1b      	ldr	r3, [pc, #108]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	4a1a      	ldr	r2, [pc, #104]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032f0:	60d3      	str	r3, [r2, #12]
 80032f2:	e011      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032fc:	d10c      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3304      	adds	r3, #4
 8003302:	2101      	movs	r1, #1
 8003304:	4618      	mov	r0, r3
 8003306:	f000 f899 	bl	800343c <RCCEx_PLLSAI1_Config>
 800330a:	4603      	mov	r3, r0
 800330c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800330e:	7cfb      	ldrb	r3, [r7, #19]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003314:	7cfb      	ldrb	r3, [r7, #19]
 8003316:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d02b      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003332:	4908      	ldr	r1, [pc, #32]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003334:	4313      	orrs	r3, r2
 8003336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800333e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003342:	d109      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003344:	4b03      	ldr	r3, [pc, #12]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	4a02      	ldr	r2, [pc, #8]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800334e:	60d3      	str	r3, [r2, #12]
 8003350:	e014      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003352:	bf00      	nop
 8003354:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800335c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003360:	d10c      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3304      	adds	r3, #4
 8003366:	2101      	movs	r1, #1
 8003368:	4618      	mov	r0, r3
 800336a:	f000 f867 	bl	800343c <RCCEx_PLLSAI1_Config>
 800336e:	4603      	mov	r3, r0
 8003370:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003372:	7cfb      	ldrb	r3, [r7, #19]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003378:	7cfb      	ldrb	r3, [r7, #19]
 800337a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d02f      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003388:	4b2b      	ldr	r3, [pc, #172]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800338a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003396:	4928      	ldr	r1, [pc, #160]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003398:	4313      	orrs	r3, r2
 800339a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033a6:	d10d      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3304      	adds	r3, #4
 80033ac:	2102      	movs	r1, #2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 f844 	bl	800343c <RCCEx_PLLSAI1_Config>
 80033b4:	4603      	mov	r3, r0
 80033b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d014      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033be:	7cfb      	ldrb	r3, [r7, #19]
 80033c0:	74bb      	strb	r3, [r7, #18]
 80033c2:	e011      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3320      	adds	r3, #32
 80033d2:	2102      	movs	r1, #2
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 f925 	bl	8003624 <RCCEx_PLLSAI2_Config>
 80033da:	4603      	mov	r3, r0
 80033dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033de:	7cfb      	ldrb	r3, [r7, #19]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033e4:	7cfb      	ldrb	r3, [r7, #19]
 80033e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033f4:	4b10      	ldr	r3, [pc, #64]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003402:	490d      	ldr	r1, [pc, #52]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00b      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003416:	4b08      	ldr	r3, [pc, #32]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003426:	4904      	ldr	r1, [pc, #16]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800342e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40021000 	.word	0x40021000

0800343c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800344a:	4b75      	ldr	r3, [pc, #468]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d018      	beq.n	8003488 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003456:	4b72      	ldr	r3, [pc, #456]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f003 0203 	and.w	r2, r3, #3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d10d      	bne.n	8003482 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
       ||
 800346a:	2b00      	cmp	r3, #0
 800346c:	d009      	beq.n	8003482 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800346e:	4b6c      	ldr	r3, [pc, #432]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	091b      	lsrs	r3, r3, #4
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	1c5a      	adds	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
       ||
 800347e:	429a      	cmp	r2, r3
 8003480:	d047      	beq.n	8003512 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	73fb      	strb	r3, [r7, #15]
 8003486:	e044      	b.n	8003512 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b03      	cmp	r3, #3
 800348e:	d018      	beq.n	80034c2 <RCCEx_PLLSAI1_Config+0x86>
 8003490:	2b03      	cmp	r3, #3
 8003492:	d825      	bhi.n	80034e0 <RCCEx_PLLSAI1_Config+0xa4>
 8003494:	2b01      	cmp	r3, #1
 8003496:	d002      	beq.n	800349e <RCCEx_PLLSAI1_Config+0x62>
 8003498:	2b02      	cmp	r3, #2
 800349a:	d009      	beq.n	80034b0 <RCCEx_PLLSAI1_Config+0x74>
 800349c:	e020      	b.n	80034e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800349e:	4b60      	ldr	r3, [pc, #384]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d11d      	bne.n	80034e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ae:	e01a      	b.n	80034e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034b0:	4b5b      	ldr	r3, [pc, #364]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d116      	bne.n	80034ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034c0:	e013      	b.n	80034ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034c2:	4b57      	ldr	r3, [pc, #348]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10f      	bne.n	80034ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034ce:	4b54      	ldr	r3, [pc, #336]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d109      	bne.n	80034ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034de:	e006      	b.n	80034ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
      break;
 80034e4:	e004      	b.n	80034f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034e6:	bf00      	nop
 80034e8:	e002      	b.n	80034f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034ea:	bf00      	nop
 80034ec:	e000      	b.n	80034f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10d      	bne.n	8003512 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034f6:	4b4a      	ldr	r3, [pc, #296]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6819      	ldr	r1, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	3b01      	subs	r3, #1
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	430b      	orrs	r3, r1
 800350c:	4944      	ldr	r1, [pc, #272]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800350e:	4313      	orrs	r3, r2
 8003510:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d17d      	bne.n	8003614 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003518:	4b41      	ldr	r3, [pc, #260]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a40      	ldr	r2, [pc, #256]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800351e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003522:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003524:	f7fe fb1c 	bl	8001b60 <HAL_GetTick>
 8003528:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800352a:	e009      	b.n	8003540 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800352c:	f7fe fb18 	bl	8001b60 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d902      	bls.n	8003540 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	73fb      	strb	r3, [r7, #15]
        break;
 800353e:	e005      	b.n	800354c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003540:	4b37      	ldr	r3, [pc, #220]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1ef      	bne.n	800352c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d160      	bne.n	8003614 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d111      	bne.n	800357c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003558:	4b31      	ldr	r3, [pc, #196]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6892      	ldr	r2, [r2, #8]
 8003568:	0211      	lsls	r1, r2, #8
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	68d2      	ldr	r2, [r2, #12]
 800356e:	0912      	lsrs	r2, r2, #4
 8003570:	0452      	lsls	r2, r2, #17
 8003572:	430a      	orrs	r2, r1
 8003574:	492a      	ldr	r1, [pc, #168]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003576:	4313      	orrs	r3, r2
 8003578:	610b      	str	r3, [r1, #16]
 800357a:	e027      	b.n	80035cc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d112      	bne.n	80035a8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003582:	4b27      	ldr	r3, [pc, #156]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800358a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6892      	ldr	r2, [r2, #8]
 8003592:	0211      	lsls	r1, r2, #8
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6912      	ldr	r2, [r2, #16]
 8003598:	0852      	lsrs	r2, r2, #1
 800359a:	3a01      	subs	r2, #1
 800359c:	0552      	lsls	r2, r2, #21
 800359e:	430a      	orrs	r2, r1
 80035a0:	491f      	ldr	r1, [pc, #124]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	610b      	str	r3, [r1, #16]
 80035a6:	e011      	b.n	80035cc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035a8:	4b1d      	ldr	r3, [pc, #116]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6892      	ldr	r2, [r2, #8]
 80035b8:	0211      	lsls	r1, r2, #8
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6952      	ldr	r2, [r2, #20]
 80035be:	0852      	lsrs	r2, r2, #1
 80035c0:	3a01      	subs	r2, #1
 80035c2:	0652      	lsls	r2, r2, #25
 80035c4:	430a      	orrs	r2, r1
 80035c6:	4916      	ldr	r1, [pc, #88]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035cc:	4b14      	ldr	r3, [pc, #80]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a13      	ldr	r2, [pc, #76]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d8:	f7fe fac2 	bl	8001b60 <HAL_GetTick>
 80035dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035de:	e009      	b.n	80035f4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035e0:	f7fe fabe 	bl	8001b60 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d902      	bls.n	80035f4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	73fb      	strb	r3, [r7, #15]
          break;
 80035f2:	e005      	b.n	8003600 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035f4:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0ef      	beq.n	80035e0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003600:	7bfb      	ldrb	r3, [r7, #15]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d106      	bne.n	8003614 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003606:	4b06      	ldr	r3, [pc, #24]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	4904      	ldr	r1, [pc, #16]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003610:	4313      	orrs	r3, r2
 8003612:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003614:	7bfb      	ldrb	r3, [r7, #15]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40021000 	.word	0x40021000

08003624 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003632:	4b6a      	ldr	r3, [pc, #424]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d018      	beq.n	8003670 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800363e:	4b67      	ldr	r3, [pc, #412]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f003 0203 	and.w	r2, r3, #3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d10d      	bne.n	800366a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
       ||
 8003652:	2b00      	cmp	r3, #0
 8003654:	d009      	beq.n	800366a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003656:	4b61      	ldr	r3, [pc, #388]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	091b      	lsrs	r3, r3, #4
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
       ||
 8003666:	429a      	cmp	r2, r3
 8003668:	d047      	beq.n	80036fa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	73fb      	strb	r3, [r7, #15]
 800366e:	e044      	b.n	80036fa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b03      	cmp	r3, #3
 8003676:	d018      	beq.n	80036aa <RCCEx_PLLSAI2_Config+0x86>
 8003678:	2b03      	cmp	r3, #3
 800367a:	d825      	bhi.n	80036c8 <RCCEx_PLLSAI2_Config+0xa4>
 800367c:	2b01      	cmp	r3, #1
 800367e:	d002      	beq.n	8003686 <RCCEx_PLLSAI2_Config+0x62>
 8003680:	2b02      	cmp	r3, #2
 8003682:	d009      	beq.n	8003698 <RCCEx_PLLSAI2_Config+0x74>
 8003684:	e020      	b.n	80036c8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003686:	4b55      	ldr	r3, [pc, #340]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d11d      	bne.n	80036ce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003696:	e01a      	b.n	80036ce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003698:	4b50      	ldr	r3, [pc, #320]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d116      	bne.n	80036d2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a8:	e013      	b.n	80036d2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036aa:	4b4c      	ldr	r3, [pc, #304]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10f      	bne.n	80036d6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036b6:	4b49      	ldr	r3, [pc, #292]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d109      	bne.n	80036d6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036c6:	e006      	b.n	80036d6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
      break;
 80036cc:	e004      	b.n	80036d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036ce:	bf00      	nop
 80036d0:	e002      	b.n	80036d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036d2:	bf00      	nop
 80036d4:	e000      	b.n	80036d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10d      	bne.n	80036fa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036de:	4b3f      	ldr	r3, [pc, #252]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6819      	ldr	r1, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	430b      	orrs	r3, r1
 80036f4:	4939      	ldr	r1, [pc, #228]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d167      	bne.n	80037d0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003700:	4b36      	ldr	r3, [pc, #216]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a35      	ldr	r2, [pc, #212]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800370c:	f7fe fa28 	bl	8001b60 <HAL_GetTick>
 8003710:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003712:	e009      	b.n	8003728 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003714:	f7fe fa24 	bl	8001b60 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d902      	bls.n	8003728 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	73fb      	strb	r3, [r7, #15]
        break;
 8003726:	e005      	b.n	8003734 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003728:	4b2c      	ldr	r3, [pc, #176]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1ef      	bne.n	8003714 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003734:	7bfb      	ldrb	r3, [r7, #15]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d14a      	bne.n	80037d0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d111      	bne.n	8003764 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003740:	4b26      	ldr	r3, [pc, #152]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6892      	ldr	r2, [r2, #8]
 8003750:	0211      	lsls	r1, r2, #8
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	68d2      	ldr	r2, [r2, #12]
 8003756:	0912      	lsrs	r2, r2, #4
 8003758:	0452      	lsls	r2, r2, #17
 800375a:	430a      	orrs	r2, r1
 800375c:	491f      	ldr	r1, [pc, #124]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800375e:	4313      	orrs	r3, r2
 8003760:	614b      	str	r3, [r1, #20]
 8003762:	e011      	b.n	8003788 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003764:	4b1d      	ldr	r3, [pc, #116]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800376c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6892      	ldr	r2, [r2, #8]
 8003774:	0211      	lsls	r1, r2, #8
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6912      	ldr	r2, [r2, #16]
 800377a:	0852      	lsrs	r2, r2, #1
 800377c:	3a01      	subs	r2, #1
 800377e:	0652      	lsls	r2, r2, #25
 8003780:	430a      	orrs	r2, r1
 8003782:	4916      	ldr	r1, [pc, #88]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003784:	4313      	orrs	r3, r2
 8003786:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003788:	4b14      	ldr	r3, [pc, #80]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a13      	ldr	r2, [pc, #76]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800378e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003792:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003794:	f7fe f9e4 	bl	8001b60 <HAL_GetTick>
 8003798:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800379a:	e009      	b.n	80037b0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800379c:	f7fe f9e0 	bl	8001b60 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d902      	bls.n	80037b0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	73fb      	strb	r3, [r7, #15]
          break;
 80037ae:	e005      	b.n	80037bc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037b0:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0ef      	beq.n	800379c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d106      	bne.n	80037d0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037c2:	4b06      	ldr	r3, [pc, #24]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c4:	695a      	ldr	r2, [r3, #20]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	4904      	ldr	r1, [pc, #16]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40021000 	.word	0x40021000

080037e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e049      	b.n	8003886 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d106      	bne.n	800380c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7fd ffd0 	bl	80017ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3304      	adds	r3, #4
 800381c:	4619      	mov	r1, r3
 800381e:	4610      	mov	r0, r2
 8003820:	f000 fba2 	bl	8003f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
	...

08003890 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d001      	beq.n	80038a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e047      	b.n	8003938 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2202      	movs	r2, #2
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a23      	ldr	r2, [pc, #140]	; (8003944 <HAL_TIM_Base_Start+0xb4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d01d      	beq.n	80038f6 <HAL_TIM_Base_Start+0x66>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c2:	d018      	beq.n	80038f6 <HAL_TIM_Base_Start+0x66>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a1f      	ldr	r2, [pc, #124]	; (8003948 <HAL_TIM_Base_Start+0xb8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d013      	beq.n	80038f6 <HAL_TIM_Base_Start+0x66>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a1e      	ldr	r2, [pc, #120]	; (800394c <HAL_TIM_Base_Start+0xbc>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d00e      	beq.n	80038f6 <HAL_TIM_Base_Start+0x66>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a1c      	ldr	r2, [pc, #112]	; (8003950 <HAL_TIM_Base_Start+0xc0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d009      	beq.n	80038f6 <HAL_TIM_Base_Start+0x66>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a1b      	ldr	r2, [pc, #108]	; (8003954 <HAL_TIM_Base_Start+0xc4>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d004      	beq.n	80038f6 <HAL_TIM_Base_Start+0x66>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a19      	ldr	r2, [pc, #100]	; (8003958 <HAL_TIM_Base_Start+0xc8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d115      	bne.n	8003922 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	4b17      	ldr	r3, [pc, #92]	; (800395c <HAL_TIM_Base_Start+0xcc>)
 80038fe:	4013      	ands	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b06      	cmp	r3, #6
 8003906:	d015      	beq.n	8003934 <HAL_TIM_Base_Start+0xa4>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800390e:	d011      	beq.n	8003934 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003920:	e008      	b.n	8003934 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f042 0201 	orr.w	r2, r2, #1
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	e000      	b.n	8003936 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003934:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	40012c00 	.word	0x40012c00
 8003948:	40000400 	.word	0x40000400
 800394c:	40000800 	.word	0x40000800
 8003950:	40000c00 	.word	0x40000c00
 8003954:	40013400 	.word	0x40013400
 8003958:	40014000 	.word	0x40014000
 800395c:	00010007 	.word	0x00010007

08003960 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e049      	b.n	8003a06 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fd fedc 	bl	8001744 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3304      	adds	r3, #4
 800399c:	4619      	mov	r1, r3
 800399e:	4610      	mov	r0, r2
 80039a0:	f000 fae2 	bl	8003f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d109      	bne.n	8003a34 <HAL_TIM_PWM_Start+0x24>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	bf14      	ite	ne
 8003a2c:	2301      	movne	r3, #1
 8003a2e:	2300      	moveq	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	e03c      	b.n	8003aae <HAL_TIM_PWM_Start+0x9e>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d109      	bne.n	8003a4e <HAL_TIM_PWM_Start+0x3e>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	bf14      	ite	ne
 8003a46:	2301      	movne	r3, #1
 8003a48:	2300      	moveq	r3, #0
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	e02f      	b.n	8003aae <HAL_TIM_PWM_Start+0x9e>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d109      	bne.n	8003a68 <HAL_TIM_PWM_Start+0x58>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	bf14      	ite	ne
 8003a60:	2301      	movne	r3, #1
 8003a62:	2300      	moveq	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	e022      	b.n	8003aae <HAL_TIM_PWM_Start+0x9e>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	2b0c      	cmp	r3, #12
 8003a6c:	d109      	bne.n	8003a82 <HAL_TIM_PWM_Start+0x72>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	bf14      	ite	ne
 8003a7a:	2301      	movne	r3, #1
 8003a7c:	2300      	moveq	r3, #0
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	e015      	b.n	8003aae <HAL_TIM_PWM_Start+0x9e>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b10      	cmp	r3, #16
 8003a86:	d109      	bne.n	8003a9c <HAL_TIM_PWM_Start+0x8c>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	bf14      	ite	ne
 8003a94:	2301      	movne	r3, #1
 8003a96:	2300      	moveq	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	e008      	b.n	8003aae <HAL_TIM_PWM_Start+0x9e>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	bf14      	ite	ne
 8003aa8:	2301      	movne	r3, #1
 8003aaa:	2300      	moveq	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e09c      	b.n	8003bf0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d104      	bne.n	8003ac6 <HAL_TIM_PWM_Start+0xb6>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ac4:	e023      	b.n	8003b0e <HAL_TIM_PWM_Start+0xfe>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d104      	bne.n	8003ad6 <HAL_TIM_PWM_Start+0xc6>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ad4:	e01b      	b.n	8003b0e <HAL_TIM_PWM_Start+0xfe>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d104      	bne.n	8003ae6 <HAL_TIM_PWM_Start+0xd6>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ae4:	e013      	b.n	8003b0e <HAL_TIM_PWM_Start+0xfe>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b0c      	cmp	r3, #12
 8003aea:	d104      	bne.n	8003af6 <HAL_TIM_PWM_Start+0xe6>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003af4:	e00b      	b.n	8003b0e <HAL_TIM_PWM_Start+0xfe>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b10      	cmp	r3, #16
 8003afa:	d104      	bne.n	8003b06 <HAL_TIM_PWM_Start+0xf6>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2202      	movs	r2, #2
 8003b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b04:	e003      	b.n	8003b0e <HAL_TIM_PWM_Start+0xfe>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2201      	movs	r2, #1
 8003b14:	6839      	ldr	r1, [r7, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 fd96 	bl	8004648 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a35      	ldr	r2, [pc, #212]	; (8003bf8 <HAL_TIM_PWM_Start+0x1e8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d013      	beq.n	8003b4e <HAL_TIM_PWM_Start+0x13e>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a34      	ldr	r2, [pc, #208]	; (8003bfc <HAL_TIM_PWM_Start+0x1ec>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d00e      	beq.n	8003b4e <HAL_TIM_PWM_Start+0x13e>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a32      	ldr	r2, [pc, #200]	; (8003c00 <HAL_TIM_PWM_Start+0x1f0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d009      	beq.n	8003b4e <HAL_TIM_PWM_Start+0x13e>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a31      	ldr	r2, [pc, #196]	; (8003c04 <HAL_TIM_PWM_Start+0x1f4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d004      	beq.n	8003b4e <HAL_TIM_PWM_Start+0x13e>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a2f      	ldr	r2, [pc, #188]	; (8003c08 <HAL_TIM_PWM_Start+0x1f8>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d101      	bne.n	8003b52 <HAL_TIM_PWM_Start+0x142>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <HAL_TIM_PWM_Start+0x144>
 8003b52:	2300      	movs	r3, #0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d007      	beq.n	8003b68 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b66:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a22      	ldr	r2, [pc, #136]	; (8003bf8 <HAL_TIM_PWM_Start+0x1e8>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d01d      	beq.n	8003bae <HAL_TIM_PWM_Start+0x19e>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7a:	d018      	beq.n	8003bae <HAL_TIM_PWM_Start+0x19e>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a22      	ldr	r2, [pc, #136]	; (8003c0c <HAL_TIM_PWM_Start+0x1fc>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d013      	beq.n	8003bae <HAL_TIM_PWM_Start+0x19e>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a21      	ldr	r2, [pc, #132]	; (8003c10 <HAL_TIM_PWM_Start+0x200>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d00e      	beq.n	8003bae <HAL_TIM_PWM_Start+0x19e>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a1f      	ldr	r2, [pc, #124]	; (8003c14 <HAL_TIM_PWM_Start+0x204>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d009      	beq.n	8003bae <HAL_TIM_PWM_Start+0x19e>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a17      	ldr	r2, [pc, #92]	; (8003bfc <HAL_TIM_PWM_Start+0x1ec>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d004      	beq.n	8003bae <HAL_TIM_PWM_Start+0x19e>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a15      	ldr	r2, [pc, #84]	; (8003c00 <HAL_TIM_PWM_Start+0x1f0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d115      	bne.n	8003bda <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	4b18      	ldr	r3, [pc, #96]	; (8003c18 <HAL_TIM_PWM_Start+0x208>)
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2b06      	cmp	r3, #6
 8003bbe:	d015      	beq.n	8003bec <HAL_TIM_PWM_Start+0x1dc>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc6:	d011      	beq.n	8003bec <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0201 	orr.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd8:	e008      	b.n	8003bec <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f042 0201 	orr.w	r2, r2, #1
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	e000      	b.n	8003bee <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40012c00 	.word	0x40012c00
 8003bfc:	40013400 	.word	0x40013400
 8003c00:	40014000 	.word	0x40014000
 8003c04:	40014400 	.word	0x40014400
 8003c08:	40014800 	.word	0x40014800
 8003c0c:	40000400 	.word	0x40000400
 8003c10:	40000800 	.word	0x40000800
 8003c14:	40000c00 	.word	0x40000c00
 8003c18:	00010007 	.word	0x00010007

08003c1c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	6839      	ldr	r1, [r7, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fd0a 	bl	8004648 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a3e      	ldr	r2, [pc, #248]	; (8003d34 <HAL_TIM_PWM_Stop+0x118>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d013      	beq.n	8003c66 <HAL_TIM_PWM_Stop+0x4a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a3d      	ldr	r2, [pc, #244]	; (8003d38 <HAL_TIM_PWM_Stop+0x11c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d00e      	beq.n	8003c66 <HAL_TIM_PWM_Stop+0x4a>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a3b      	ldr	r2, [pc, #236]	; (8003d3c <HAL_TIM_PWM_Stop+0x120>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d009      	beq.n	8003c66 <HAL_TIM_PWM_Stop+0x4a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a3a      	ldr	r2, [pc, #232]	; (8003d40 <HAL_TIM_PWM_Stop+0x124>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d004      	beq.n	8003c66 <HAL_TIM_PWM_Stop+0x4a>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a38      	ldr	r2, [pc, #224]	; (8003d44 <HAL_TIM_PWM_Stop+0x128>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d101      	bne.n	8003c6a <HAL_TIM_PWM_Stop+0x4e>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <HAL_TIM_PWM_Stop+0x50>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d017      	beq.n	8003ca0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6a1a      	ldr	r2, [r3, #32]
 8003c76:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10f      	bne.n	8003ca0 <HAL_TIM_PWM_Stop+0x84>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6a1a      	ldr	r2, [r3, #32]
 8003c86:	f240 4344 	movw	r3, #1092	; 0x444
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d107      	bne.n	8003ca0 <HAL_TIM_PWM_Stop+0x84>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c9e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6a1a      	ldr	r2, [r3, #32]
 8003ca6:	f241 1311 	movw	r3, #4369	; 0x1111
 8003caa:	4013      	ands	r3, r2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10f      	bne.n	8003cd0 <HAL_TIM_PWM_Stop+0xb4>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6a1a      	ldr	r2, [r3, #32]
 8003cb6:	f240 4344 	movw	r3, #1092	; 0x444
 8003cba:	4013      	ands	r3, r2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d107      	bne.n	8003cd0 <HAL_TIM_PWM_Stop+0xb4>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0201 	bic.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d104      	bne.n	8003ce0 <HAL_TIM_PWM_Stop+0xc4>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cde:	e023      	b.n	8003d28 <HAL_TIM_PWM_Stop+0x10c>
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d104      	bne.n	8003cf0 <HAL_TIM_PWM_Stop+0xd4>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cee:	e01b      	b.n	8003d28 <HAL_TIM_PWM_Stop+0x10c>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d104      	bne.n	8003d00 <HAL_TIM_PWM_Stop+0xe4>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cfe:	e013      	b.n	8003d28 <HAL_TIM_PWM_Stop+0x10c>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2b0c      	cmp	r3, #12
 8003d04:	d104      	bne.n	8003d10 <HAL_TIM_PWM_Stop+0xf4>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d0e:	e00b      	b.n	8003d28 <HAL_TIM_PWM_Stop+0x10c>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2b10      	cmp	r3, #16
 8003d14:	d104      	bne.n	8003d20 <HAL_TIM_PWM_Stop+0x104>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d1e:	e003      	b.n	8003d28 <HAL_TIM_PWM_Stop+0x10c>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40012c00 	.word	0x40012c00
 8003d38:	40013400 	.word	0x40013400
 8003d3c:	40014000 	.word	0x40014000
 8003d40:	40014400 	.word	0x40014400
 8003d44:	40014800 	.word	0x40014800

08003d48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d101      	bne.n	8003d62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e0fd      	b.n	8003f5e <HAL_TIM_PWM_ConfigChannel+0x216>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b14      	cmp	r3, #20
 8003d6e:	f200 80f0 	bhi.w	8003f52 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003d72:	a201      	add	r2, pc, #4	; (adr r2, 8003d78 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d78:	08003dcd 	.word	0x08003dcd
 8003d7c:	08003f53 	.word	0x08003f53
 8003d80:	08003f53 	.word	0x08003f53
 8003d84:	08003f53 	.word	0x08003f53
 8003d88:	08003e0d 	.word	0x08003e0d
 8003d8c:	08003f53 	.word	0x08003f53
 8003d90:	08003f53 	.word	0x08003f53
 8003d94:	08003f53 	.word	0x08003f53
 8003d98:	08003e4f 	.word	0x08003e4f
 8003d9c:	08003f53 	.word	0x08003f53
 8003da0:	08003f53 	.word	0x08003f53
 8003da4:	08003f53 	.word	0x08003f53
 8003da8:	08003e8f 	.word	0x08003e8f
 8003dac:	08003f53 	.word	0x08003f53
 8003db0:	08003f53 	.word	0x08003f53
 8003db4:	08003f53 	.word	0x08003f53
 8003db8:	08003ed1 	.word	0x08003ed1
 8003dbc:	08003f53 	.word	0x08003f53
 8003dc0:	08003f53 	.word	0x08003f53
 8003dc4:	08003f53 	.word	0x08003f53
 8003dc8:	08003f11 	.word	0x08003f11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68b9      	ldr	r1, [r7, #8]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 f962 	bl	800409c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699a      	ldr	r2, [r3, #24]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0208 	orr.w	r2, r2, #8
 8003de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699a      	ldr	r2, [r3, #24]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0204 	bic.w	r2, r2, #4
 8003df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6999      	ldr	r1, [r3, #24]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	691a      	ldr	r2, [r3, #16]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	619a      	str	r2, [r3, #24]
      break;
 8003e0a:	e0a3      	b.n	8003f54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68b9      	ldr	r1, [r7, #8]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 f9d2 	bl	80041bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699a      	ldr	r2, [r3, #24]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699a      	ldr	r2, [r3, #24]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6999      	ldr	r1, [r3, #24]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	021a      	lsls	r2, r3, #8
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	619a      	str	r2, [r3, #24]
      break;
 8003e4c:	e082      	b.n	8003f54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68b9      	ldr	r1, [r7, #8]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 fa3b 	bl	80042d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69da      	ldr	r2, [r3, #28]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f042 0208 	orr.w	r2, r2, #8
 8003e68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	69da      	ldr	r2, [r3, #28]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 0204 	bic.w	r2, r2, #4
 8003e78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	69d9      	ldr	r1, [r3, #28]
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	61da      	str	r2, [r3, #28]
      break;
 8003e8c:	e062      	b.n	8003f54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68b9      	ldr	r1, [r7, #8]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 faa3 	bl	80043e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	69da      	ldr	r2, [r3, #28]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69da      	ldr	r2, [r3, #28]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	69d9      	ldr	r1, [r3, #28]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	021a      	lsls	r2, r3, #8
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	61da      	str	r2, [r3, #28]
      break;
 8003ece:	e041      	b.n	8003f54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68b9      	ldr	r1, [r7, #8]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 faec 	bl	80044b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0208 	orr.w	r2, r2, #8
 8003eea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0204 	bic.w	r2, r2, #4
 8003efa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	691a      	ldr	r2, [r3, #16]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f0e:	e021      	b.n	8003f54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68b9      	ldr	r1, [r7, #8]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 fb30 	bl	800457c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	021a      	lsls	r2, r3, #8
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f50:	e000      	b.n	8003f54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8003f52:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop

08003f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a40      	ldr	r2, [pc, #256]	; (800407c <TIM_Base_SetConfig+0x114>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d013      	beq.n	8003fa8 <TIM_Base_SetConfig+0x40>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f86:	d00f      	beq.n	8003fa8 <TIM_Base_SetConfig+0x40>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a3d      	ldr	r2, [pc, #244]	; (8004080 <TIM_Base_SetConfig+0x118>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d00b      	beq.n	8003fa8 <TIM_Base_SetConfig+0x40>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a3c      	ldr	r2, [pc, #240]	; (8004084 <TIM_Base_SetConfig+0x11c>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d007      	beq.n	8003fa8 <TIM_Base_SetConfig+0x40>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a3b      	ldr	r2, [pc, #236]	; (8004088 <TIM_Base_SetConfig+0x120>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d003      	beq.n	8003fa8 <TIM_Base_SetConfig+0x40>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a3a      	ldr	r2, [pc, #232]	; (800408c <TIM_Base_SetConfig+0x124>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d108      	bne.n	8003fba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a2f      	ldr	r2, [pc, #188]	; (800407c <TIM_Base_SetConfig+0x114>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d01f      	beq.n	8004002 <TIM_Base_SetConfig+0x9a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc8:	d01b      	beq.n	8004002 <TIM_Base_SetConfig+0x9a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a2c      	ldr	r2, [pc, #176]	; (8004080 <TIM_Base_SetConfig+0x118>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d017      	beq.n	8004002 <TIM_Base_SetConfig+0x9a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a2b      	ldr	r2, [pc, #172]	; (8004084 <TIM_Base_SetConfig+0x11c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d013      	beq.n	8004002 <TIM_Base_SetConfig+0x9a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a2a      	ldr	r2, [pc, #168]	; (8004088 <TIM_Base_SetConfig+0x120>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00f      	beq.n	8004002 <TIM_Base_SetConfig+0x9a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a29      	ldr	r2, [pc, #164]	; (800408c <TIM_Base_SetConfig+0x124>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d00b      	beq.n	8004002 <TIM_Base_SetConfig+0x9a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a28      	ldr	r2, [pc, #160]	; (8004090 <TIM_Base_SetConfig+0x128>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d007      	beq.n	8004002 <TIM_Base_SetConfig+0x9a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a27      	ldr	r2, [pc, #156]	; (8004094 <TIM_Base_SetConfig+0x12c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d003      	beq.n	8004002 <TIM_Base_SetConfig+0x9a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a26      	ldr	r2, [pc, #152]	; (8004098 <TIM_Base_SetConfig+0x130>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d108      	bne.n	8004014 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	4313      	orrs	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a10      	ldr	r2, [pc, #64]	; (800407c <TIM_Base_SetConfig+0x114>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00f      	beq.n	8004060 <TIM_Base_SetConfig+0xf8>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a12      	ldr	r2, [pc, #72]	; (800408c <TIM_Base_SetConfig+0x124>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00b      	beq.n	8004060 <TIM_Base_SetConfig+0xf8>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a11      	ldr	r2, [pc, #68]	; (8004090 <TIM_Base_SetConfig+0x128>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d007      	beq.n	8004060 <TIM_Base_SetConfig+0xf8>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a10      	ldr	r2, [pc, #64]	; (8004094 <TIM_Base_SetConfig+0x12c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d003      	beq.n	8004060 <TIM_Base_SetConfig+0xf8>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a0f      	ldr	r2, [pc, #60]	; (8004098 <TIM_Base_SetConfig+0x130>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d103      	bne.n	8004068 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	615a      	str	r2, [r3, #20]
}
 800406e:	bf00      	nop
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	40012c00 	.word	0x40012c00
 8004080:	40000400 	.word	0x40000400
 8004084:	40000800 	.word	0x40000800
 8004088:	40000c00 	.word	0x40000c00
 800408c:	40013400 	.word	0x40013400
 8004090:	40014000 	.word	0x40014000
 8004094:	40014400 	.word	0x40014400
 8004098:	40014800 	.word	0x40014800

0800409c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	f023 0201 	bic.w	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 0303 	bic.w	r3, r3, #3
 80040d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	4313      	orrs	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f023 0302 	bic.w	r3, r3, #2
 80040e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a2c      	ldr	r2, [pc, #176]	; (80041a8 <TIM_OC1_SetConfig+0x10c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d00f      	beq.n	800411c <TIM_OC1_SetConfig+0x80>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a2b      	ldr	r2, [pc, #172]	; (80041ac <TIM_OC1_SetConfig+0x110>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d00b      	beq.n	800411c <TIM_OC1_SetConfig+0x80>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a2a      	ldr	r2, [pc, #168]	; (80041b0 <TIM_OC1_SetConfig+0x114>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d007      	beq.n	800411c <TIM_OC1_SetConfig+0x80>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a29      	ldr	r2, [pc, #164]	; (80041b4 <TIM_OC1_SetConfig+0x118>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d003      	beq.n	800411c <TIM_OC1_SetConfig+0x80>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a28      	ldr	r2, [pc, #160]	; (80041b8 <TIM_OC1_SetConfig+0x11c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d10c      	bne.n	8004136 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f023 0308 	bic.w	r3, r3, #8
 8004122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	4313      	orrs	r3, r2
 800412c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f023 0304 	bic.w	r3, r3, #4
 8004134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a1b      	ldr	r2, [pc, #108]	; (80041a8 <TIM_OC1_SetConfig+0x10c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00f      	beq.n	800415e <TIM_OC1_SetConfig+0xc2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a1a      	ldr	r2, [pc, #104]	; (80041ac <TIM_OC1_SetConfig+0x110>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00b      	beq.n	800415e <TIM_OC1_SetConfig+0xc2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a19      	ldr	r2, [pc, #100]	; (80041b0 <TIM_OC1_SetConfig+0x114>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d007      	beq.n	800415e <TIM_OC1_SetConfig+0xc2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a18      	ldr	r2, [pc, #96]	; (80041b4 <TIM_OC1_SetConfig+0x118>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d003      	beq.n	800415e <TIM_OC1_SetConfig+0xc2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a17      	ldr	r2, [pc, #92]	; (80041b8 <TIM_OC1_SetConfig+0x11c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d111      	bne.n	8004182 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004164:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800416c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4313      	orrs	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	621a      	str	r2, [r3, #32]
}
 800419c:	bf00      	nop
 800419e:	371c      	adds	r7, #28
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	40012c00 	.word	0x40012c00
 80041ac:	40013400 	.word	0x40013400
 80041b0:	40014000 	.word	0x40014000
 80041b4:	40014400 	.word	0x40014400
 80041b8:	40014800 	.word	0x40014800

080041bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	f023 0210 	bic.w	r2, r3, #16
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	021b      	lsls	r3, r3, #8
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4313      	orrs	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f023 0320 	bic.w	r3, r3, #32
 800420a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	011b      	lsls	r3, r3, #4
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	4313      	orrs	r3, r2
 8004216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a28      	ldr	r2, [pc, #160]	; (80042bc <TIM_OC2_SetConfig+0x100>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d003      	beq.n	8004228 <TIM_OC2_SetConfig+0x6c>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a27      	ldr	r2, [pc, #156]	; (80042c0 <TIM_OC2_SetConfig+0x104>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d10d      	bne.n	8004244 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800422e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	4313      	orrs	r3, r2
 800423a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004242:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a1d      	ldr	r2, [pc, #116]	; (80042bc <TIM_OC2_SetConfig+0x100>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d00f      	beq.n	800426c <TIM_OC2_SetConfig+0xb0>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a1c      	ldr	r2, [pc, #112]	; (80042c0 <TIM_OC2_SetConfig+0x104>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d00b      	beq.n	800426c <TIM_OC2_SetConfig+0xb0>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a1b      	ldr	r2, [pc, #108]	; (80042c4 <TIM_OC2_SetConfig+0x108>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d007      	beq.n	800426c <TIM_OC2_SetConfig+0xb0>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a1a      	ldr	r2, [pc, #104]	; (80042c8 <TIM_OC2_SetConfig+0x10c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d003      	beq.n	800426c <TIM_OC2_SetConfig+0xb0>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a19      	ldr	r2, [pc, #100]	; (80042cc <TIM_OC2_SetConfig+0x110>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d113      	bne.n	8004294 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004272:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800427a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	621a      	str	r2, [r3, #32]
}
 80042ae:	bf00      	nop
 80042b0:	371c      	adds	r7, #28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40012c00 	.word	0x40012c00
 80042c0:	40013400 	.word	0x40013400
 80042c4:	40014000 	.word	0x40014000
 80042c8:	40014400 	.word	0x40014400
 80042cc:	40014800 	.word	0x40014800

080042d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b087      	sub	sp, #28
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 0303 	bic.w	r3, r3, #3
 800430a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800431c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	4313      	orrs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a27      	ldr	r2, [pc, #156]	; (80043cc <TIM_OC3_SetConfig+0xfc>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d003      	beq.n	800433a <TIM_OC3_SetConfig+0x6a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a26      	ldr	r2, [pc, #152]	; (80043d0 <TIM_OC3_SetConfig+0x100>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d10d      	bne.n	8004356 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004340:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	021b      	lsls	r3, r3, #8
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	4313      	orrs	r3, r2
 800434c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004354:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a1c      	ldr	r2, [pc, #112]	; (80043cc <TIM_OC3_SetConfig+0xfc>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00f      	beq.n	800437e <TIM_OC3_SetConfig+0xae>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a1b      	ldr	r2, [pc, #108]	; (80043d0 <TIM_OC3_SetConfig+0x100>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d00b      	beq.n	800437e <TIM_OC3_SetConfig+0xae>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a1a      	ldr	r2, [pc, #104]	; (80043d4 <TIM_OC3_SetConfig+0x104>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d007      	beq.n	800437e <TIM_OC3_SetConfig+0xae>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a19      	ldr	r2, [pc, #100]	; (80043d8 <TIM_OC3_SetConfig+0x108>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d003      	beq.n	800437e <TIM_OC3_SetConfig+0xae>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a18      	ldr	r2, [pc, #96]	; (80043dc <TIM_OC3_SetConfig+0x10c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d113      	bne.n	80043a6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800438c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	4313      	orrs	r3, r2
 8004398:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	621a      	str	r2, [r3, #32]
}
 80043c0:	bf00      	nop
 80043c2:	371c      	adds	r7, #28
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	40012c00 	.word	0x40012c00
 80043d0:	40013400 	.word	0x40013400
 80043d4:	40014000 	.word	0x40014000
 80043d8:	40014400 	.word	0x40014400
 80043dc:	40014800 	.word	0x40014800

080043e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800440e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800441a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	021b      	lsls	r3, r3, #8
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800442e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	031b      	lsls	r3, r3, #12
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	4313      	orrs	r3, r2
 800443a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a18      	ldr	r2, [pc, #96]	; (80044a0 <TIM_OC4_SetConfig+0xc0>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d00f      	beq.n	8004464 <TIM_OC4_SetConfig+0x84>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a17      	ldr	r2, [pc, #92]	; (80044a4 <TIM_OC4_SetConfig+0xc4>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d00b      	beq.n	8004464 <TIM_OC4_SetConfig+0x84>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a16      	ldr	r2, [pc, #88]	; (80044a8 <TIM_OC4_SetConfig+0xc8>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d007      	beq.n	8004464 <TIM_OC4_SetConfig+0x84>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a15      	ldr	r2, [pc, #84]	; (80044ac <TIM_OC4_SetConfig+0xcc>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d003      	beq.n	8004464 <TIM_OC4_SetConfig+0x84>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a14      	ldr	r2, [pc, #80]	; (80044b0 <TIM_OC4_SetConfig+0xd0>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d109      	bne.n	8004478 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800446a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	019b      	lsls	r3, r3, #6
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	4313      	orrs	r3, r2
 8004476:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	621a      	str	r2, [r3, #32]
}
 8004492:	bf00      	nop
 8004494:	371c      	adds	r7, #28
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40012c00 	.word	0x40012c00
 80044a4:	40013400 	.word	0x40013400
 80044a8:	40014000 	.word	0x40014000
 80044ac:	40014400 	.word	0x40014400
 80044b0:	40014800 	.word	0x40014800

080044b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80044f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	041b      	lsls	r3, r3, #16
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4313      	orrs	r3, r2
 8004504:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a17      	ldr	r2, [pc, #92]	; (8004568 <TIM_OC5_SetConfig+0xb4>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d00f      	beq.n	800452e <TIM_OC5_SetConfig+0x7a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a16      	ldr	r2, [pc, #88]	; (800456c <TIM_OC5_SetConfig+0xb8>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d00b      	beq.n	800452e <TIM_OC5_SetConfig+0x7a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a15      	ldr	r2, [pc, #84]	; (8004570 <TIM_OC5_SetConfig+0xbc>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d007      	beq.n	800452e <TIM_OC5_SetConfig+0x7a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a14      	ldr	r2, [pc, #80]	; (8004574 <TIM_OC5_SetConfig+0xc0>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d003      	beq.n	800452e <TIM_OC5_SetConfig+0x7a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a13      	ldr	r2, [pc, #76]	; (8004578 <TIM_OC5_SetConfig+0xc4>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d109      	bne.n	8004542 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004534:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	021b      	lsls	r3, r3, #8
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	4313      	orrs	r3, r2
 8004540:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	621a      	str	r2, [r3, #32]
}
 800455c:	bf00      	nop
 800455e:	371c      	adds	r7, #28
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	40012c00 	.word	0x40012c00
 800456c:	40013400 	.word	0x40013400
 8004570:	40014000 	.word	0x40014000
 8004574:	40014400 	.word	0x40014400
 8004578:	40014800 	.word	0x40014800

0800457c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800457c:	b480      	push	{r7}
 800457e:	b087      	sub	sp, #28
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	021b      	lsls	r3, r3, #8
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	051b      	lsls	r3, r3, #20
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a18      	ldr	r2, [pc, #96]	; (8004634 <TIM_OC6_SetConfig+0xb8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d00f      	beq.n	80045f8 <TIM_OC6_SetConfig+0x7c>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a17      	ldr	r2, [pc, #92]	; (8004638 <TIM_OC6_SetConfig+0xbc>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d00b      	beq.n	80045f8 <TIM_OC6_SetConfig+0x7c>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a16      	ldr	r2, [pc, #88]	; (800463c <TIM_OC6_SetConfig+0xc0>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d007      	beq.n	80045f8 <TIM_OC6_SetConfig+0x7c>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a15      	ldr	r2, [pc, #84]	; (8004640 <TIM_OC6_SetConfig+0xc4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d003      	beq.n	80045f8 <TIM_OC6_SetConfig+0x7c>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a14      	ldr	r2, [pc, #80]	; (8004644 <TIM_OC6_SetConfig+0xc8>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d109      	bne.n	800460c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	029b      	lsls	r3, r3, #10
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	4313      	orrs	r3, r2
 800460a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	621a      	str	r2, [r3, #32]
}
 8004626:	bf00      	nop
 8004628:	371c      	adds	r7, #28
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	40012c00 	.word	0x40012c00
 8004638:	40013400 	.word	0x40013400
 800463c:	40014000 	.word	0x40014000
 8004640:	40014400 	.word	0x40014400
 8004644:	40014800 	.word	0x40014800

08004648 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f003 031f 	and.w	r3, r3, #31
 800465a:	2201      	movs	r2, #1
 800465c:	fa02 f303 	lsl.w	r3, r2, r3
 8004660:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6a1a      	ldr	r2, [r3, #32]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	43db      	mvns	r3, r3
 800466a:	401a      	ands	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a1a      	ldr	r2, [r3, #32]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f003 031f 	and.w	r3, r3, #31
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	fa01 f303 	lsl.w	r3, r1, r3
 8004680:	431a      	orrs	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	621a      	str	r2, [r3, #32]
}
 8004686:	bf00      	nop
 8004688:	371c      	adds	r7, #28
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
	...

08004694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d101      	bne.n	80046ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046a8:	2302      	movs	r3, #2
 80046aa:	e068      	b.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a2e      	ldr	r2, [pc, #184]	; (800478c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d004      	beq.n	80046e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a2d      	ldr	r2, [pc, #180]	; (8004790 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d108      	bne.n	80046f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80046e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a1e      	ldr	r2, [pc, #120]	; (800478c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d01d      	beq.n	8004752 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800471e:	d018      	beq.n	8004752 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a1b      	ldr	r2, [pc, #108]	; (8004794 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d013      	beq.n	8004752 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a1a      	ldr	r2, [pc, #104]	; (8004798 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d00e      	beq.n	8004752 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a18      	ldr	r2, [pc, #96]	; (800479c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d009      	beq.n	8004752 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a13      	ldr	r2, [pc, #76]	; (8004790 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d004      	beq.n	8004752 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a14      	ldr	r2, [pc, #80]	; (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d10c      	bne.n	800476c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004758:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	4313      	orrs	r3, r2
 8004762:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3714      	adds	r7, #20
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	40012c00 	.word	0x40012c00
 8004790:	40013400 	.word	0x40013400
 8004794:	40000400 	.word	0x40000400
 8004798:	40000800 	.word	0x40000800
 800479c:	40000c00 	.word	0x40000c00
 80047a0:	40014000 	.word	0x40014000

080047a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047bc:	2302      	movs	r3, #2
 80047be:	e065      	b.n	800488c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	4313      	orrs	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	041b      	lsls	r3, r3, #16
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a16      	ldr	r2, [pc, #88]	; (8004898 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d004      	beq.n	800484e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a14      	ldr	r2, [pc, #80]	; (800489c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d115      	bne.n	800487a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	051b      	lsls	r3, r3, #20
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	4313      	orrs	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	40012c00 	.word	0x40012c00
 800489c:	40013400 	.word	0x40013400

080048a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e040      	b.n	8004934 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7fc ffee 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2224      	movs	r2, #36	; 0x24
 80048cc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0201 	bic.w	r2, r2, #1
 80048dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f992 	bl	8004c08 <UART_SetConfig>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d101      	bne.n	80048ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e022      	b.n	8004934 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 fc10 	bl	800511c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800490a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800491a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 fc97 	bl	8005260 <UART_CheckIdleState>
 8004932:	4603      	mov	r3, r0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08a      	sub	sp, #40	; 0x28
 8004940:	af02      	add	r7, sp, #8
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	603b      	str	r3, [r7, #0]
 8004948:	4613      	mov	r3, r2
 800494a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004950:	2b20      	cmp	r3, #32
 8004952:	f040 8082 	bne.w	8004a5a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <HAL_UART_Transmit+0x26>
 800495c:	88fb      	ldrh	r3, [r7, #6]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e07a      	b.n	8004a5c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800496c:	2b01      	cmp	r3, #1
 800496e:	d101      	bne.n	8004974 <HAL_UART_Transmit+0x38>
 8004970:	2302      	movs	r3, #2
 8004972:	e073      	b.n	8004a5c <HAL_UART_Transmit+0x120>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2221      	movs	r2, #33	; 0x21
 8004988:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800498a:	f7fd f8e9 	bl	8001b60 <HAL_GetTick>
 800498e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	88fa      	ldrh	r2, [r7, #6]
 8004994:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	88fa      	ldrh	r2, [r7, #6]
 800499c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a8:	d108      	bne.n	80049bc <HAL_UART_Transmit+0x80>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d104      	bne.n	80049bc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80049b2:	2300      	movs	r3, #0
 80049b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	61bb      	str	r3, [r7, #24]
 80049ba:	e003      	b.n	80049c4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049c0:	2300      	movs	r3, #0
 80049c2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80049cc:	e02d      	b.n	8004a2a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2200      	movs	r2, #0
 80049d6:	2180      	movs	r1, #128	; 0x80
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 fc8a 	bl	80052f2 <UART_WaitOnFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e039      	b.n	8004a5c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10b      	bne.n	8004a06 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	881a      	ldrh	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049fa:	b292      	uxth	r2, r2
 80049fc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	3302      	adds	r3, #2
 8004a02:	61bb      	str	r3, [r7, #24]
 8004a04:	e008      	b.n	8004a18 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	781a      	ldrb	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	b292      	uxth	r2, r2
 8004a10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	3301      	adds	r3, #1
 8004a16:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1cb      	bne.n	80049ce <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	2140      	movs	r1, #64	; 0x40
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 fc56 	bl	80052f2 <UART_WaitOnFlagUntilTimeout>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e005      	b.n	8004a5c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2220      	movs	r2, #32
 8004a54:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004a56:	2300      	movs	r3, #0
 8004a58:	e000      	b.n	8004a5c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004a5a:	2302      	movs	r3, #2
  }
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3720      	adds	r7, #32
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b08a      	sub	sp, #40	; 0x28
 8004a68:	af02      	add	r7, sp, #8
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	603b      	str	r3, [r7, #0]
 8004a70:	4613      	mov	r3, r2
 8004a72:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a78:	2b20      	cmp	r3, #32
 8004a7a:	f040 80bf 	bne.w	8004bfc <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <HAL_UART_Receive+0x26>
 8004a84:	88fb      	ldrh	r3, [r7, #6]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e0b7      	b.n	8004bfe <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d101      	bne.n	8004a9c <HAL_UART_Receive+0x38>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e0b0      	b.n	8004bfe <HAL_UART_Receive+0x19a>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2222      	movs	r2, #34	; 0x22
 8004ab0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ab8:	f7fd f852 	bl	8001b60 <HAL_GetTick>
 8004abc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	88fa      	ldrh	r2, [r7, #6]
 8004ac2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	88fa      	ldrh	r2, [r7, #6]
 8004aca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ad6:	d10e      	bne.n	8004af6 <HAL_UART_Receive+0x92>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d105      	bne.n	8004aec <HAL_UART_Receive+0x88>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004ae6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004aea:	e02d      	b.n	8004b48 <HAL_UART_Receive+0xe4>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	22ff      	movs	r2, #255	; 0xff
 8004af0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004af4:	e028      	b.n	8004b48 <HAL_UART_Receive+0xe4>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10d      	bne.n	8004b1a <HAL_UART_Receive+0xb6>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d104      	bne.n	8004b10 <HAL_UART_Receive+0xac>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	22ff      	movs	r2, #255	; 0xff
 8004b0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b0e:	e01b      	b.n	8004b48 <HAL_UART_Receive+0xe4>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	227f      	movs	r2, #127	; 0x7f
 8004b14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b18:	e016      	b.n	8004b48 <HAL_UART_Receive+0xe4>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b22:	d10d      	bne.n	8004b40 <HAL_UART_Receive+0xdc>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d104      	bne.n	8004b36 <HAL_UART_Receive+0xd2>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	227f      	movs	r2, #127	; 0x7f
 8004b30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b34:	e008      	b.n	8004b48 <HAL_UART_Receive+0xe4>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	223f      	movs	r2, #63	; 0x3f
 8004b3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b3e:	e003      	b.n	8004b48 <HAL_UART_Receive+0xe4>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b4e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b58:	d108      	bne.n	8004b6c <HAL_UART_Receive+0x108>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d104      	bne.n	8004b6c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	61bb      	str	r3, [r7, #24]
 8004b6a:	e003      	b.n	8004b74 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b70:	2300      	movs	r3, #0
 8004b72:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004b7c:	e033      	b.n	8004be6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2200      	movs	r2, #0
 8004b86:	2120      	movs	r1, #32
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f000 fbb2 	bl	80052f2 <UART_WaitOnFlagUntilTimeout>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e032      	b.n	8004bfe <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10c      	bne.n	8004bb8 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	8a7b      	ldrh	r3, [r7, #18]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	3302      	adds	r3, #2
 8004bb4:	61bb      	str	r3, [r7, #24]
 8004bb6:	e00d      	b.n	8004bd4 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	8a7b      	ldrh	r3, [r7, #18]
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1c5      	bne.n	8004b7e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	e000      	b.n	8004bfe <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004bfc:	2302      	movs	r3, #2
  }
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3720      	adds	r7, #32
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c08:	b5b0      	push	{r4, r5, r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c10:	2300      	movs	r3, #0
 8004c12:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	4bad      	ldr	r3, [pc, #692]	; (8004ee8 <UART_SetConfig+0x2e0>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6812      	ldr	r2, [r2, #0]
 8004c3a:	69f9      	ldr	r1, [r7, #28]
 8004c3c:	430b      	orrs	r3, r1
 8004c3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4aa2      	ldr	r2, [pc, #648]	; (8004eec <UART_SetConfig+0x2e4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d004      	beq.n	8004c70 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	69fa      	ldr	r2, [r7, #28]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69fa      	ldr	r2, [r7, #28]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a99      	ldr	r2, [pc, #612]	; (8004ef0 <UART_SetConfig+0x2e8>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d121      	bne.n	8004cd2 <UART_SetConfig+0xca>
 8004c8e:	4b99      	ldr	r3, [pc, #612]	; (8004ef4 <UART_SetConfig+0x2ec>)
 8004c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c94:	f003 0303 	and.w	r3, r3, #3
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d817      	bhi.n	8004ccc <UART_SetConfig+0xc4>
 8004c9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ca4 <UART_SetConfig+0x9c>)
 8004c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca2:	bf00      	nop
 8004ca4:	08004cb5 	.word	0x08004cb5
 8004ca8:	08004cc1 	.word	0x08004cc1
 8004cac:	08004cbb 	.word	0x08004cbb
 8004cb0:	08004cc7 	.word	0x08004cc7
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	76fb      	strb	r3, [r7, #27]
 8004cb8:	e0e7      	b.n	8004e8a <UART_SetConfig+0x282>
 8004cba:	2302      	movs	r3, #2
 8004cbc:	76fb      	strb	r3, [r7, #27]
 8004cbe:	e0e4      	b.n	8004e8a <UART_SetConfig+0x282>
 8004cc0:	2304      	movs	r3, #4
 8004cc2:	76fb      	strb	r3, [r7, #27]
 8004cc4:	e0e1      	b.n	8004e8a <UART_SetConfig+0x282>
 8004cc6:	2308      	movs	r3, #8
 8004cc8:	76fb      	strb	r3, [r7, #27]
 8004cca:	e0de      	b.n	8004e8a <UART_SetConfig+0x282>
 8004ccc:	2310      	movs	r3, #16
 8004cce:	76fb      	strb	r3, [r7, #27]
 8004cd0:	e0db      	b.n	8004e8a <UART_SetConfig+0x282>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a88      	ldr	r2, [pc, #544]	; (8004ef8 <UART_SetConfig+0x2f0>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d132      	bne.n	8004d42 <UART_SetConfig+0x13a>
 8004cdc:	4b85      	ldr	r3, [pc, #532]	; (8004ef4 <UART_SetConfig+0x2ec>)
 8004cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce2:	f003 030c 	and.w	r3, r3, #12
 8004ce6:	2b0c      	cmp	r3, #12
 8004ce8:	d828      	bhi.n	8004d3c <UART_SetConfig+0x134>
 8004cea:	a201      	add	r2, pc, #4	; (adr r2, 8004cf0 <UART_SetConfig+0xe8>)
 8004cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf0:	08004d25 	.word	0x08004d25
 8004cf4:	08004d3d 	.word	0x08004d3d
 8004cf8:	08004d3d 	.word	0x08004d3d
 8004cfc:	08004d3d 	.word	0x08004d3d
 8004d00:	08004d31 	.word	0x08004d31
 8004d04:	08004d3d 	.word	0x08004d3d
 8004d08:	08004d3d 	.word	0x08004d3d
 8004d0c:	08004d3d 	.word	0x08004d3d
 8004d10:	08004d2b 	.word	0x08004d2b
 8004d14:	08004d3d 	.word	0x08004d3d
 8004d18:	08004d3d 	.word	0x08004d3d
 8004d1c:	08004d3d 	.word	0x08004d3d
 8004d20:	08004d37 	.word	0x08004d37
 8004d24:	2300      	movs	r3, #0
 8004d26:	76fb      	strb	r3, [r7, #27]
 8004d28:	e0af      	b.n	8004e8a <UART_SetConfig+0x282>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	76fb      	strb	r3, [r7, #27]
 8004d2e:	e0ac      	b.n	8004e8a <UART_SetConfig+0x282>
 8004d30:	2304      	movs	r3, #4
 8004d32:	76fb      	strb	r3, [r7, #27]
 8004d34:	e0a9      	b.n	8004e8a <UART_SetConfig+0x282>
 8004d36:	2308      	movs	r3, #8
 8004d38:	76fb      	strb	r3, [r7, #27]
 8004d3a:	e0a6      	b.n	8004e8a <UART_SetConfig+0x282>
 8004d3c:	2310      	movs	r3, #16
 8004d3e:	76fb      	strb	r3, [r7, #27]
 8004d40:	e0a3      	b.n	8004e8a <UART_SetConfig+0x282>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a6d      	ldr	r2, [pc, #436]	; (8004efc <UART_SetConfig+0x2f4>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d120      	bne.n	8004d8e <UART_SetConfig+0x186>
 8004d4c:	4b69      	ldr	r3, [pc, #420]	; (8004ef4 <UART_SetConfig+0x2ec>)
 8004d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d52:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d56:	2b30      	cmp	r3, #48	; 0x30
 8004d58:	d013      	beq.n	8004d82 <UART_SetConfig+0x17a>
 8004d5a:	2b30      	cmp	r3, #48	; 0x30
 8004d5c:	d814      	bhi.n	8004d88 <UART_SetConfig+0x180>
 8004d5e:	2b20      	cmp	r3, #32
 8004d60:	d009      	beq.n	8004d76 <UART_SetConfig+0x16e>
 8004d62:	2b20      	cmp	r3, #32
 8004d64:	d810      	bhi.n	8004d88 <UART_SetConfig+0x180>
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d002      	beq.n	8004d70 <UART_SetConfig+0x168>
 8004d6a:	2b10      	cmp	r3, #16
 8004d6c:	d006      	beq.n	8004d7c <UART_SetConfig+0x174>
 8004d6e:	e00b      	b.n	8004d88 <UART_SetConfig+0x180>
 8004d70:	2300      	movs	r3, #0
 8004d72:	76fb      	strb	r3, [r7, #27]
 8004d74:	e089      	b.n	8004e8a <UART_SetConfig+0x282>
 8004d76:	2302      	movs	r3, #2
 8004d78:	76fb      	strb	r3, [r7, #27]
 8004d7a:	e086      	b.n	8004e8a <UART_SetConfig+0x282>
 8004d7c:	2304      	movs	r3, #4
 8004d7e:	76fb      	strb	r3, [r7, #27]
 8004d80:	e083      	b.n	8004e8a <UART_SetConfig+0x282>
 8004d82:	2308      	movs	r3, #8
 8004d84:	76fb      	strb	r3, [r7, #27]
 8004d86:	e080      	b.n	8004e8a <UART_SetConfig+0x282>
 8004d88:	2310      	movs	r3, #16
 8004d8a:	76fb      	strb	r3, [r7, #27]
 8004d8c:	e07d      	b.n	8004e8a <UART_SetConfig+0x282>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a5b      	ldr	r2, [pc, #364]	; (8004f00 <UART_SetConfig+0x2f8>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d120      	bne.n	8004dda <UART_SetConfig+0x1d2>
 8004d98:	4b56      	ldr	r3, [pc, #344]	; (8004ef4 <UART_SetConfig+0x2ec>)
 8004d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004da2:	2bc0      	cmp	r3, #192	; 0xc0
 8004da4:	d013      	beq.n	8004dce <UART_SetConfig+0x1c6>
 8004da6:	2bc0      	cmp	r3, #192	; 0xc0
 8004da8:	d814      	bhi.n	8004dd4 <UART_SetConfig+0x1cc>
 8004daa:	2b80      	cmp	r3, #128	; 0x80
 8004dac:	d009      	beq.n	8004dc2 <UART_SetConfig+0x1ba>
 8004dae:	2b80      	cmp	r3, #128	; 0x80
 8004db0:	d810      	bhi.n	8004dd4 <UART_SetConfig+0x1cc>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <UART_SetConfig+0x1b4>
 8004db6:	2b40      	cmp	r3, #64	; 0x40
 8004db8:	d006      	beq.n	8004dc8 <UART_SetConfig+0x1c0>
 8004dba:	e00b      	b.n	8004dd4 <UART_SetConfig+0x1cc>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	76fb      	strb	r3, [r7, #27]
 8004dc0:	e063      	b.n	8004e8a <UART_SetConfig+0x282>
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	76fb      	strb	r3, [r7, #27]
 8004dc6:	e060      	b.n	8004e8a <UART_SetConfig+0x282>
 8004dc8:	2304      	movs	r3, #4
 8004dca:	76fb      	strb	r3, [r7, #27]
 8004dcc:	e05d      	b.n	8004e8a <UART_SetConfig+0x282>
 8004dce:	2308      	movs	r3, #8
 8004dd0:	76fb      	strb	r3, [r7, #27]
 8004dd2:	e05a      	b.n	8004e8a <UART_SetConfig+0x282>
 8004dd4:	2310      	movs	r3, #16
 8004dd6:	76fb      	strb	r3, [r7, #27]
 8004dd8:	e057      	b.n	8004e8a <UART_SetConfig+0x282>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a49      	ldr	r2, [pc, #292]	; (8004f04 <UART_SetConfig+0x2fc>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d125      	bne.n	8004e30 <UART_SetConfig+0x228>
 8004de4:	4b43      	ldr	r3, [pc, #268]	; (8004ef4 <UART_SetConfig+0x2ec>)
 8004de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004df2:	d017      	beq.n	8004e24 <UART_SetConfig+0x21c>
 8004df4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004df8:	d817      	bhi.n	8004e2a <UART_SetConfig+0x222>
 8004dfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dfe:	d00b      	beq.n	8004e18 <UART_SetConfig+0x210>
 8004e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e04:	d811      	bhi.n	8004e2a <UART_SetConfig+0x222>
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <UART_SetConfig+0x20a>
 8004e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e0e:	d006      	beq.n	8004e1e <UART_SetConfig+0x216>
 8004e10:	e00b      	b.n	8004e2a <UART_SetConfig+0x222>
 8004e12:	2300      	movs	r3, #0
 8004e14:	76fb      	strb	r3, [r7, #27]
 8004e16:	e038      	b.n	8004e8a <UART_SetConfig+0x282>
 8004e18:	2302      	movs	r3, #2
 8004e1a:	76fb      	strb	r3, [r7, #27]
 8004e1c:	e035      	b.n	8004e8a <UART_SetConfig+0x282>
 8004e1e:	2304      	movs	r3, #4
 8004e20:	76fb      	strb	r3, [r7, #27]
 8004e22:	e032      	b.n	8004e8a <UART_SetConfig+0x282>
 8004e24:	2308      	movs	r3, #8
 8004e26:	76fb      	strb	r3, [r7, #27]
 8004e28:	e02f      	b.n	8004e8a <UART_SetConfig+0x282>
 8004e2a:	2310      	movs	r3, #16
 8004e2c:	76fb      	strb	r3, [r7, #27]
 8004e2e:	e02c      	b.n	8004e8a <UART_SetConfig+0x282>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a2d      	ldr	r2, [pc, #180]	; (8004eec <UART_SetConfig+0x2e4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d125      	bne.n	8004e86 <UART_SetConfig+0x27e>
 8004e3a:	4b2e      	ldr	r3, [pc, #184]	; (8004ef4 <UART_SetConfig+0x2ec>)
 8004e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e48:	d017      	beq.n	8004e7a <UART_SetConfig+0x272>
 8004e4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e4e:	d817      	bhi.n	8004e80 <UART_SetConfig+0x278>
 8004e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e54:	d00b      	beq.n	8004e6e <UART_SetConfig+0x266>
 8004e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e5a:	d811      	bhi.n	8004e80 <UART_SetConfig+0x278>
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <UART_SetConfig+0x260>
 8004e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e64:	d006      	beq.n	8004e74 <UART_SetConfig+0x26c>
 8004e66:	e00b      	b.n	8004e80 <UART_SetConfig+0x278>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	76fb      	strb	r3, [r7, #27]
 8004e6c:	e00d      	b.n	8004e8a <UART_SetConfig+0x282>
 8004e6e:	2302      	movs	r3, #2
 8004e70:	76fb      	strb	r3, [r7, #27]
 8004e72:	e00a      	b.n	8004e8a <UART_SetConfig+0x282>
 8004e74:	2304      	movs	r3, #4
 8004e76:	76fb      	strb	r3, [r7, #27]
 8004e78:	e007      	b.n	8004e8a <UART_SetConfig+0x282>
 8004e7a:	2308      	movs	r3, #8
 8004e7c:	76fb      	strb	r3, [r7, #27]
 8004e7e:	e004      	b.n	8004e8a <UART_SetConfig+0x282>
 8004e80:	2310      	movs	r3, #16
 8004e82:	76fb      	strb	r3, [r7, #27]
 8004e84:	e001      	b.n	8004e8a <UART_SetConfig+0x282>
 8004e86:	2310      	movs	r3, #16
 8004e88:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a17      	ldr	r2, [pc, #92]	; (8004eec <UART_SetConfig+0x2e4>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	f040 8087 	bne.w	8004fa4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e96:	7efb      	ldrb	r3, [r7, #27]
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d837      	bhi.n	8004f0c <UART_SetConfig+0x304>
 8004e9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ea4 <UART_SetConfig+0x29c>)
 8004e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea2:	bf00      	nop
 8004ea4:	08004ec9 	.word	0x08004ec9
 8004ea8:	08004f0d 	.word	0x08004f0d
 8004eac:	08004ed1 	.word	0x08004ed1
 8004eb0:	08004f0d 	.word	0x08004f0d
 8004eb4:	08004ed7 	.word	0x08004ed7
 8004eb8:	08004f0d 	.word	0x08004f0d
 8004ebc:	08004f0d 	.word	0x08004f0d
 8004ec0:	08004f0d 	.word	0x08004f0d
 8004ec4:	08004edf 	.word	0x08004edf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ec8:	f7fd ff42 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 8004ecc:	6178      	str	r0, [r7, #20]
        break;
 8004ece:	e022      	b.n	8004f16 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ed0:	4b0d      	ldr	r3, [pc, #52]	; (8004f08 <UART_SetConfig+0x300>)
 8004ed2:	617b      	str	r3, [r7, #20]
        break;
 8004ed4:	e01f      	b.n	8004f16 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ed6:	f7fd fea3 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8004eda:	6178      	str	r0, [r7, #20]
        break;
 8004edc:	e01b      	b.n	8004f16 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ee2:	617b      	str	r3, [r7, #20]
        break;
 8004ee4:	e017      	b.n	8004f16 <UART_SetConfig+0x30e>
 8004ee6:	bf00      	nop
 8004ee8:	efff69f3 	.word	0xefff69f3
 8004eec:	40008000 	.word	0x40008000
 8004ef0:	40013800 	.word	0x40013800
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	40004400 	.word	0x40004400
 8004efc:	40004800 	.word	0x40004800
 8004f00:	40004c00 	.word	0x40004c00
 8004f04:	40005000 	.word	0x40005000
 8004f08:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	76bb      	strb	r3, [r7, #26]
        break;
 8004f14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 80f1 	beq.w	8005100 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	4413      	add	r3, r2
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d305      	bcc.n	8004f3a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d902      	bls.n	8004f40 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	76bb      	strb	r3, [r7, #26]
 8004f3e:	e0df      	b.n	8005100 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f04f 0100 	mov.w	r1, #0
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	f04f 0300 	mov.w	r3, #0
 8004f50:	020b      	lsls	r3, r1, #8
 8004f52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f56:	0202      	lsls	r2, r0, #8
 8004f58:	6879      	ldr	r1, [r7, #4]
 8004f5a:	6849      	ldr	r1, [r1, #4]
 8004f5c:	0849      	lsrs	r1, r1, #1
 8004f5e:	4608      	mov	r0, r1
 8004f60:	f04f 0100 	mov.w	r1, #0
 8004f64:	1814      	adds	r4, r2, r0
 8004f66:	eb43 0501 	adc.w	r5, r3, r1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	f04f 0300 	mov.w	r3, #0
 8004f74:	4620      	mov	r0, r4
 8004f76:	4629      	mov	r1, r5
 8004f78:	f7fb fc2c 	bl	80007d4 <__aeabi_uldivmod>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4613      	mov	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f8a:	d308      	bcc.n	8004f9e <UART_SetConfig+0x396>
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f92:	d204      	bcs.n	8004f9e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	60da      	str	r2, [r3, #12]
 8004f9c:	e0b0      	b.n	8005100 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	76bb      	strb	r3, [r7, #26]
 8004fa2:	e0ad      	b.n	8005100 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fac:	d15c      	bne.n	8005068 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004fae:	7efb      	ldrb	r3, [r7, #27]
 8004fb0:	2b08      	cmp	r3, #8
 8004fb2:	d828      	bhi.n	8005006 <UART_SetConfig+0x3fe>
 8004fb4:	a201      	add	r2, pc, #4	; (adr r2, 8004fbc <UART_SetConfig+0x3b4>)
 8004fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fba:	bf00      	nop
 8004fbc:	08004fe1 	.word	0x08004fe1
 8004fc0:	08004fe9 	.word	0x08004fe9
 8004fc4:	08004ff1 	.word	0x08004ff1
 8004fc8:	08005007 	.word	0x08005007
 8004fcc:	08004ff7 	.word	0x08004ff7
 8004fd0:	08005007 	.word	0x08005007
 8004fd4:	08005007 	.word	0x08005007
 8004fd8:	08005007 	.word	0x08005007
 8004fdc:	08004fff 	.word	0x08004fff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fe0:	f7fd feb6 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 8004fe4:	6178      	str	r0, [r7, #20]
        break;
 8004fe6:	e013      	b.n	8005010 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fe8:	f7fd fec8 	bl	8002d7c <HAL_RCC_GetPCLK2Freq>
 8004fec:	6178      	str	r0, [r7, #20]
        break;
 8004fee:	e00f      	b.n	8005010 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ff0:	4b49      	ldr	r3, [pc, #292]	; (8005118 <UART_SetConfig+0x510>)
 8004ff2:	617b      	str	r3, [r7, #20]
        break;
 8004ff4:	e00c      	b.n	8005010 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ff6:	f7fd fe13 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8004ffa:	6178      	str	r0, [r7, #20]
        break;
 8004ffc:	e008      	b.n	8005010 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005002:	617b      	str	r3, [r7, #20]
        break;
 8005004:	e004      	b.n	8005010 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	76bb      	strb	r3, [r7, #26]
        break;
 800500e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d074      	beq.n	8005100 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	005a      	lsls	r2, r3, #1
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	085b      	lsrs	r3, r3, #1
 8005020:	441a      	add	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	fbb2 f3f3 	udiv	r3, r2, r3
 800502a:	b29b      	uxth	r3, r3
 800502c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	2b0f      	cmp	r3, #15
 8005032:	d916      	bls.n	8005062 <UART_SetConfig+0x45a>
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800503a:	d212      	bcs.n	8005062 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	b29b      	uxth	r3, r3
 8005040:	f023 030f 	bic.w	r3, r3, #15
 8005044:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	085b      	lsrs	r3, r3, #1
 800504a:	b29b      	uxth	r3, r3
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	b29a      	uxth	r2, r3
 8005052:	89fb      	ldrh	r3, [r7, #14]
 8005054:	4313      	orrs	r3, r2
 8005056:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	89fa      	ldrh	r2, [r7, #14]
 800505e:	60da      	str	r2, [r3, #12]
 8005060:	e04e      	b.n	8005100 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	76bb      	strb	r3, [r7, #26]
 8005066:	e04b      	b.n	8005100 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005068:	7efb      	ldrb	r3, [r7, #27]
 800506a:	2b08      	cmp	r3, #8
 800506c:	d827      	bhi.n	80050be <UART_SetConfig+0x4b6>
 800506e:	a201      	add	r2, pc, #4	; (adr r2, 8005074 <UART_SetConfig+0x46c>)
 8005070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005074:	08005099 	.word	0x08005099
 8005078:	080050a1 	.word	0x080050a1
 800507c:	080050a9 	.word	0x080050a9
 8005080:	080050bf 	.word	0x080050bf
 8005084:	080050af 	.word	0x080050af
 8005088:	080050bf 	.word	0x080050bf
 800508c:	080050bf 	.word	0x080050bf
 8005090:	080050bf 	.word	0x080050bf
 8005094:	080050b7 	.word	0x080050b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005098:	f7fd fe5a 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 800509c:	6178      	str	r0, [r7, #20]
        break;
 800509e:	e013      	b.n	80050c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050a0:	f7fd fe6c 	bl	8002d7c <HAL_RCC_GetPCLK2Freq>
 80050a4:	6178      	str	r0, [r7, #20]
        break;
 80050a6:	e00f      	b.n	80050c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050a8:	4b1b      	ldr	r3, [pc, #108]	; (8005118 <UART_SetConfig+0x510>)
 80050aa:	617b      	str	r3, [r7, #20]
        break;
 80050ac:	e00c      	b.n	80050c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ae:	f7fd fdb7 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 80050b2:	6178      	str	r0, [r7, #20]
        break;
 80050b4:	e008      	b.n	80050c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ba:	617b      	str	r3, [r7, #20]
        break;
 80050bc:	e004      	b.n	80050c8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	76bb      	strb	r3, [r7, #26]
        break;
 80050c6:	bf00      	nop
    }

    if (pclk != 0U)
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d018      	beq.n	8005100 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	085a      	lsrs	r2, r3, #1
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	441a      	add	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	2b0f      	cmp	r3, #15
 80050e8:	d908      	bls.n	80050fc <UART_SetConfig+0x4f4>
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f0:	d204      	bcs.n	80050fc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	60da      	str	r2, [r3, #12]
 80050fa:	e001      	b.n	8005100 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800510c:	7ebb      	ldrb	r3, [r7, #26]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3720      	adds	r7, #32
 8005112:	46bd      	mov	sp, r7
 8005114:	bdb0      	pop	{r4, r5, r7, pc}
 8005116:	bf00      	nop
 8005118:	00f42400 	.word	0x00f42400

0800511c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00a      	beq.n	8005146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00a      	beq.n	8005168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00a      	beq.n	800518a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	f003 0308 	and.w	r3, r3, #8
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	f003 0310 	and.w	r3, r3, #16
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00a      	beq.n	80051ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	f003 0320 	and.w	r3, r3, #32
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01a      	beq.n	8005232 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800521a:	d10a      	bne.n	8005232 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	605a      	str	r2, [r3, #4]
  }
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af02      	add	r7, sp, #8
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005270:	f7fc fc76 	bl	8001b60 <HAL_GetTick>
 8005274:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0308 	and.w	r3, r3, #8
 8005280:	2b08      	cmp	r3, #8
 8005282:	d10e      	bne.n	80052a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005284:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f82d 	bl	80052f2 <UART_WaitOnFlagUntilTimeout>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e023      	b.n	80052ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b04      	cmp	r3, #4
 80052ae:	d10e      	bne.n	80052ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f817 	bl	80052f2 <UART_WaitOnFlagUntilTimeout>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e00d      	b.n	80052ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2220      	movs	r2, #32
 80052d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2220      	movs	r2, #32
 80052d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b084      	sub	sp, #16
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	60f8      	str	r0, [r7, #12]
 80052fa:	60b9      	str	r1, [r7, #8]
 80052fc:	603b      	str	r3, [r7, #0]
 80052fe:	4613      	mov	r3, r2
 8005300:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005302:	e05e      	b.n	80053c2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800530a:	d05a      	beq.n	80053c2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800530c:	f7fc fc28 	bl	8001b60 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	429a      	cmp	r2, r3
 800531a:	d302      	bcc.n	8005322 <UART_WaitOnFlagUntilTimeout+0x30>
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d11b      	bne.n	800535a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005330:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 0201 	bic.w	r2, r2, #1
 8005340:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2220      	movs	r2, #32
 8005346:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2220      	movs	r2, #32
 800534c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e043      	b.n	80053e2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b00      	cmp	r3, #0
 8005366:	d02c      	beq.n	80053c2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005372:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005376:	d124      	bne.n	80053c2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005380:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005390:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 0201 	bic.w	r2, r2, #1
 80053a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2220      	movs	r2, #32
 80053a6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2220      	movs	r2, #32
 80053ac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2220      	movs	r2, #32
 80053b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e00f      	b.n	80053e2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	69da      	ldr	r2, [r3, #28]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	4013      	ands	r3, r2
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	bf0c      	ite	eq
 80053d2:	2301      	moveq	r3, #1
 80053d4:	2300      	movne	r3, #0
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	461a      	mov	r2, r3
 80053da:	79fb      	ldrb	r3, [r7, #7]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d091      	beq.n	8005304 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
	...

080053ec <__libc_init_array>:
 80053ec:	b570      	push	{r4, r5, r6, lr}
 80053ee:	4d0d      	ldr	r5, [pc, #52]	; (8005424 <__libc_init_array+0x38>)
 80053f0:	4c0d      	ldr	r4, [pc, #52]	; (8005428 <__libc_init_array+0x3c>)
 80053f2:	1b64      	subs	r4, r4, r5
 80053f4:	10a4      	asrs	r4, r4, #2
 80053f6:	2600      	movs	r6, #0
 80053f8:	42a6      	cmp	r6, r4
 80053fa:	d109      	bne.n	8005410 <__libc_init_array+0x24>
 80053fc:	4d0b      	ldr	r5, [pc, #44]	; (800542c <__libc_init_array+0x40>)
 80053fe:	4c0c      	ldr	r4, [pc, #48]	; (8005430 <__libc_init_array+0x44>)
 8005400:	f000 f820 	bl	8005444 <_init>
 8005404:	1b64      	subs	r4, r4, r5
 8005406:	10a4      	asrs	r4, r4, #2
 8005408:	2600      	movs	r6, #0
 800540a:	42a6      	cmp	r6, r4
 800540c:	d105      	bne.n	800541a <__libc_init_array+0x2e>
 800540e:	bd70      	pop	{r4, r5, r6, pc}
 8005410:	f855 3b04 	ldr.w	r3, [r5], #4
 8005414:	4798      	blx	r3
 8005416:	3601      	adds	r6, #1
 8005418:	e7ee      	b.n	80053f8 <__libc_init_array+0xc>
 800541a:	f855 3b04 	ldr.w	r3, [r5], #4
 800541e:	4798      	blx	r3
 8005420:	3601      	adds	r6, #1
 8005422:	e7f2      	b.n	800540a <__libc_init_array+0x1e>
 8005424:	080054ac 	.word	0x080054ac
 8005428:	080054ac 	.word	0x080054ac
 800542c:	080054ac 	.word	0x080054ac
 8005430:	080054b0 	.word	0x080054b0

08005434 <memset>:
 8005434:	4402      	add	r2, r0
 8005436:	4603      	mov	r3, r0
 8005438:	4293      	cmp	r3, r2
 800543a:	d100      	bne.n	800543e <memset+0xa>
 800543c:	4770      	bx	lr
 800543e:	f803 1b01 	strb.w	r1, [r3], #1
 8005442:	e7f9      	b.n	8005438 <memset+0x4>

08005444 <_init>:
 8005444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005446:	bf00      	nop
 8005448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800544a:	bc08      	pop	{r3}
 800544c:	469e      	mov	lr, r3
 800544e:	4770      	bx	lr

08005450 <_fini>:
 8005450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005452:	bf00      	nop
 8005454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005456:	bc08      	pop	{r3}
 8005458:	469e      	mov	lr, r3
 800545a:	4770      	bx	lr
