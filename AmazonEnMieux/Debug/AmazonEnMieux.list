
AmazonEnMieux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005194  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800531c  0800531c  0001531c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005364  08005364  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08005364  08005364  00015364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800536c  0800536c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800536c  0800536c  0001536c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005370  08005370  00015370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08005374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000018  0800538c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  0800538c  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2a7  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d13  00000000  00000000  0002f2ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  00031008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  00031eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f98  00000000  00000000  00032cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee54  00000000  00000000  00058c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efc02  00000000  00000000  00067a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015769e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ef8  00000000  00000000  001576f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005304 	.word	0x08005304

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08005304 	.word	0x08005304

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_uldivmod>:
 80007d4:	b953      	cbnz	r3, 80007ec <__aeabi_uldivmod+0x18>
 80007d6:	b94a      	cbnz	r2, 80007ec <__aeabi_uldivmod+0x18>
 80007d8:	2900      	cmp	r1, #0
 80007da:	bf08      	it	eq
 80007dc:	2800      	cmpeq	r0, #0
 80007de:	bf1c      	itt	ne
 80007e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80007e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80007e8:	f000 b96e 	b.w	8000ac8 <__aeabi_idiv0>
 80007ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f4:	f000 f806 	bl	8000804 <__udivmoddi4>
 80007f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr

08000804 <__udivmoddi4>:
 8000804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000808:	9d08      	ldr	r5, [sp, #32]
 800080a:	4604      	mov	r4, r0
 800080c:	468c      	mov	ip, r1
 800080e:	2b00      	cmp	r3, #0
 8000810:	f040 8083 	bne.w	800091a <__udivmoddi4+0x116>
 8000814:	428a      	cmp	r2, r1
 8000816:	4617      	mov	r7, r2
 8000818:	d947      	bls.n	80008aa <__udivmoddi4+0xa6>
 800081a:	fab2 f282 	clz	r2, r2
 800081e:	b142      	cbz	r2, 8000832 <__udivmoddi4+0x2e>
 8000820:	f1c2 0020 	rsb	r0, r2, #32
 8000824:	fa24 f000 	lsr.w	r0, r4, r0
 8000828:	4091      	lsls	r1, r2
 800082a:	4097      	lsls	r7, r2
 800082c:	ea40 0c01 	orr.w	ip, r0, r1
 8000830:	4094      	lsls	r4, r2
 8000832:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000836:	0c23      	lsrs	r3, r4, #16
 8000838:	fbbc f6f8 	udiv	r6, ip, r8
 800083c:	fa1f fe87 	uxth.w	lr, r7
 8000840:	fb08 c116 	mls	r1, r8, r6, ip
 8000844:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000848:	fb06 f10e 	mul.w	r1, r6, lr
 800084c:	4299      	cmp	r1, r3
 800084e:	d909      	bls.n	8000864 <__udivmoddi4+0x60>
 8000850:	18fb      	adds	r3, r7, r3
 8000852:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000856:	f080 8119 	bcs.w	8000a8c <__udivmoddi4+0x288>
 800085a:	4299      	cmp	r1, r3
 800085c:	f240 8116 	bls.w	8000a8c <__udivmoddi4+0x288>
 8000860:	3e02      	subs	r6, #2
 8000862:	443b      	add	r3, r7
 8000864:	1a5b      	subs	r3, r3, r1
 8000866:	b2a4      	uxth	r4, r4
 8000868:	fbb3 f0f8 	udiv	r0, r3, r8
 800086c:	fb08 3310 	mls	r3, r8, r0, r3
 8000870:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000874:	fb00 fe0e 	mul.w	lr, r0, lr
 8000878:	45a6      	cmp	lr, r4
 800087a:	d909      	bls.n	8000890 <__udivmoddi4+0x8c>
 800087c:	193c      	adds	r4, r7, r4
 800087e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000882:	f080 8105 	bcs.w	8000a90 <__udivmoddi4+0x28c>
 8000886:	45a6      	cmp	lr, r4
 8000888:	f240 8102 	bls.w	8000a90 <__udivmoddi4+0x28c>
 800088c:	3802      	subs	r0, #2
 800088e:	443c      	add	r4, r7
 8000890:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000894:	eba4 040e 	sub.w	r4, r4, lr
 8000898:	2600      	movs	r6, #0
 800089a:	b11d      	cbz	r5, 80008a4 <__udivmoddi4+0xa0>
 800089c:	40d4      	lsrs	r4, r2
 800089e:	2300      	movs	r3, #0
 80008a0:	e9c5 4300 	strd	r4, r3, [r5]
 80008a4:	4631      	mov	r1, r6
 80008a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008aa:	b902      	cbnz	r2, 80008ae <__udivmoddi4+0xaa>
 80008ac:	deff      	udf	#255	; 0xff
 80008ae:	fab2 f282 	clz	r2, r2
 80008b2:	2a00      	cmp	r2, #0
 80008b4:	d150      	bne.n	8000958 <__udivmoddi4+0x154>
 80008b6:	1bcb      	subs	r3, r1, r7
 80008b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008bc:	fa1f f887 	uxth.w	r8, r7
 80008c0:	2601      	movs	r6, #1
 80008c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80008c6:	0c21      	lsrs	r1, r4, #16
 80008c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80008cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d0:	fb08 f30c 	mul.w	r3, r8, ip
 80008d4:	428b      	cmp	r3, r1
 80008d6:	d907      	bls.n	80008e8 <__udivmoddi4+0xe4>
 80008d8:	1879      	adds	r1, r7, r1
 80008da:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80008de:	d202      	bcs.n	80008e6 <__udivmoddi4+0xe2>
 80008e0:	428b      	cmp	r3, r1
 80008e2:	f200 80e9 	bhi.w	8000ab8 <__udivmoddi4+0x2b4>
 80008e6:	4684      	mov	ip, r0
 80008e8:	1ac9      	subs	r1, r1, r3
 80008ea:	b2a3      	uxth	r3, r4
 80008ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80008f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80008f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80008f8:	fb08 f800 	mul.w	r8, r8, r0
 80008fc:	45a0      	cmp	r8, r4
 80008fe:	d907      	bls.n	8000910 <__udivmoddi4+0x10c>
 8000900:	193c      	adds	r4, r7, r4
 8000902:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000906:	d202      	bcs.n	800090e <__udivmoddi4+0x10a>
 8000908:	45a0      	cmp	r8, r4
 800090a:	f200 80d9 	bhi.w	8000ac0 <__udivmoddi4+0x2bc>
 800090e:	4618      	mov	r0, r3
 8000910:	eba4 0408 	sub.w	r4, r4, r8
 8000914:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000918:	e7bf      	b.n	800089a <__udivmoddi4+0x96>
 800091a:	428b      	cmp	r3, r1
 800091c:	d909      	bls.n	8000932 <__udivmoddi4+0x12e>
 800091e:	2d00      	cmp	r5, #0
 8000920:	f000 80b1 	beq.w	8000a86 <__udivmoddi4+0x282>
 8000924:	2600      	movs	r6, #0
 8000926:	e9c5 0100 	strd	r0, r1, [r5]
 800092a:	4630      	mov	r0, r6
 800092c:	4631      	mov	r1, r6
 800092e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000932:	fab3 f683 	clz	r6, r3
 8000936:	2e00      	cmp	r6, #0
 8000938:	d14a      	bne.n	80009d0 <__udivmoddi4+0x1cc>
 800093a:	428b      	cmp	r3, r1
 800093c:	d302      	bcc.n	8000944 <__udivmoddi4+0x140>
 800093e:	4282      	cmp	r2, r0
 8000940:	f200 80b8 	bhi.w	8000ab4 <__udivmoddi4+0x2b0>
 8000944:	1a84      	subs	r4, r0, r2
 8000946:	eb61 0103 	sbc.w	r1, r1, r3
 800094a:	2001      	movs	r0, #1
 800094c:	468c      	mov	ip, r1
 800094e:	2d00      	cmp	r5, #0
 8000950:	d0a8      	beq.n	80008a4 <__udivmoddi4+0xa0>
 8000952:	e9c5 4c00 	strd	r4, ip, [r5]
 8000956:	e7a5      	b.n	80008a4 <__udivmoddi4+0xa0>
 8000958:	f1c2 0320 	rsb	r3, r2, #32
 800095c:	fa20 f603 	lsr.w	r6, r0, r3
 8000960:	4097      	lsls	r7, r2
 8000962:	fa01 f002 	lsl.w	r0, r1, r2
 8000966:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800096a:	40d9      	lsrs	r1, r3
 800096c:	4330      	orrs	r0, r6
 800096e:	0c03      	lsrs	r3, r0, #16
 8000970:	fbb1 f6fe 	udiv	r6, r1, lr
 8000974:	fa1f f887 	uxth.w	r8, r7
 8000978:	fb0e 1116 	mls	r1, lr, r6, r1
 800097c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000980:	fb06 f108 	mul.w	r1, r6, r8
 8000984:	4299      	cmp	r1, r3
 8000986:	fa04 f402 	lsl.w	r4, r4, r2
 800098a:	d909      	bls.n	80009a0 <__udivmoddi4+0x19c>
 800098c:	18fb      	adds	r3, r7, r3
 800098e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000992:	f080 808d 	bcs.w	8000ab0 <__udivmoddi4+0x2ac>
 8000996:	4299      	cmp	r1, r3
 8000998:	f240 808a 	bls.w	8000ab0 <__udivmoddi4+0x2ac>
 800099c:	3e02      	subs	r6, #2
 800099e:	443b      	add	r3, r7
 80009a0:	1a5b      	subs	r3, r3, r1
 80009a2:	b281      	uxth	r1, r0
 80009a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80009a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80009ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009b0:	fb00 f308 	mul.w	r3, r0, r8
 80009b4:	428b      	cmp	r3, r1
 80009b6:	d907      	bls.n	80009c8 <__udivmoddi4+0x1c4>
 80009b8:	1879      	adds	r1, r7, r1
 80009ba:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80009be:	d273      	bcs.n	8000aa8 <__udivmoddi4+0x2a4>
 80009c0:	428b      	cmp	r3, r1
 80009c2:	d971      	bls.n	8000aa8 <__udivmoddi4+0x2a4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	4439      	add	r1, r7
 80009c8:	1acb      	subs	r3, r1, r3
 80009ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80009ce:	e778      	b.n	80008c2 <__udivmoddi4+0xbe>
 80009d0:	f1c6 0c20 	rsb	ip, r6, #32
 80009d4:	fa03 f406 	lsl.w	r4, r3, r6
 80009d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80009dc:	431c      	orrs	r4, r3
 80009de:	fa20 f70c 	lsr.w	r7, r0, ip
 80009e2:	fa01 f306 	lsl.w	r3, r1, r6
 80009e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80009ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80009ee:	431f      	orrs	r7, r3
 80009f0:	0c3b      	lsrs	r3, r7, #16
 80009f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80009f6:	fa1f f884 	uxth.w	r8, r4
 80009fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80009fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a02:	fb09 fa08 	mul.w	sl, r9, r8
 8000a06:	458a      	cmp	sl, r1
 8000a08:	fa02 f206 	lsl.w	r2, r2, r6
 8000a0c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x220>
 8000a12:	1861      	adds	r1, r4, r1
 8000a14:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000a18:	d248      	bcs.n	8000aac <__udivmoddi4+0x2a8>
 8000a1a:	458a      	cmp	sl, r1
 8000a1c:	d946      	bls.n	8000aac <__udivmoddi4+0x2a8>
 8000a1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000a22:	4421      	add	r1, r4
 8000a24:	eba1 010a 	sub.w	r1, r1, sl
 8000a28:	b2bf      	uxth	r7, r7
 8000a2a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a2e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a32:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000a36:	fb00 f808 	mul.w	r8, r0, r8
 8000a3a:	45b8      	cmp	r8, r7
 8000a3c:	d907      	bls.n	8000a4e <__udivmoddi4+0x24a>
 8000a3e:	19e7      	adds	r7, r4, r7
 8000a40:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000a44:	d22e      	bcs.n	8000aa4 <__udivmoddi4+0x2a0>
 8000a46:	45b8      	cmp	r8, r7
 8000a48:	d92c      	bls.n	8000aa4 <__udivmoddi4+0x2a0>
 8000a4a:	3802      	subs	r0, #2
 8000a4c:	4427      	add	r7, r4
 8000a4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a52:	eba7 0708 	sub.w	r7, r7, r8
 8000a56:	fba0 8902 	umull	r8, r9, r0, r2
 8000a5a:	454f      	cmp	r7, r9
 8000a5c:	46c6      	mov	lr, r8
 8000a5e:	4649      	mov	r1, r9
 8000a60:	d31a      	bcc.n	8000a98 <__udivmoddi4+0x294>
 8000a62:	d017      	beq.n	8000a94 <__udivmoddi4+0x290>
 8000a64:	b15d      	cbz	r5, 8000a7e <__udivmoddi4+0x27a>
 8000a66:	ebb3 020e 	subs.w	r2, r3, lr
 8000a6a:	eb67 0701 	sbc.w	r7, r7, r1
 8000a6e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a72:	40f2      	lsrs	r2, r6
 8000a74:	ea4c 0202 	orr.w	r2, ip, r2
 8000a78:	40f7      	lsrs	r7, r6
 8000a7a:	e9c5 2700 	strd	r2, r7, [r5]
 8000a7e:	2600      	movs	r6, #0
 8000a80:	4631      	mov	r1, r6
 8000a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a86:	462e      	mov	r6, r5
 8000a88:	4628      	mov	r0, r5
 8000a8a:	e70b      	b.n	80008a4 <__udivmoddi4+0xa0>
 8000a8c:	4606      	mov	r6, r0
 8000a8e:	e6e9      	b.n	8000864 <__udivmoddi4+0x60>
 8000a90:	4618      	mov	r0, r3
 8000a92:	e6fd      	b.n	8000890 <__udivmoddi4+0x8c>
 8000a94:	4543      	cmp	r3, r8
 8000a96:	d2e5      	bcs.n	8000a64 <__udivmoddi4+0x260>
 8000a98:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a9c:	eb69 0104 	sbc.w	r1, r9, r4
 8000aa0:	3801      	subs	r0, #1
 8000aa2:	e7df      	b.n	8000a64 <__udivmoddi4+0x260>
 8000aa4:	4608      	mov	r0, r1
 8000aa6:	e7d2      	b.n	8000a4e <__udivmoddi4+0x24a>
 8000aa8:	4660      	mov	r0, ip
 8000aaa:	e78d      	b.n	80009c8 <__udivmoddi4+0x1c4>
 8000aac:	4681      	mov	r9, r0
 8000aae:	e7b9      	b.n	8000a24 <__udivmoddi4+0x220>
 8000ab0:	4666      	mov	r6, ip
 8000ab2:	e775      	b.n	80009a0 <__udivmoddi4+0x19c>
 8000ab4:	4630      	mov	r0, r6
 8000ab6:	e74a      	b.n	800094e <__udivmoddi4+0x14a>
 8000ab8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000abc:	4439      	add	r1, r7
 8000abe:	e713      	b.n	80008e8 <__udivmoddi4+0xe4>
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	443c      	add	r4, r7
 8000ac4:	e724      	b.n	8000910 <__udivmoddi4+0x10c>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_idiv0>:
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad0:	f000 ff3d 	bl	800194e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad4:	f000 f86e 	bl	8000bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad8:	f000 fa48 	bl	8000f6c <MX_GPIO_Init>
  MX_UART4_Init();
 8000adc:	f000 fa16 	bl	8000f0c <MX_UART4_Init>
  MX_TIM7_Init();
 8000ae0:	f000 f94e 	bl	8000d80 <MX_TIM7_Init>
  MX_TIM3_Init();
 8000ae4:	f000 f8b8 	bl	8000c58 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000ae8:	f000 f980 	bl	8000dec <MX_TIM8_Init>
  MX_TIM6_Init();
 8000aec:	f000 f910 	bl	8000d10 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Init(&htim7);
 8000af0:	482c      	ldr	r0, [pc, #176]	; (8000ba4 <main+0xd8>)
 8000af2:	f002 fdd5 	bl	80036a0 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim7);
 8000af6:	482b      	ldr	r0, [pc, #172]	; (8000ba4 <main+0xd8>)
 8000af8:	f002 fe2a 	bl	8003750 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000afc:	2108      	movs	r1, #8
 8000afe:	482a      	ldr	r0, [pc, #168]	; (8000ba8 <main+0xdc>)
 8000b00:	f002 fee6 	bl	80038d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000b04:	2100      	movs	r1, #0
 8000b06:	4829      	ldr	r0, [pc, #164]	; (8000bac <main+0xe0>)
 8000b08:	f002 fee2 	bl	80038d0 <HAL_TIM_PWM_Start>

  /* TEST FOLLOW PATH */

  /* TEST FOLLOW PATH */

  sensor_state = 0;
 8000b0c:	4b28      	ldr	r3, [pc, #160]	; (8000bb0 <main+0xe4>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
  sensor_state += HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) ? 1 : 0; // Sensor Gauche
 8000b12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1a:	f001 fa6d 	bl	8001ff8 <HAL_GPIO_ReadPin>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	bf14      	ite	ne
 8000b24:	2301      	movne	r3, #1
 8000b26:	2300      	moveq	r3, #0
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <main+0xe4>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4413      	add	r3, r2
 8000b32:	4a1f      	ldr	r2, [pc, #124]	; (8000bb0 <main+0xe4>)
 8000b34:	6013      	str	r3, [r2, #0]
  sensor_state += HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) ? 2 : 0; // Sensor Droit
 8000b36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3e:	f001 fa5b 	bl	8001ff8 <HAL_GPIO_ReadPin>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <main+0x80>
 8000b48:	2202      	movs	r2, #2
 8000b4a:	e000      	b.n	8000b4e <main+0x82>
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <main+0xe4>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4413      	add	r3, r2
 8000b54:	4a16      	ldr	r2, [pc, #88]	; (8000bb0 <main+0xe4>)
 8000b56:	6013      	str	r3, [r2, #0]

  follow_path('L');
 8000b58:	204c      	movs	r0, #76	; 0x4c
 8000b5a:	f000 fab7 	bl	80010cc <follow_path>
  follow_path('R');
 8000b5e:	2052      	movs	r0, #82	; 0x52
 8000b60:	f000 fab4 	bl	80010cc <follow_path>
  follow_path('R');
 8000b64:	2052      	movs	r0, #82	; 0x52
 8000b66:	f000 fab1 	bl	80010cc <follow_path>
  follow_path('L');
 8000b6a:	204c      	movs	r0, #76	; 0x4c
 8000b6c:	f000 faae 	bl	80010cc <follow_path>
  follow_path('R');
 8000b70:	2052      	movs	r0, #82	; 0x52
 8000b72:	f000 faab 	bl	80010cc <follow_path>
  follow_path('R');
 8000b76:	2052      	movs	r0, #82	; 0x52
 8000b78:	f000 faa8 	bl	80010cc <follow_path>
  follow_path('L');
 8000b7c:	204c      	movs	r0, #76	; 0x4c
 8000b7e:	f000 faa5 	bl	80010cc <follow_path>
  follow_path('R');
 8000b82:	2052      	movs	r0, #82	; 0x52
 8000b84:	f000 faa2 	bl	80010cc <follow_path>
  follow_path('L');
 8000b88:	204c      	movs	r0, #76	; 0x4c
 8000b8a:	f000 fa9f 	bl	80010cc <follow_path>
  follow_path('L');
 8000b8e:	204c      	movs	r0, #76	; 0x4c
 8000b90:	f000 fa9c 	bl	80010cc <follow_path>
  follow_path('L');
 8000b94:	204c      	movs	r0, #76	; 0x4c
 8000b96:	f000 fa99 	bl	80010cc <follow_path>
  follow_path('R');
 8000b9a:	2052      	movs	r0, #82	; 0x52
 8000b9c:	f000 fa96 	bl	80010cc <follow_path>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <main+0xd4>
 8000ba2:	bf00      	nop
 8000ba4:	200001b0 	.word	0x200001b0
 8000ba8:	20000094 	.word	0x20000094
 8000bac:	20000048 	.word	0x20000048
 8000bb0:	20000044 	.word	0x20000044

08000bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b096      	sub	sp, #88	; 0x58
 8000bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	2244      	movs	r2, #68	; 0x44
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f004 fb96 	bl	80052f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc8:	463b      	mov	r3, r7
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bd6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bda:	f001 fa63 	bl	80020a4 <HAL_PWREx_ControlVoltageScaling>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000be4:	f000 fcc0 	bl	8001568 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000be8:	2310      	movs	r3, #16
 8000bea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bec:	2301      	movs	r3, #1
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000bf4:	2360      	movs	r3, #96	; 0x60
 8000bf6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c00:	2301      	movs	r3, #1
 8000c02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000c04:	2328      	movs	r3, #40	; 0x28
 8000c06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c08:	2307      	movs	r3, #7
 8000c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c10:	2302      	movs	r3, #2
 8000c12:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f001 fa99 	bl	8002150 <HAL_RCC_OscConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000c24:	f000 fca0 	bl	8001568 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c28:	230f      	movs	r3, #15
 8000c2a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	2104      	movs	r1, #4
 8000c40:	4618      	mov	r0, r3
 8000c42:	f001 fe6b 	bl	800291c <HAL_RCC_ClockConfig>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c4c:	f000 fc8c 	bl	8001568 <Error_Handler>
  }
}
 8000c50:	bf00      	nop
 8000c52:	3758      	adds	r7, #88	; 0x58
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
 8000c78:	615a      	str	r2, [r3, #20]
 8000c7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c7c:	4b22      	ldr	r3, [pc, #136]	; (8000d08 <MX_TIM3_Init+0xb0>)
 8000c7e:	4a23      	ldr	r2, [pc, #140]	; (8000d0c <MX_TIM3_Init+0xb4>)
 8000c80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8000c82:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <MX_TIM3_Init+0xb0>)
 8000c84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8a:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <MX_TIM3_Init+0xb0>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000c90:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <MX_TIM3_Init+0xb0>)
 8000c92:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <MX_TIM3_Init+0xb0>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <MX_TIM3_Init+0xb0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ca4:	4818      	ldr	r0, [pc, #96]	; (8000d08 <MX_TIM3_Init+0xb0>)
 8000ca6:	f002 fdbb 	bl	8003820 <HAL_TIM_PWM_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8000cb0:	f000 fc5a 	bl	8001568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4811      	ldr	r0, [pc, #68]	; (8000d08 <MX_TIM3_Init+0xb0>)
 8000cc4:	f003 fd8e 	bl	80047e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000cce:	f000 fc4b 	bl	8001568 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cd2:	2360      	movs	r3, #96	; 0x60
 8000cd4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	2208      	movs	r2, #8
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4807      	ldr	r0, [pc, #28]	; (8000d08 <MX_TIM3_Init+0xb0>)
 8000cea:	f003 f8ad 	bl	8003e48 <HAL_TIM_PWM_ConfigChannel>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000cf4:	f000 fc38 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cf8:	4803      	ldr	r0, [pc, #12]	; (8000d08 <MX_TIM3_Init+0xb0>)
 8000cfa:	f000 fccd 	bl	8001698 <HAL_TIM_MspPostInit>

}
 8000cfe:	bf00      	nop
 8000d00:	3728      	adds	r7, #40	; 0x28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000094 	.word	0x20000094
 8000d0c:	40000400 	.word	0x40000400

08000d10 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d20:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <MX_TIM6_Init+0x68>)
 8000d22:	4a16      	ldr	r2, [pc, #88]	; (8000d7c <MX_TIM6_Init+0x6c>)
 8000d24:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000d26:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <MX_TIM6_Init+0x68>)
 8000d28:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d2c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2e:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <MX_TIM6_Init+0x68>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000d34:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <MX_TIM6_Init+0x68>)
 8000d36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d3a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <MX_TIM6_Init+0x68>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d42:	480d      	ldr	r0, [pc, #52]	; (8000d78 <MX_TIM6_Init+0x68>)
 8000d44:	f002 fcac 	bl	80036a0 <HAL_TIM_Base_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000d4e:	f000 fc0b 	bl	8001568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4806      	ldr	r0, [pc, #24]	; (8000d78 <MX_TIM6_Init+0x68>)
 8000d60:	f003 fd40 	bl	80047e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000d6a:	f000 fbfd 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200000e0 	.word	0x200000e0
 8000d7c:	40001000 	.word	0x40001000

08000d80 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_TIM7_Init+0x64>)
 8000d92:	4a15      	ldr	r2, [pc, #84]	; (8000de8 <MX_TIM7_Init+0x68>)
 8000d94:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 79;
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <MX_TIM7_Init+0x64>)
 8000d98:	224f      	movs	r2, #79	; 0x4f
 8000d9a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_TIM7_Init+0x64>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <MX_TIM7_Init+0x64>)
 8000da4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000da8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_TIM7_Init+0x64>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <MX_TIM7_Init+0x64>)
 8000db2:	f002 fc75 	bl	80036a0 <HAL_TIM_Base_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000dbc:	f000 fbd4 	bl	8001568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_TIM7_Init+0x64>)
 8000dce:	f003 fd09 	bl	80047e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000dd8:	f000 fbc6 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	200001b0 	.word	0x200001b0
 8000de8:	40001400 	.word	0x40001400

08000dec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b096      	sub	sp, #88	; 0x58
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]
 8000e0e:	615a      	str	r2, [r3, #20]
 8000e10:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	222c      	movs	r2, #44	; 0x2c
 8000e16:	2100      	movs	r1, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f004 fa6b 	bl	80052f4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e1e:	4b39      	ldr	r3, [pc, #228]	; (8000f04 <MX_TIM8_Init+0x118>)
 8000e20:	4a39      	ldr	r2, [pc, #228]	; (8000f08 <MX_TIM8_Init+0x11c>)
 8000e22:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 999;
 8000e24:	4b37      	ldr	r3, [pc, #220]	; (8000f04 <MX_TIM8_Init+0x118>)
 8000e26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e2a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2c:	4b35      	ldr	r3, [pc, #212]	; (8000f04 <MX_TIM8_Init+0x118>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8000e32:	4b34      	ldr	r3, [pc, #208]	; (8000f04 <MX_TIM8_Init+0x118>)
 8000e34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e38:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3a:	4b32      	ldr	r3, [pc, #200]	; (8000f04 <MX_TIM8_Init+0x118>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e40:	4b30      	ldr	r3, [pc, #192]	; (8000f04 <MX_TIM8_Init+0x118>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e46:	4b2f      	ldr	r3, [pc, #188]	; (8000f04 <MX_TIM8_Init+0x118>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000e4c:	482d      	ldr	r0, [pc, #180]	; (8000f04 <MX_TIM8_Init+0x118>)
 8000e4e:	f002 fce7 	bl	8003820 <HAL_TIM_PWM_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM8_Init+0x70>
  {
    Error_Handler();
 8000e58:	f000 fb86 	bl	8001568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e60:	2300      	movs	r3, #0
 8000e62:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e68:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4825      	ldr	r0, [pc, #148]	; (8000f04 <MX_TIM8_Init+0x118>)
 8000e70:	f003 fcb8 	bl	80047e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8000e7a:	f000 fb75 	bl	8001568 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e7e:	2360      	movs	r3, #96	; 0x60
 8000e80:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e86:	2300      	movs	r3, #0
 8000e88:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e92:	2300      	movs	r3, #0
 8000e94:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e96:	2300      	movs	r3, #0
 8000e98:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4818      	ldr	r0, [pc, #96]	; (8000f04 <MX_TIM8_Init+0x118>)
 8000ea4:	f002 ffd0 	bl	8003e48 <HAL_TIM_PWM_ConfigChannel>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8000eae:	f000 fb5b 	bl	8001568 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ec6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ed4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4807      	ldr	r0, [pc, #28]	; (8000f04 <MX_TIM8_Init+0x118>)
 8000ee8:	f003 fd04 	bl	80048f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM8_Init+0x10a>
  {
    Error_Handler();
 8000ef2:	f000 fb39 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000ef6:	4803      	ldr	r0, [pc, #12]	; (8000f04 <MX_TIM8_Init+0x118>)
 8000ef8:	f000 fbce 	bl	8001698 <HAL_TIM_MspPostInit>

}
 8000efc:	bf00      	nop
 8000efe:	3758      	adds	r7, #88	; 0x58
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000048 	.word	0x20000048
 8000f08:	40013400 	.word	0x40013400

08000f0c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_UART4_Init+0x58>)
 8000f12:	4a15      	ldr	r2, [pc, #84]	; (8000f68 <MX_UART4_Init+0x5c>)
 8000f14:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <MX_UART4_Init+0x58>)
 8000f18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f1c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_UART4_Init+0x58>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_UART4_Init+0x58>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_UART4_Init+0x58>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_UART4_Init+0x58>)
 8000f32:	220c      	movs	r2, #12
 8000f34:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <MX_UART4_Init+0x58>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_UART4_Init+0x58>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <MX_UART4_Init+0x58>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_UART4_Init+0x58>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_UART4_Init+0x58>)
 8000f50:	f003 fd6c 	bl	8004a2c <HAL_UART_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000f5a:	f000 fb05 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000012c 	.word	0x2000012c
 8000f68:	40004c00 	.word	0x40004c00

08000f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f72:	f107 030c 	add.w	r3, r7, #12
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f82:	4b4e      	ldr	r3, [pc, #312]	; (80010bc <MX_GPIO_Init+0x150>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	4a4d      	ldr	r2, [pc, #308]	; (80010bc <MX_GPIO_Init+0x150>)
 8000f88:	f043 0304 	orr.w	r3, r3, #4
 8000f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8e:	4b4b      	ldr	r3, [pc, #300]	; (80010bc <MX_GPIO_Init+0x150>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	f003 0304 	and.w	r3, r3, #4
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	4b48      	ldr	r3, [pc, #288]	; (80010bc <MX_GPIO_Init+0x150>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	4a47      	ldr	r2, [pc, #284]	; (80010bc <MX_GPIO_Init+0x150>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa6:	4b45      	ldr	r3, [pc, #276]	; (80010bc <MX_GPIO_Init+0x150>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb2:	4b42      	ldr	r3, [pc, #264]	; (80010bc <MX_GPIO_Init+0x150>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	4a41      	ldr	r2, [pc, #260]	; (80010bc <MX_GPIO_Init+0x150>)
 8000fb8:	f043 0302 	orr.w	r3, r3, #2
 8000fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbe:	4b3f      	ldr	r3, [pc, #252]	; (80010bc <MX_GPIO_Init+0x150>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2102      	movs	r1, #2
 8000fce:	483c      	ldr	r0, [pc, #240]	; (80010c0 <MX_GPIO_Init+0x154>)
 8000fd0:	f001 f82a 	bl	8002028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2120      	movs	r1, #32
 8000fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fdc:	f001 f824 	bl	8002028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000fe6:	4837      	ldr	r0, [pc, #220]	; (80010c4 <MX_GPIO_Init+0x158>)
 8000fe8:	f001 f81e 	bl	8002028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	4619      	mov	r1, r3
 8001000:	482f      	ldr	r0, [pc, #188]	; (80010c0 <MX_GPIO_Init+0x154>)
 8001002:	f000 fe4f 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001006:	2301      	movs	r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800100a:	4b2f      	ldr	r3, [pc, #188]	; (80010c8 <MX_GPIO_Init+0x15c>)
 800100c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	4619      	mov	r1, r3
 8001018:	4829      	ldr	r0, [pc, #164]	; (80010c0 <MX_GPIO_Init+0x154>)
 800101a:	f000 fe43 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800101e:	2302      	movs	r3, #2
 8001020:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001022:	2301      	movs	r3, #1
 8001024:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	4619      	mov	r1, r3
 8001034:	4822      	ldr	r0, [pc, #136]	; (80010c0 <MX_GPIO_Init+0x154>)
 8001036:	f000 fe35 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800103a:	2320      	movs	r3, #32
 800103c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103e:	2301      	movs	r3, #1
 8001040:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 030c 	add.w	r3, r7, #12
 800104e:	4619      	mov	r1, r3
 8001050:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001054:	f000 fe26 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001058:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800105c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800105e:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <MX_GPIO_Init+0x15c>)
 8001060:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	4619      	mov	r1, r3
 800106c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001070:	f000 fe18 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001074:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001078:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107a:	2301      	movs	r3, #1
 800107c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	4619      	mov	r1, r3
 800108c:	480d      	ldr	r0, [pc, #52]	; (80010c4 <MX_GPIO_Init+0x158>)
 800108e:	f000 fe09 	bl	8001ca4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	2006      	movs	r0, #6
 8001098:	f000 fdcd 	bl	8001c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800109c:	2006      	movs	r0, #6
 800109e:	f000 fde6 	bl	8001c6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	2028      	movs	r0, #40	; 0x28
 80010a8:	f000 fdc5 	bl	8001c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010ac:	2028      	movs	r0, #40	; 0x28
 80010ae:	f000 fdde 	bl	8001c6e <HAL_NVIC_EnableIRQ>

}
 80010b2:	bf00      	nop
 80010b4:	3720      	adds	r7, #32
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40021000 	.word	0x40021000
 80010c0:	48000800 	.word	0x48000800
 80010c4:	48000400 	.word	0x48000400
 80010c8:	10310000 	.word	0x10310000

080010cc <follow_path>:
{
	return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
}

void follow_path(int path)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	moving_state = 0;
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <follow_path+0x2c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]

	fix_path(path);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 f810 	bl	8001100 <fix_path>
	follow_line();
 80010e0:	f000 f8a2 	bl	8001228 <follow_line>
	HAL_Delay(temps_pause);
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <follow_path+0x30>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 fca5 	bl	8001a38 <HAL_Delay>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000040 	.word	0x20000040
 80010fc:	20000008 	.word	0x20000008

08001100 <fix_path>:

void fix_path(int path)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	switch(path)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b4c      	cmp	r3, #76	; 0x4c
 800110c:	d003      	beq.n	8001116 <fix_path+0x16>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b52      	cmp	r3, #82	; 0x52
 8001112:	d03b      	beq.n	800118c <fix_path+0x8c>
 8001114:	e075      	b.n	8001202 <fix_path+0x102>
	{
	case 'L': // gauche
		moteur_gauche(vitesse_moteurs, ARRIERE);
 8001116:	4b41      	ldr	r3, [pc, #260]	; (800121c <fix_path+0x11c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	2101      	movs	r1, #1
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f91a 	bl	8001358 <moteur_gauche>
		HAL_Delay(temps_fix);
 8001124:	4b3e      	ldr	r3, [pc, #248]	; (8001220 <fix_path+0x120>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f000 fc85 	bl	8001a38 <HAL_Delay>
		moteur_gauche(vitesse_moteurs, AVANT);
 800112e:	4b3b      	ldr	r3, [pc, #236]	; (800121c <fix_path+0x11c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	b29b      	uxth	r3, r3
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f90e 	bl	8001358 <moteur_gauche>
		moteur_droit(vitesse_moteurs, AVANT);
 800113c:	4b37      	ldr	r3, [pc, #220]	; (800121c <fix_path+0x11c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	b29b      	uxth	r3, r3
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f000 f8e7 	bl	8001318 <moteur_droit>
		HAL_Delay(temps_fix);
 800114a:	4b35      	ldr	r3, [pc, #212]	; (8001220 <fix_path+0x120>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f000 fc72 	bl	8001a38 <HAL_Delay>
		moteur_gauche(0, AVANT);
 8001154:	2100      	movs	r1, #0
 8001156:	2000      	movs	r0, #0
 8001158:	f000 f8fe 	bl	8001358 <moteur_gauche>
		moteur_droit(0, AVANT);
 800115c:	2100      	movs	r1, #0
 800115e:	2000      	movs	r0, #0
 8001160:	f000 f8da 	bl	8001318 <moteur_droit>
		while(sensor_state == 2 || sensor_state == 3)
 8001164:	e009      	b.n	800117a <fix_path+0x7a>
		{
			moteur_droit(vitesse_moteurs, AVANT);
 8001166:	4b2d      	ldr	r3, [pc, #180]	; (800121c <fix_path+0x11c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	b29b      	uxth	r3, r3
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f000 f8d2 	bl	8001318 <moteur_droit>
			HAL_Delay(10);
 8001174:	200a      	movs	r0, #10
 8001176:	f000 fc5f 	bl	8001a38 <HAL_Delay>
		while(sensor_state == 2 || sensor_state == 3)
 800117a:	4b2a      	ldr	r3, [pc, #168]	; (8001224 <fix_path+0x124>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b02      	cmp	r3, #2
 8001180:	d0f1      	beq.n	8001166 <fix_path+0x66>
 8001182:	4b28      	ldr	r3, [pc, #160]	; (8001224 <fix_path+0x124>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b03      	cmp	r3, #3
 8001188:	d0ed      	beq.n	8001166 <fix_path+0x66>
		}
		break;
 800118a:	e03a      	b.n	8001202 <fix_path+0x102>
	case 'R': // droite
		moteur_droit(vitesse_moteurs, ARRIERE);
 800118c:	4b23      	ldr	r3, [pc, #140]	; (800121c <fix_path+0x11c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	b29b      	uxth	r3, r3
 8001192:	2101      	movs	r1, #1
 8001194:	4618      	mov	r0, r3
 8001196:	f000 f8bf 	bl	8001318 <moteur_droit>
		HAL_Delay(temps_fix);
 800119a:	4b21      	ldr	r3, [pc, #132]	; (8001220 <fix_path+0x120>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 fc4a 	bl	8001a38 <HAL_Delay>
		moteur_gauche(vitesse_moteurs, AVANT);
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <fix_path+0x11c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 f8d3 	bl	8001358 <moteur_gauche>
		moteur_droit(vitesse_moteurs, AVANT);
 80011b2:	4b1a      	ldr	r3, [pc, #104]	; (800121c <fix_path+0x11c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f8ac 	bl	8001318 <moteur_droit>
		HAL_Delay(temps_fix);
 80011c0:	4b17      	ldr	r3, [pc, #92]	; (8001220 <fix_path+0x120>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 fc37 	bl	8001a38 <HAL_Delay>
		moteur_gauche(0, AVANT);
 80011ca:	2100      	movs	r1, #0
 80011cc:	2000      	movs	r0, #0
 80011ce:	f000 f8c3 	bl	8001358 <moteur_gauche>
		moteur_droit(0, AVANT);
 80011d2:	2100      	movs	r1, #0
 80011d4:	2000      	movs	r0, #0
 80011d6:	f000 f89f 	bl	8001318 <moteur_droit>
		while(sensor_state == 2 || sensor_state == 3)
 80011da:	e009      	b.n	80011f0 <fix_path+0xf0>
		{
			moteur_gauche(vitesse_moteurs, AVANT);
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <fix_path+0x11c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 f8b7 	bl	8001358 <moteur_gauche>
			HAL_Delay(10);
 80011ea:	200a      	movs	r0, #10
 80011ec:	f000 fc24 	bl	8001a38 <HAL_Delay>
		while(sensor_state == 2 || sensor_state == 3)
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <fix_path+0x124>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d0f1      	beq.n	80011dc <fix_path+0xdc>
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <fix_path+0x124>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	d0ed      	beq.n	80011dc <fix_path+0xdc>
		}
		break;
 8001200:	bf00      	nop
	}

	moteur_droit(0, AVANT);
 8001202:	2100      	movs	r1, #0
 8001204:	2000      	movs	r0, #0
 8001206:	f000 f887 	bl	8001318 <moteur_droit>
	moteur_gauche(0, AVANT);
 800120a:	2100      	movs	r1, #0
 800120c:	2000      	movs	r0, #0
 800120e:	f000 f8a3 	bl	8001358 <moteur_gauche>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000000 	.word	0x20000000
 8001220:	20000004 	.word	0x20000004
 8001224:	20000044 	.word	0x20000044

08001228 <follow_line>:

void follow_line()
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	while (moving_state == 0)
 800122c:	e066      	b.n	80012fc <follow_line+0xd4>
	{
		switch (sensor_state) // (sensor g;sensor d)
 800122e:	4b37      	ldr	r3, [pc, #220]	; (800130c <follow_line+0xe4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b03      	cmp	r3, #3
 8001234:	d851      	bhi.n	80012da <follow_line+0xb2>
 8001236:	a201      	add	r2, pc, #4	; (adr r2, 800123c <follow_line+0x14>)
 8001238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123c:	0800124d 	.word	0x0800124d
 8001240:	0800126b 	.word	0x0800126b
 8001244:	08001297 	.word	0x08001297
 8001248:	080012c3 	.word	0x080012c3
		{
		case 0: // 00
			moteur_droit(vitesse_moteurs, AVANT);
 800124c:	4b30      	ldr	r3, [pc, #192]	; (8001310 <follow_line+0xe8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	b29b      	uxth	r3, r3
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f000 f85f 	bl	8001318 <moteur_droit>
			moteur_gauche(vitesse_moteurs, AVANT);
 800125a:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <follow_line+0xe8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	b29b      	uxth	r3, r3
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f878 	bl	8001358 <moteur_gauche>
			break;
 8001268:	e045      	b.n	80012f6 <follow_line+0xce>
		case 1: // 01
			moteur_gauche(vitesse_moteurs, ARRIERE);
 800126a:	4b29      	ldr	r3, [pc, #164]	; (8001310 <follow_line+0xe8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	b29b      	uxth	r3, r3
 8001270:	2101      	movs	r1, #1
 8001272:	4618      	mov	r0, r3
 8001274:	f000 f870 	bl	8001358 <moteur_gauche>
			HAL_Delay(20);
 8001278:	2014      	movs	r0, #20
 800127a:	f000 fbdd 	bl	8001a38 <HAL_Delay>
			moteur_gauche(0, AVANT);
 800127e:	2100      	movs	r1, #0
 8001280:	2000      	movs	r0, #0
 8001282:	f000 f869 	bl	8001358 <moteur_gauche>
			moteur_droit(vitesse_moteurs, AVANT);
 8001286:	4b22      	ldr	r3, [pc, #136]	; (8001310 <follow_line+0xe8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	b29b      	uxth	r3, r3
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f842 	bl	8001318 <moteur_droit>
			break;
 8001294:	e02f      	b.n	80012f6 <follow_line+0xce>
		case 2: // 10
			moteur_droit(vitesse_moteurs, ARRIERE);
 8001296:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <follow_line+0xe8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	b29b      	uxth	r3, r3
 800129c:	2101      	movs	r1, #1
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f83a 	bl	8001318 <moteur_droit>
			HAL_Delay(20);
 80012a4:	2014      	movs	r0, #20
 80012a6:	f000 fbc7 	bl	8001a38 <HAL_Delay>
			moteur_droit(0, AVANT);
 80012aa:	2100      	movs	r1, #0
 80012ac:	2000      	movs	r0, #0
 80012ae:	f000 f833 	bl	8001318 <moteur_droit>
			moteur_gauche(vitesse_moteurs, AVANT);
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <follow_line+0xe8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f84c 	bl	8001358 <moteur_gauche>
			break;
 80012c0:	e019      	b.n	80012f6 <follow_line+0xce>
		case 3: // 11
			moteur_droit(0, AVANT);
 80012c2:	2100      	movs	r1, #0
 80012c4:	2000      	movs	r0, #0
 80012c6:	f000 f827 	bl	8001318 <moteur_droit>
			moteur_gauche(0, AVANT);
 80012ca:	2100      	movs	r1, #0
 80012cc:	2000      	movs	r0, #0
 80012ce:	f000 f843 	bl	8001358 <moteur_gauche>
			moving_state = 1;
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <follow_line+0xec>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	601a      	str	r2, [r3, #0]
			break;
 80012d8:	e00d      	b.n	80012f6 <follow_line+0xce>
		default:
			moteur_droit(vitesse_moteurs, ARRIERE);
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <follow_line+0xe8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	b29b      	uxth	r3, r3
 80012e0:	2101      	movs	r1, #1
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 f818 	bl	8001318 <moteur_droit>
			moteur_gauche(vitesse_moteurs, ARRIERE);
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <follow_line+0xe8>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	2101      	movs	r1, #1
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 f831 	bl	8001358 <moteur_gauche>
		}
		HAL_Delay(10);
 80012f6:	200a      	movs	r0, #10
 80012f8:	f000 fb9e 	bl	8001a38 <HAL_Delay>
	while (moving_state == 0)
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <follow_line+0xec>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d094      	beq.n	800122e <follow_line+0x6>
		//{
		//	moteur_droit(0, AVANT);
		//	moteur_gauche(0, AVANT);
		//}
	}
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000044 	.word	0x20000044
 8001310:	20000000 	.word	0x20000000
 8001314:	20000040 	.word	0x20000040

08001318 <moteur_droit>:

void moteur_droit(uint16_t speed, GPIO_PinState direction)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	460a      	mov	r2, r1
 8001322:	80fb      	strh	r3, [r7, #6]
 8001324:	4613      	mov	r3, r2
 8001326:	717b      	strb	r3, [r7, #5]
	PWM_TIM8_SET_PULSE(speed);
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f8e8 	bl	8001500 <PWM_TIM8_SET_PULSE>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001330:	2100      	movs	r1, #0
 8001332:	4807      	ldr	r0, [pc, #28]	; (8001350 <moteur_droit+0x38>)
 8001334:	f002 facc 	bl	80038d0 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, direction);
 8001338:	797b      	ldrb	r3, [r7, #5]
 800133a:	461a      	mov	r2, r3
 800133c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001340:	4804      	ldr	r0, [pc, #16]	; (8001354 <moteur_droit+0x3c>)
 8001342:	f000 fe71 	bl	8002028 <HAL_GPIO_WritePin>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000048 	.word	0x20000048
 8001354:	48000400 	.word	0x48000400

08001358 <moteur_gauche>:

void moteur_gauche(uint16_t speed, GPIO_PinState direction)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	460a      	mov	r2, r1
 8001362:	80fb      	strh	r3, [r7, #6]
 8001364:	4613      	mov	r3, r2
 8001366:	717b      	strb	r3, [r7, #5]
	PWM_TIM3_SET_PULSE(speed);
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f89a 	bl	80014a4 <PWM_TIM3_SET_PULSE>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001370:	2108      	movs	r1, #8
 8001372:	4807      	ldr	r0, [pc, #28]	; (8001390 <moteur_gauche+0x38>)
 8001374:	f002 faac 	bl	80038d0 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, direction);
 8001378:	797b      	ldrb	r3, [r7, #5]
 800137a:	461a      	mov	r2, r3
 800137c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001380:	4804      	ldr	r0, [pc, #16]	; (8001394 <moteur_gauche+0x3c>)
 8001382:	f000 fe51 	bl	8002028 <HAL_GPIO_WritePin>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000094 	.word	0x20000094
 8001394:	48000400 	.word	0x48000400

08001398 <HAL_GPIO_EXTI_Callback>:
	while (fin - debut < 10);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	80fb      	strh	r3, [r7, #6]
	int etat_gauche = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11);
 80013a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013aa:	f000 fe25 	bl	8001ff8 <HAL_GPIO_ReadPin>
 80013ae:	4603      	mov	r3, r0
 80013b0:	60fb      	str	r3, [r7, #12]
	int etat_droit = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12);
 80013b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ba:	f000 fe1d 	bl	8001ff8 <HAL_GPIO_ReadPin>
 80013be:	4603      	mov	r3, r0
 80013c0:	60bb      	str	r3, [r7, #8]

	sensor_state = 0;
 80013c2:	4b29      	ldr	r3, [pc, #164]	; (8001468 <HAL_GPIO_EXTI_Callback+0xd0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
	sensor_state += etat_gauche ? 1 : 0; // Sensor Gauche
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	bf14      	ite	ne
 80013ce:	2301      	movne	r3, #1
 80013d0:	2300      	moveq	r3, #0
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b24      	ldr	r3, [pc, #144]	; (8001468 <HAL_GPIO_EXTI_Callback+0xd0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4413      	add	r3, r2
 80013dc:	4a22      	ldr	r2, [pc, #136]	; (8001468 <HAL_GPIO_EXTI_Callback+0xd0>)
 80013de:	6013      	str	r3, [r2, #0]
	sensor_state += etat_droit ? 2 : 0; // Sensor Droit
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_GPIO_EXTI_Callback+0x52>
 80013e6:	2202      	movs	r2, #2
 80013e8:	e000      	b.n	80013ec <HAL_GPIO_EXTI_Callback+0x54>
 80013ea:	2200      	movs	r2, #0
 80013ec:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <HAL_GPIO_EXTI_Callback+0xd0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4413      	add	r3, r2
 80013f2:	4a1d      	ldr	r2, [pc, #116]	; (8001468 <HAL_GPIO_EXTI_Callback+0xd0>)
 80013f4:	6013      	str	r3, [r2, #0]

	// if (GPIO_Pin != 1) return; // Condition si la pin du SONAR !

	if ( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 1 )
 80013f6:	2101      	movs	r1, #1
 80013f8:	481c      	ldr	r0, [pc, #112]	; (800146c <HAL_GPIO_EXTI_Callback+0xd4>)
 80013fa:	f000 fdfd 	bl	8001ff8 <HAL_GPIO_ReadPin>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b01      	cmp	r3, #1
 8001402:	d106      	bne.n	8001412 <HAL_GPIO_EXTI_Callback+0x7a>
	{
		debut = __HAL_TIM_GET_COUNTER(&htim7);
 8001404:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140a:	b29a      	uxth	r2, r3
 800140c:	4b19      	ldr	r3, [pc, #100]	; (8001474 <HAL_GPIO_EXTI_Callback+0xdc>)
 800140e:	801a      	strh	r2, [r3, #0]

		//Calcul apres reception signal :
		ecart_temps = fin - debut;
		distance = ecart_temps * 0.17;  //distance en mm
	}
}
 8001410:	e021      	b.n	8001456 <HAL_GPIO_EXTI_Callback+0xbe>
		fin = __HAL_TIM_GET_COUNTER(&htim7);
 8001412:	4b17      	ldr	r3, [pc, #92]	; (8001470 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001418:	b29a      	uxth	r2, r3
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <HAL_GPIO_EXTI_Callback+0xe0>)
 800141c:	801a      	strh	r2, [r3, #0]
		ecart_temps = fin - debut;
 800141e:	4b16      	ldr	r3, [pc, #88]	; (8001478 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001420:	881a      	ldrh	r2, [r3, #0]
 8001422:	4b14      	ldr	r3, [pc, #80]	; (8001474 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001424:	881b      	ldrh	r3, [r3, #0]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	b29a      	uxth	r2, r3
 800142a:	4b14      	ldr	r3, [pc, #80]	; (800147c <HAL_GPIO_EXTI_Callback+0xe4>)
 800142c:	801a      	strh	r2, [r3, #0]
		distance = ecart_temps * 0.17;  //distance en mm
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <HAL_GPIO_EXTI_Callback+0xe4>)
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f944 	bl	80006c0 <__aeabi_i2d>
 8001438:	a309      	add	r3, pc, #36	; (adr r3, 8001460 <HAL_GPIO_EXTI_Callback+0xc8>)
 800143a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143e:	f7fe fec3 	bl	80001c8 <__aeabi_dmul>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4610      	mov	r0, r2
 8001448:	4619      	mov	r1, r3
 800144a:	f7ff f9a3 	bl	8000794 <__aeabi_d2uiz>
 800144e:	4603      	mov	r3, r0
 8001450:	b29a      	uxth	r2, r3
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001454:	801a      	strh	r2, [r3, #0]
}
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	5c28f5c3 	.word	0x5c28f5c3
 8001464:	3fc5c28f 	.word	0x3fc5c28f
 8001468:	20000044 	.word	0x20000044
 800146c:	48000800 	.word	0x48000800
 8001470:	200001b0 	.word	0x200001b0
 8001474:	20000038 	.word	0x20000038
 8001478:	2000003a 	.word	0x2000003a
 800147c:	20000034 	.word	0x20000034
 8001480:	20000036 	.word	0x20000036

08001484 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	sonar_launch = 1;
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800148e:	2201      	movs	r2, #1
 8001490:	601a      	str	r2, [r3, #0]
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	2000003c 	.word	0x2000003c

080014a4 <PWM_TIM3_SET_PULSE>:

void PWM_TIM3_SET_PULSE(uint16_t newPulse)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	; 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80014ae:	2108      	movs	r1, #8
 80014b0:	4812      	ldr	r0, [pc, #72]	; (80014fc <PWM_TIM3_SET_PULSE+0x58>)
 80014b2:	f002 fb13 	bl	8003adc <HAL_TIM_PWM_Stop>

	TIM_OC_InitTypeDef sConfigOC = {0};
 80014b6:	f107 030c 	add.w	r3, r7, #12
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]
 80014c6:	615a      	str	r2, [r3, #20]
 80014c8:	619a      	str	r2, [r3, #24]

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ca:	2360      	movs	r3, #96	; 0x60
 80014cc:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = newPulse;
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014da:	f107 030c 	add.w	r3, r7, #12
 80014de:	2208      	movs	r2, #8
 80014e0:	4619      	mov	r1, r3
 80014e2:	4806      	ldr	r0, [pc, #24]	; (80014fc <PWM_TIM3_SET_PULSE+0x58>)
 80014e4:	f002 fcb0 	bl	8003e48 <HAL_TIM_PWM_ConfigChannel>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <PWM_TIM3_SET_PULSE+0x4e>
	{
	    Error_Handler();
 80014ee:	f000 f83b 	bl	8001568 <Error_Handler>
	}
}
 80014f2:	bf00      	nop
 80014f4:	3728      	adds	r7, #40	; 0x28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000094 	.word	0x20000094

08001500 <PWM_TIM8_SET_PULSE>:

void PWM_TIM8_SET_PULSE(uint16_t newPulse)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 800150a:	2100      	movs	r1, #0
 800150c:	4815      	ldr	r0, [pc, #84]	; (8001564 <PWM_TIM8_SET_PULSE+0x64>)
 800150e:	f002 fae5 	bl	8003adc <HAL_TIM_PWM_Stop>

	TIM_OC_InitTypeDef sConfigOC = {0};
 8001512:	f107 030c 	add.w	r3, r7, #12
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]
 8001522:	615a      	str	r2, [r3, #20]
 8001524:	619a      	str	r2, [r3, #24]

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001526:	2360      	movs	r3, #96	; 0x60
 8001528:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = newPulse;
 800152a:	88fb      	ldrh	r3, [r7, #6]
 800152c:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001532:	2300      	movs	r3, #0
 8001534:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001542:	f107 030c 	add.w	r3, r7, #12
 8001546:	2200      	movs	r2, #0
 8001548:	4619      	mov	r1, r3
 800154a:	4806      	ldr	r0, [pc, #24]	; (8001564 <PWM_TIM8_SET_PULSE+0x64>)
 800154c:	f002 fc7c 	bl	8003e48 <HAL_TIM_PWM_ConfigChannel>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <PWM_TIM8_SET_PULSE+0x5a>
	{
	    Error_Handler();
 8001556:	f000 f807 	bl	8001568 <Error_Handler>
	}
}
 800155a:	bf00      	nop
 800155c:	3728      	adds	r7, #40	; 0x28
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000048 	.word	0x20000048

08001568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800156c:	b672      	cpsid	i
}
 800156e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001570:	e7fe      	b.n	8001570 <Error_Handler+0x8>
	...

08001574 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157a:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <HAL_MspInit+0x44>)
 800157c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157e:	4a0e      	ldr	r2, [pc, #56]	; (80015b8 <HAL_MspInit+0x44>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6613      	str	r3, [r2, #96]	; 0x60
 8001586:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <HAL_MspInit+0x44>)
 8001588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <HAL_MspInit+0x44>)
 8001594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001596:	4a08      	ldr	r2, [pc, #32]	; (80015b8 <HAL_MspInit+0x44>)
 8001598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800159c:	6593      	str	r3, [r2, #88]	; 0x58
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_MspInit+0x44>)
 80015a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000

080015bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a13      	ldr	r2, [pc, #76]	; (8001618 <HAL_TIM_PWM_MspInit+0x5c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d10c      	bne.n	80015e8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <HAL_TIM_PWM_MspInit+0x60>)
 80015d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d2:	4a12      	ldr	r2, [pc, #72]	; (800161c <HAL_TIM_PWM_MspInit+0x60>)
 80015d4:	f043 0302 	orr.w	r3, r3, #2
 80015d8:	6593      	str	r3, [r2, #88]	; 0x58
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <HAL_TIM_PWM_MspInit+0x60>)
 80015dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80015e6:	e010      	b.n	800160a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM8)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a0c      	ldr	r2, [pc, #48]	; (8001620 <HAL_TIM_PWM_MspInit+0x64>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d10b      	bne.n	800160a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <HAL_TIM_PWM_MspInit+0x60>)
 80015f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f6:	4a09      	ldr	r2, [pc, #36]	; (800161c <HAL_TIM_PWM_MspInit+0x60>)
 80015f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015fc:	6613      	str	r3, [r2, #96]	; 0x60
 80015fe:	4b07      	ldr	r3, [pc, #28]	; (800161c <HAL_TIM_PWM_MspInit+0x60>)
 8001600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001602:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
}
 800160a:	bf00      	nop
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40000400 	.word	0x40000400
 800161c:	40021000 	.word	0x40021000
 8001620:	40013400 	.word	0x40013400

08001624 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a16      	ldr	r2, [pc, #88]	; (800168c <HAL_TIM_Base_MspInit+0x68>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d114      	bne.n	8001660 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001636:	4b16      	ldr	r3, [pc, #88]	; (8001690 <HAL_TIM_Base_MspInit+0x6c>)
 8001638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163a:	4a15      	ldr	r2, [pc, #84]	; (8001690 <HAL_TIM_Base_MspInit+0x6c>)
 800163c:	f043 0310 	orr.w	r3, r3, #16
 8001640:	6593      	str	r3, [r2, #88]	; 0x58
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <HAL_TIM_Base_MspInit+0x6c>)
 8001644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001646:	f003 0310 	and.w	r3, r3, #16
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	2036      	movs	r0, #54	; 0x36
 8001654:	f000 faef 	bl	8001c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001658:	2036      	movs	r0, #54	; 0x36
 800165a:	f000 fb08 	bl	8001c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800165e:	e010      	b.n	8001682 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0b      	ldr	r2, [pc, #44]	; (8001694 <HAL_TIM_Base_MspInit+0x70>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d10b      	bne.n	8001682 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <HAL_TIM_Base_MspInit+0x6c>)
 800166c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166e:	4a08      	ldr	r2, [pc, #32]	; (8001690 <HAL_TIM_Base_MspInit+0x6c>)
 8001670:	f043 0320 	orr.w	r3, r3, #32
 8001674:	6593      	str	r3, [r2, #88]	; 0x58
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_TIM_Base_MspInit+0x6c>)
 8001678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167a:	f003 0320 	and.w	r3, r3, #32
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
}
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40001000 	.word	0x40001000
 8001690:	40021000 	.word	0x40021000
 8001694:	40001400 	.word	0x40001400

08001698 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a22      	ldr	r2, [pc, #136]	; (8001740 <HAL_TIM_MspPostInit+0xa8>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d11d      	bne.n	80016f6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ba:	4b22      	ldr	r3, [pc, #136]	; (8001744 <HAL_TIM_MspPostInit+0xac>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	4a21      	ldr	r2, [pc, #132]	; (8001744 <HAL_TIM_MspPostInit+0xac>)
 80016c0:	f043 0304 	orr.w	r3, r3, #4
 80016c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c6:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <HAL_TIM_MspPostInit+0xac>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016e4:	2302      	movs	r3, #2
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	4816      	ldr	r0, [pc, #88]	; (8001748 <HAL_TIM_MspPostInit+0xb0>)
 80016f0:	f000 fad8 	bl	8001ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80016f4:	e020      	b.n	8001738 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a14      	ldr	r2, [pc, #80]	; (800174c <HAL_TIM_MspPostInit+0xb4>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d11b      	bne.n	8001738 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001700:	4b10      	ldr	r3, [pc, #64]	; (8001744 <HAL_TIM_MspPostInit+0xac>)
 8001702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001704:	4a0f      	ldr	r2, [pc, #60]	; (8001744 <HAL_TIM_MspPostInit+0xac>)
 8001706:	f043 0304 	orr.w	r3, r3, #4
 800170a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170c:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <HAL_TIM_MspPostInit+0xac>)
 800170e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001718:	2340      	movs	r3, #64	; 0x40
 800171a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001728:	2303      	movs	r3, #3
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4619      	mov	r1, r3
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <HAL_TIM_MspPostInit+0xb0>)
 8001734:	f000 fab6 	bl	8001ca4 <HAL_GPIO_Init>
}
 8001738:	bf00      	nop
 800173a:	3728      	adds	r7, #40	; 0x28
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40000400 	.word	0x40000400
 8001744:	40021000 	.word	0x40021000
 8001748:	48000800 	.word	0x48000800
 800174c:	40013400 	.word	0x40013400

08001750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b0ac      	sub	sp, #176	; 0xb0
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2288      	movs	r2, #136	; 0x88
 800176e:	2100      	movs	r1, #0
 8001770:	4618      	mov	r0, r3
 8001772:	f003 fdbf 	bl	80052f4 <memset>
  if(huart->Instance==UART4)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a21      	ldr	r2, [pc, #132]	; (8001800 <HAL_UART_MspInit+0xb0>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d13b      	bne.n	80017f8 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001780:	2308      	movs	r3, #8
 8001782:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001784:	2300      	movs	r3, #0
 8001786:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4618      	mov	r0, r3
 800178e:	f001 facb 	bl	8002d28 <HAL_RCCEx_PeriphCLKConfig>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001798:	f7ff fee6 	bl	8001568 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <HAL_UART_MspInit+0xb4>)
 800179e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a0:	4a18      	ldr	r2, [pc, #96]	; (8001804 <HAL_UART_MspInit+0xb4>)
 80017a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017a6:	6593      	str	r3, [r2, #88]	; 0x58
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <HAL_UART_MspInit+0xb4>)
 80017aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <HAL_UART_MspInit+0xb4>)
 80017b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b8:	4a12      	ldr	r2, [pc, #72]	; (8001804 <HAL_UART_MspInit+0xb4>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c0:	4b10      	ldr	r3, [pc, #64]	; (8001804 <HAL_UART_MspInit+0xb4>)
 80017c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017cc:	2303      	movs	r3, #3
 80017ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	2302      	movs	r3, #2
 80017d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017de:	2303      	movs	r3, #3
 80017e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017e4:	2308      	movs	r3, #8
 80017e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017ee:	4619      	mov	r1, r3
 80017f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f4:	f000 fa56 	bl	8001ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80017f8:	bf00      	nop
 80017fa:	37b0      	adds	r7, #176	; 0xb0
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40004c00 	.word	0x40004c00
 8001804:	40021000 	.word	0x40021000

08001808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800180c:	e7fe      	b.n	800180c <NMI_Handler+0x4>

0800180e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001812:	e7fe      	b.n	8001812 <HardFault_Handler+0x4>

08001814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <MemManage_Handler+0x4>

0800181a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181e:	e7fe      	b.n	800181e <BusFault_Handler+0x4>

08001820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <UsageFault_Handler+0x4>

08001826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001854:	f000 f8d0 	bl	80019f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}

0800185c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001860:	2001      	movs	r0, #1
 8001862:	f000 fbf9 	bl	8002058 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}

0800186a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800186e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001872:	f000 fbf1 	bl	8002058 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001876:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800187a:	f000 fbed 	bl	8002058 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001888:	4802      	ldr	r0, [pc, #8]	; (8001894 <TIM6_DAC_IRQHandler+0x10>)
 800188a:	f002 f9bd 	bl	8003c08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	200000e0 	.word	0x200000e0

08001898 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <SystemInit+0x5c>)
 800189e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018a2:	4a14      	ldr	r2, [pc, #80]	; (80018f4 <SystemInit+0x5c>)
 80018a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <SystemInit+0x60>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a11      	ldr	r2, [pc, #68]	; (80018f8 <SystemInit+0x60>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <SystemInit+0x60>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <SystemInit+0x60>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a0d      	ldr	r2, [pc, #52]	; (80018f8 <SystemInit+0x60>)
 80018c4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80018c8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80018cc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <SystemInit+0x60>)
 80018d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018d4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018d6:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <SystemInit+0x60>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a07      	ldr	r2, [pc, #28]	; (80018f8 <SystemInit+0x60>)
 80018dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80018e2:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <SystemInit+0x60>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000ed00 	.word	0xe000ed00
 80018f8:	40021000 	.word	0x40021000

080018fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001934 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001900:	f7ff ffca 	bl	8001898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001904:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001906:	e003      	b.n	8001910 <LoopCopyDataInit>

08001908 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800190a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800190c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800190e:	3104      	adds	r1, #4

08001910 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001910:	480a      	ldr	r0, [pc, #40]	; (800193c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001914:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001916:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001918:	d3f6      	bcc.n	8001908 <CopyDataInit>
	ldr	r2, =_sbss
 800191a:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <LoopForever+0x12>)
	b	LoopFillZerobss
 800191c:	e002      	b.n	8001924 <LoopFillZerobss>

0800191e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800191e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001920:	f842 3b04 	str.w	r3, [r2], #4

08001924 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <LoopForever+0x16>)
	cmp	r2, r3
 8001926:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001928:	d3f9      	bcc.n	800191e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800192a:	f003 fcbf 	bl	80052ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800192e:	f7ff f8cd 	bl	8000acc <main>

08001932 <LoopForever>:

LoopForever:
    b LoopForever
 8001932:	e7fe      	b.n	8001932 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001934:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001938:	08005374 	.word	0x08005374
	ldr	r0, =_sdata
 800193c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001940:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8001944:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8001948:	20000200 	.word	0x20000200

0800194c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800194c:	e7fe      	b.n	800194c <ADC1_2_IRQHandler>

0800194e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001958:	2003      	movs	r0, #3
 800195a:	f000 f961 	bl	8001c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800195e:	200f      	movs	r0, #15
 8001960:	f000 f80e 	bl	8001980 <HAL_InitTick>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d002      	beq.n	8001970 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	71fb      	strb	r3, [r7, #7]
 800196e:	e001      	b.n	8001974 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001970:	f7ff fe00 	bl	8001574 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001974:	79fb      	ldrb	r3, [r7, #7]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001988:	2300      	movs	r3, #0
 800198a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800198c:	4b17      	ldr	r3, [pc, #92]	; (80019ec <HAL_InitTick+0x6c>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d023      	beq.n	80019dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001994:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <HAL_InitTick+0x70>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b14      	ldr	r3, [pc, #80]	; (80019ec <HAL_InitTick+0x6c>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	4619      	mov	r1, r3
 800199e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 f96d 	bl	8001c8a <HAL_SYSTICK_Config>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10f      	bne.n	80019d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b0f      	cmp	r3, #15
 80019ba:	d809      	bhi.n	80019d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019bc:	2200      	movs	r2, #0
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019c4:	f000 f937 	bl	8001c36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019c8:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <HAL_InitTick+0x74>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e007      	b.n	80019e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	73fb      	strb	r3, [r7, #15]
 80019d4:	e004      	b.n	80019e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	73fb      	strb	r3, [r7, #15]
 80019da:	e001      	b.n	80019e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000014 	.word	0x20000014
 80019f0:	2000000c 	.word	0x2000000c
 80019f4:	20000010 	.word	0x20000010

080019f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_IncTick+0x20>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_IncTick+0x24>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <HAL_IncTick+0x24>)
 8001a0a:	6013      	str	r3, [r2, #0]
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	20000014 	.word	0x20000014
 8001a1c:	200001fc 	.word	0x200001fc

08001a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return uwTick;
 8001a24:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <HAL_GetTick+0x14>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	200001fc 	.word	0x200001fc

08001a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a40:	f7ff ffee 	bl	8001a20 <HAL_GetTick>
 8001a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a50:	d005      	beq.n	8001a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_Delay+0x44>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a5e:	bf00      	nop
 8001a60:	f7ff ffde 	bl	8001a20 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d8f7      	bhi.n	8001a60 <HAL_Delay+0x28>
  {
  }
}
 8001a70:	bf00      	nop
 8001a72:	bf00      	nop
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000014 	.word	0x20000014

08001a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ab2:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	60d3      	str	r3, [r2, #12]
}
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	0a1b      	lsrs	r3, r3, #8
 8001ad2:	f003 0307 	and.w	r3, r3, #7
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	db0b      	blt.n	8001b0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	f003 021f 	and.w	r2, r3, #31
 8001afc:	4907      	ldr	r1, [pc, #28]	; (8001b1c <__NVIC_EnableIRQ+0x38>)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	095b      	lsrs	r3, r3, #5
 8001b04:	2001      	movs	r0, #1
 8001b06:	fa00 f202 	lsl.w	r2, r0, r2
 8001b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000e100 	.word	0xe000e100

08001b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	6039      	str	r1, [r7, #0]
 8001b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	db0a      	blt.n	8001b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	490c      	ldr	r1, [pc, #48]	; (8001b6c <__NVIC_SetPriority+0x4c>)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	0112      	lsls	r2, r2, #4
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	440b      	add	r3, r1
 8001b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b48:	e00a      	b.n	8001b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4908      	ldr	r1, [pc, #32]	; (8001b70 <__NVIC_SetPriority+0x50>)
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	3b04      	subs	r3, #4
 8001b58:	0112      	lsls	r2, r2, #4
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	761a      	strb	r2, [r3, #24]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000e100 	.word	0xe000e100
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	; 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f1c3 0307 	rsb	r3, r3, #7
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	bf28      	it	cs
 8001b92:	2304      	movcs	r3, #4
 8001b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	2b06      	cmp	r3, #6
 8001b9c:	d902      	bls.n	8001ba4 <NVIC_EncodePriority+0x30>
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3b03      	subs	r3, #3
 8001ba2:	e000      	b.n	8001ba6 <NVIC_EncodePriority+0x32>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc6:	43d9      	mvns	r1, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	4313      	orrs	r3, r2
         );
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3724      	adds	r7, #36	; 0x24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bec:	d301      	bcc.n	8001bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e00f      	b.n	8001c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <SysTick_Config+0x40>)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bfa:	210f      	movs	r1, #15
 8001bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c00:	f7ff ff8e 	bl	8001b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <SysTick_Config+0x40>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c0a:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <SysTick_Config+0x40>)
 8001c0c:	2207      	movs	r2, #7
 8001c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	e000e010 	.word	0xe000e010

08001c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff ff29 	bl	8001a80 <__NVIC_SetPriorityGrouping>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b086      	sub	sp, #24
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	607a      	str	r2, [r7, #4]
 8001c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c48:	f7ff ff3e 	bl	8001ac8 <__NVIC_GetPriorityGrouping>
 8001c4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	68b9      	ldr	r1, [r7, #8]
 8001c52:	6978      	ldr	r0, [r7, #20]
 8001c54:	f7ff ff8e 	bl	8001b74 <NVIC_EncodePriority>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5e:	4611      	mov	r1, r2
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff5d 	bl	8001b20 <__NVIC_SetPriority>
}
 8001c66:	bf00      	nop
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	4603      	mov	r3, r0
 8001c76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff31 	bl	8001ae4 <__NVIC_EnableIRQ>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff ffa2 	bl	8001bdc <SysTick_Config>
 8001c98:	4603      	mov	r3, r0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b087      	sub	sp, #28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb2:	e17f      	b.n	8001fb4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2101      	movs	r1, #1
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 8171 	beq.w	8001fae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d00b      	beq.n	8001cec <HAL_GPIO_Init+0x48>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d007      	beq.n	8001cec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ce0:	2b11      	cmp	r3, #17
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b12      	cmp	r3, #18
 8001cea:	d130      	bne.n	8001d4e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d22:	2201      	movs	r2, #1
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	091b      	lsrs	r3, r3, #4
 8001d38:	f003 0201 	and.w	r2, r3, #1
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	2b03      	cmp	r3, #3
 8001d58:	d118      	bne.n	8001d8c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d60:	2201      	movs	r2, #1
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	08db      	lsrs	r3, r3, #3
 8001d76:	f003 0201 	and.w	r2, r3, #1
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x128>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b12      	cmp	r3, #18
 8001dca:	d123      	bne.n	8001e14 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	08da      	lsrs	r2, r3, #3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3208      	adds	r2, #8
 8001dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	220f      	movs	r2, #15
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4013      	ands	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	691a      	ldr	r2, [r3, #16]
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	08da      	lsrs	r2, r3, #3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3208      	adds	r2, #8
 8001e0e:	6939      	ldr	r1, [r7, #16]
 8001e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	2203      	movs	r2, #3
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 0203 	and.w	r2, r3, #3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 80ac 	beq.w	8001fae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e56:	4b5f      	ldr	r3, [pc, #380]	; (8001fd4 <HAL_GPIO_Init+0x330>)
 8001e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e5a:	4a5e      	ldr	r2, [pc, #376]	; (8001fd4 <HAL_GPIO_Init+0x330>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6613      	str	r3, [r2, #96]	; 0x60
 8001e62:	4b5c      	ldr	r3, [pc, #368]	; (8001fd4 <HAL_GPIO_Init+0x330>)
 8001e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e6e:	4a5a      	ldr	r2, [pc, #360]	; (8001fd8 <HAL_GPIO_Init+0x334>)
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	3302      	adds	r3, #2
 8001e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	220f      	movs	r2, #15
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e98:	d025      	beq.n	8001ee6 <HAL_GPIO_Init+0x242>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a4f      	ldr	r2, [pc, #316]	; (8001fdc <HAL_GPIO_Init+0x338>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d01f      	beq.n	8001ee2 <HAL_GPIO_Init+0x23e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a4e      	ldr	r2, [pc, #312]	; (8001fe0 <HAL_GPIO_Init+0x33c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d019      	beq.n	8001ede <HAL_GPIO_Init+0x23a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4d      	ldr	r2, [pc, #308]	; (8001fe4 <HAL_GPIO_Init+0x340>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d013      	beq.n	8001eda <HAL_GPIO_Init+0x236>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a4c      	ldr	r2, [pc, #304]	; (8001fe8 <HAL_GPIO_Init+0x344>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d00d      	beq.n	8001ed6 <HAL_GPIO_Init+0x232>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4b      	ldr	r2, [pc, #300]	; (8001fec <HAL_GPIO_Init+0x348>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d007      	beq.n	8001ed2 <HAL_GPIO_Init+0x22e>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a4a      	ldr	r2, [pc, #296]	; (8001ff0 <HAL_GPIO_Init+0x34c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d101      	bne.n	8001ece <HAL_GPIO_Init+0x22a>
 8001eca:	2306      	movs	r3, #6
 8001ecc:	e00c      	b.n	8001ee8 <HAL_GPIO_Init+0x244>
 8001ece:	2307      	movs	r3, #7
 8001ed0:	e00a      	b.n	8001ee8 <HAL_GPIO_Init+0x244>
 8001ed2:	2305      	movs	r3, #5
 8001ed4:	e008      	b.n	8001ee8 <HAL_GPIO_Init+0x244>
 8001ed6:	2304      	movs	r3, #4
 8001ed8:	e006      	b.n	8001ee8 <HAL_GPIO_Init+0x244>
 8001eda:	2303      	movs	r3, #3
 8001edc:	e004      	b.n	8001ee8 <HAL_GPIO_Init+0x244>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e002      	b.n	8001ee8 <HAL_GPIO_Init+0x244>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <HAL_GPIO_Init+0x244>
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	f002 0203 	and.w	r2, r2, #3
 8001eee:	0092      	lsls	r2, r2, #2
 8001ef0:	4093      	lsls	r3, r2
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ef8:	4937      	ldr	r1, [pc, #220]	; (8001fd8 <HAL_GPIO_Init+0x334>)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	089b      	lsrs	r3, r3, #2
 8001efe:	3302      	adds	r3, #2
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f06:	4b3b      	ldr	r3, [pc, #236]	; (8001ff4 <HAL_GPIO_Init+0x350>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f2a:	4a32      	ldr	r2, [pc, #200]	; (8001ff4 <HAL_GPIO_Init+0x350>)
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f30:	4b30      	ldr	r3, [pc, #192]	; (8001ff4 <HAL_GPIO_Init+0x350>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f54:	4a27      	ldr	r2, [pc, #156]	; (8001ff4 <HAL_GPIO_Init+0x350>)
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f5a:	4b26      	ldr	r3, [pc, #152]	; (8001ff4 <HAL_GPIO_Init+0x350>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f7e:	4a1d      	ldr	r2, [pc, #116]	; (8001ff4 <HAL_GPIO_Init+0x350>)
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f84:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <HAL_GPIO_Init+0x350>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fa8:	4a12      	ldr	r2, [pc, #72]	; (8001ff4 <HAL_GPIO_Init+0x350>)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	fa22 f303 	lsr.w	r3, r2, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f47f ae78 	bne.w	8001cb4 <HAL_GPIO_Init+0x10>
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop
 8001fc8:	371c      	adds	r7, #28
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40010000 	.word	0x40010000
 8001fdc:	48000400 	.word	0x48000400
 8001fe0:	48000800 	.word	0x48000800
 8001fe4:	48000c00 	.word	0x48000c00
 8001fe8:	48001000 	.word	0x48001000
 8001fec:	48001400 	.word	0x48001400
 8001ff0:	48001800 	.word	0x48001800
 8001ff4:	40010400 	.word	0x40010400

08001ff8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	887b      	ldrh	r3, [r7, #2]
 800200a:	4013      	ands	r3, r2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002010:	2301      	movs	r3, #1
 8002012:	73fb      	strb	r3, [r7, #15]
 8002014:	e001      	b.n	800201a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002016:	2300      	movs	r3, #0
 8002018:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800201a:	7bfb      	ldrb	r3, [r7, #15]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	807b      	strh	r3, [r7, #2]
 8002034:	4613      	mov	r3, r2
 8002036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002038:	787b      	ldrb	r3, [r7, #1]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800203e:	887a      	ldrh	r2, [r7, #2]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002044:	e002      	b.n	800204c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002046:	887a      	ldrh	r2, [r7, #2]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002062:	4b08      	ldr	r3, [pc, #32]	; (8002084 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002064:	695a      	ldr	r2, [r3, #20]
 8002066:	88fb      	ldrh	r3, [r7, #6]
 8002068:	4013      	ands	r3, r2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d006      	beq.n	800207c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800206e:	4a05      	ldr	r2, [pc, #20]	; (8002084 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002070:	88fb      	ldrh	r3, [r7, #6]
 8002072:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002074:	88fb      	ldrh	r3, [r7, #6]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff f98e 	bl	8001398 <HAL_GPIO_EXTI_Callback>
  }
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40010400 	.word	0x40010400

08002088 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800208c:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002094:	4618      	mov	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40007000 	.word	0x40007000

080020a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020b2:	d130      	bne.n	8002116 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020b4:	4b23      	ldr	r3, [pc, #140]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020c0:	d038      	beq.n	8002134 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020c2:	4b20      	ldr	r3, [pc, #128]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020ca:	4a1e      	ldr	r2, [pc, #120]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020d2:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2232      	movs	r2, #50	; 0x32
 80020d8:	fb02 f303 	mul.w	r3, r2, r3
 80020dc:	4a1b      	ldr	r2, [pc, #108]	; (800214c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	0c9b      	lsrs	r3, r3, #18
 80020e4:	3301      	adds	r3, #1
 80020e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020e8:	e002      	b.n	80020f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	3b01      	subs	r3, #1
 80020ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020f0:	4b14      	ldr	r3, [pc, #80]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020fc:	d102      	bne.n	8002104 <HAL_PWREx_ControlVoltageScaling+0x60>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1f2      	bne.n	80020ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002104:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002110:	d110      	bne.n	8002134 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e00f      	b.n	8002136 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002116:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800211e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002122:	d007      	beq.n	8002134 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002124:	4b07      	ldr	r3, [pc, #28]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800212c:	4a05      	ldr	r2, [pc, #20]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800212e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002132:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40007000 	.word	0x40007000
 8002148:	2000000c 	.word	0x2000000c
 800214c:	431bde83 	.word	0x431bde83

08002150 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e3d4      	b.n	800290c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002162:	4ba1      	ldr	r3, [pc, #644]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800216c:	4b9e      	ldr	r3, [pc, #632]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80e4 	beq.w	800234c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d007      	beq.n	800219a <HAL_RCC_OscConfig+0x4a>
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	2b0c      	cmp	r3, #12
 800218e:	f040 808b 	bne.w	80022a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	2b01      	cmp	r3, #1
 8002196:	f040 8087 	bne.w	80022a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800219a:	4b93      	ldr	r3, [pc, #588]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d005      	beq.n	80021b2 <HAL_RCC_OscConfig+0x62>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e3ac      	b.n	800290c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1a      	ldr	r2, [r3, #32]
 80021b6:	4b8c      	ldr	r3, [pc, #560]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d004      	beq.n	80021cc <HAL_RCC_OscConfig+0x7c>
 80021c2:	4b89      	ldr	r3, [pc, #548]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021ca:	e005      	b.n	80021d8 <HAL_RCC_OscConfig+0x88>
 80021cc:	4b86      	ldr	r3, [pc, #536]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80021ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d2:	091b      	lsrs	r3, r3, #4
 80021d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021d8:	4293      	cmp	r3, r2
 80021da:	d223      	bcs.n	8002224 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 fd41 	bl	8002c68 <RCC_SetFlashLatencyFromMSIRange>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e38d      	b.n	800290c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021f0:	4b7d      	ldr	r3, [pc, #500]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a7c      	ldr	r2, [pc, #496]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80021f6:	f043 0308 	orr.w	r3, r3, #8
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	4b7a      	ldr	r3, [pc, #488]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	4977      	ldr	r1, [pc, #476]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 800220a:	4313      	orrs	r3, r2
 800220c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800220e:	4b76      	ldr	r3, [pc, #472]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	021b      	lsls	r3, r3, #8
 800221c:	4972      	ldr	r1, [pc, #456]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 800221e:	4313      	orrs	r3, r2
 8002220:	604b      	str	r3, [r1, #4]
 8002222:	e025      	b.n	8002270 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002224:	4b70      	ldr	r3, [pc, #448]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a6f      	ldr	r2, [pc, #444]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 800222a:	f043 0308 	orr.w	r3, r3, #8
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	4b6d      	ldr	r3, [pc, #436]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	496a      	ldr	r1, [pc, #424]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 800223e:	4313      	orrs	r3, r2
 8002240:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002242:	4b69      	ldr	r3, [pc, #420]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	021b      	lsls	r3, r3, #8
 8002250:	4965      	ldr	r1, [pc, #404]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 8002252:	4313      	orrs	r3, r2
 8002254:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d109      	bne.n	8002270 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	4618      	mov	r0, r3
 8002262:	f000 fd01 	bl	8002c68 <RCC_SetFlashLatencyFromMSIRange>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e34d      	b.n	800290c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002270:	f000 fc36 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8002274:	4602      	mov	r2, r0
 8002276:	4b5c      	ldr	r3, [pc, #368]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	091b      	lsrs	r3, r3, #4
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	495a      	ldr	r1, [pc, #360]	; (80023ec <HAL_RCC_OscConfig+0x29c>)
 8002282:	5ccb      	ldrb	r3, [r1, r3]
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
 800228c:	4a58      	ldr	r2, [pc, #352]	; (80023f0 <HAL_RCC_OscConfig+0x2a0>)
 800228e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002290:	4b58      	ldr	r3, [pc, #352]	; (80023f4 <HAL_RCC_OscConfig+0x2a4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff fb73 	bl	8001980 <HAL_InitTick>
 800229a:	4603      	mov	r3, r0
 800229c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800229e:	7bfb      	ldrb	r3, [r7, #15]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d052      	beq.n	800234a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
 80022a6:	e331      	b.n	800290c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d032      	beq.n	8002316 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022b0:	4b4d      	ldr	r3, [pc, #308]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a4c      	ldr	r2, [pc, #304]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022bc:	f7ff fbb0 	bl	8001a20 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022c4:	f7ff fbac 	bl	8001a20 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e31a      	b.n	800290c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022d6:	4b44      	ldr	r3, [pc, #272]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e2:	4b41      	ldr	r3, [pc, #260]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a40      	ldr	r2, [pc, #256]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80022e8:	f043 0308 	orr.w	r3, r3, #8
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	4b3e      	ldr	r3, [pc, #248]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	493b      	ldr	r1, [pc, #236]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002300:	4b39      	ldr	r3, [pc, #228]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	4936      	ldr	r1, [pc, #216]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 8002310:	4313      	orrs	r3, r2
 8002312:	604b      	str	r3, [r1, #4]
 8002314:	e01a      	b.n	800234c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002316:	4b34      	ldr	r3, [pc, #208]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a33      	ldr	r2, [pc, #204]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 800231c:	f023 0301 	bic.w	r3, r3, #1
 8002320:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002322:	f7ff fb7d 	bl	8001a20 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800232a:	f7ff fb79 	bl	8001a20 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e2e7      	b.n	800290c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800233c:	4b2a      	ldr	r3, [pc, #168]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f0      	bne.n	800232a <HAL_RCC_OscConfig+0x1da>
 8002348:	e000      	b.n	800234c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800234a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b00      	cmp	r3, #0
 8002356:	d074      	beq.n	8002442 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	2b08      	cmp	r3, #8
 800235c:	d005      	beq.n	800236a <HAL_RCC_OscConfig+0x21a>
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	2b0c      	cmp	r3, #12
 8002362:	d10e      	bne.n	8002382 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2b03      	cmp	r3, #3
 8002368:	d10b      	bne.n	8002382 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236a:	4b1f      	ldr	r3, [pc, #124]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d064      	beq.n	8002440 <HAL_RCC_OscConfig+0x2f0>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d160      	bne.n	8002440 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e2c4      	b.n	800290c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238a:	d106      	bne.n	800239a <HAL_RCC_OscConfig+0x24a>
 800238c:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a15      	ldr	r2, [pc, #84]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 8002392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	e01d      	b.n	80023d6 <HAL_RCC_OscConfig+0x286>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a2:	d10c      	bne.n	80023be <HAL_RCC_OscConfig+0x26e>
 80023a4:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a0f      	ldr	r2, [pc, #60]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80023aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a0c      	ldr	r2, [pc, #48]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80023b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	e00b      	b.n	80023d6 <HAL_RCC_OscConfig+0x286>
 80023be:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a09      	ldr	r2, [pc, #36]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80023c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a06      	ldr	r2, [pc, #24]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80023d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d01c      	beq.n	8002418 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023de:	f7ff fb1f 	bl	8001a20 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023e4:	e011      	b.n	800240a <HAL_RCC_OscConfig+0x2ba>
 80023e6:	bf00      	nop
 80023e8:	40021000 	.word	0x40021000
 80023ec:	0800531c 	.word	0x0800531c
 80023f0:	2000000c 	.word	0x2000000c
 80023f4:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f8:	f7ff fb12 	bl	8001a20 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e280      	b.n	800290c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800240a:	4baf      	ldr	r3, [pc, #700]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0x2a8>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7ff fb02 	bl	8001a20 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002420:	f7ff fafe 	bl	8001a20 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e26c      	b.n	800290c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002432:	4ba5      	ldr	r3, [pc, #660]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0x2d0>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d060      	beq.n	8002510 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	2b04      	cmp	r3, #4
 8002452:	d005      	beq.n	8002460 <HAL_RCC_OscConfig+0x310>
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	2b0c      	cmp	r3, #12
 8002458:	d119      	bne.n	800248e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d116      	bne.n	800248e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002460:	4b99      	ldr	r3, [pc, #612]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_OscConfig+0x328>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e249      	b.n	800290c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002478:	4b93      	ldr	r3, [pc, #588]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	061b      	lsls	r3, r3, #24
 8002486:	4990      	ldr	r1, [pc, #576]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002488:	4313      	orrs	r3, r2
 800248a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800248c:	e040      	b.n	8002510 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d023      	beq.n	80024de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002496:	4b8c      	ldr	r3, [pc, #560]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a8b      	ldr	r2, [pc, #556]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 800249c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a2:	f7ff fabd 	bl	8001a20 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024aa:	f7ff fab9 	bl	8001a20 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e227      	b.n	800290c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024bc:	4b82      	ldr	r3, [pc, #520]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c8:	4b7f      	ldr	r3, [pc, #508]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	061b      	lsls	r3, r3, #24
 80024d6:	497c      	ldr	r1, [pc, #496]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	604b      	str	r3, [r1, #4]
 80024dc:	e018      	b.n	8002510 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024de:	4b7a      	ldr	r3, [pc, #488]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a79      	ldr	r2, [pc, #484]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 80024e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ea:	f7ff fa99 	bl	8001a20 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f2:	f7ff fa95 	bl	8001a20 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e203      	b.n	800290c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002504:	4b70      	ldr	r3, [pc, #448]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1f0      	bne.n	80024f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	2b00      	cmp	r3, #0
 800251a:	d03c      	beq.n	8002596 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d01c      	beq.n	800255e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002524:	4b68      	ldr	r3, [pc, #416]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800252a:	4a67      	ldr	r2, [pc, #412]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002534:	f7ff fa74 	bl	8001a20 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800253c:	f7ff fa70 	bl	8001a20 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e1de      	b.n	800290c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800254e:	4b5e      	ldr	r3, [pc, #376]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002550:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0ef      	beq.n	800253c <HAL_RCC_OscConfig+0x3ec>
 800255c:	e01b      	b.n	8002596 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800255e:	4b5a      	ldr	r3, [pc, #360]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002560:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002564:	4a58      	ldr	r2, [pc, #352]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002566:	f023 0301 	bic.w	r3, r3, #1
 800256a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256e:	f7ff fa57 	bl	8001a20 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002576:	f7ff fa53 	bl	8001a20 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e1c1      	b.n	800290c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002588:	4b4f      	ldr	r3, [pc, #316]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 800258a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1ef      	bne.n	8002576 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 80a6 	beq.w	80026f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a4:	2300      	movs	r3, #0
 80025a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025a8:	4b47      	ldr	r3, [pc, #284]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 80025aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10d      	bne.n	80025d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b4:	4b44      	ldr	r3, [pc, #272]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 80025b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b8:	4a43      	ldr	r2, [pc, #268]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 80025ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025be:	6593      	str	r3, [r2, #88]	; 0x58
 80025c0:	4b41      	ldr	r3, [pc, #260]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 80025c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025cc:	2301      	movs	r3, #1
 80025ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025d0:	4b3e      	ldr	r3, [pc, #248]	; (80026cc <HAL_RCC_OscConfig+0x57c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d118      	bne.n	800260e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025dc:	4b3b      	ldr	r3, [pc, #236]	; (80026cc <HAL_RCC_OscConfig+0x57c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a3a      	ldr	r2, [pc, #232]	; (80026cc <HAL_RCC_OscConfig+0x57c>)
 80025e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025e8:	f7ff fa1a 	bl	8001a20 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f0:	f7ff fa16 	bl	8001a20 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e184      	b.n	800290c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002602:	4b32      	ldr	r3, [pc, #200]	; (80026cc <HAL_RCC_OscConfig+0x57c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d108      	bne.n	8002628 <HAL_RCC_OscConfig+0x4d8>
 8002616:	4b2c      	ldr	r3, [pc, #176]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261c:	4a2a      	ldr	r2, [pc, #168]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002626:	e024      	b.n	8002672 <HAL_RCC_OscConfig+0x522>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b05      	cmp	r3, #5
 800262e:	d110      	bne.n	8002652 <HAL_RCC_OscConfig+0x502>
 8002630:	4b25      	ldr	r3, [pc, #148]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002636:	4a24      	ldr	r2, [pc, #144]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002638:	f043 0304 	orr.w	r3, r3, #4
 800263c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002640:	4b21      	ldr	r3, [pc, #132]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002646:	4a20      	ldr	r2, [pc, #128]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002650:	e00f      	b.n	8002672 <HAL_RCC_OscConfig+0x522>
 8002652:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002658:	4a1b      	ldr	r2, [pc, #108]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 800265a:	f023 0301 	bic.w	r3, r3, #1
 800265e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002662:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002668:	4a17      	ldr	r2, [pc, #92]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 800266a:	f023 0304 	bic.w	r3, r3, #4
 800266e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d016      	beq.n	80026a8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267a:	f7ff f9d1 	bl	8001a20 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002680:	e00a      	b.n	8002698 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002682:	f7ff f9cd 	bl	8001a20 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002690:	4293      	cmp	r3, r2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e139      	b.n	800290c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0ed      	beq.n	8002682 <HAL_RCC_OscConfig+0x532>
 80026a6:	e01a      	b.n	80026de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a8:	f7ff f9ba 	bl	8001a20 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026ae:	e00f      	b.n	80026d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b0:	f7ff f9b6 	bl	8001a20 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80026be:	4293      	cmp	r3, r2
 80026c0:	d906      	bls.n	80026d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e122      	b.n	800290c <HAL_RCC_OscConfig+0x7bc>
 80026c6:	bf00      	nop
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026d0:	4b90      	ldr	r3, [pc, #576]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 80026d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1e8      	bne.n	80026b0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026de:	7ffb      	ldrb	r3, [r7, #31]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d105      	bne.n	80026f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e4:	4b8b      	ldr	r3, [pc, #556]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e8:	4a8a      	ldr	r2, [pc, #552]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 80026ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 8108 	beq.w	800290a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fe:	2b02      	cmp	r3, #2
 8002700:	f040 80d0 	bne.w	80028a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002704:	4b83      	ldr	r3, [pc, #524]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f003 0203 	and.w	r2, r3, #3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	429a      	cmp	r2, r3
 8002716:	d130      	bne.n	800277a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	3b01      	subs	r3, #1
 8002724:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002726:	429a      	cmp	r2, r3
 8002728:	d127      	bne.n	800277a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002734:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002736:	429a      	cmp	r2, r3
 8002738:	d11f      	bne.n	800277a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002744:	2a07      	cmp	r2, #7
 8002746:	bf14      	ite	ne
 8002748:	2201      	movne	r2, #1
 800274a:	2200      	moveq	r2, #0
 800274c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800274e:	4293      	cmp	r3, r2
 8002750:	d113      	bne.n	800277a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275c:	085b      	lsrs	r3, r3, #1
 800275e:	3b01      	subs	r3, #1
 8002760:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002762:	429a      	cmp	r2, r3
 8002764:	d109      	bne.n	800277a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	085b      	lsrs	r3, r3, #1
 8002772:	3b01      	subs	r3, #1
 8002774:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002776:	429a      	cmp	r2, r3
 8002778:	d06e      	beq.n	8002858 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	2b0c      	cmp	r3, #12
 800277e:	d069      	beq.n	8002854 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002780:	4b64      	ldr	r3, [pc, #400]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d105      	bne.n	8002798 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800278c:	4b61      	ldr	r3, [pc, #388]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0b7      	b.n	800290c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800279c:	4b5d      	ldr	r3, [pc, #372]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a5c      	ldr	r2, [pc, #368]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 80027a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027a8:	f7ff f93a 	bl	8001a20 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b0:	f7ff f936 	bl	8001a20 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e0a4      	b.n	800290c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027c2:	4b54      	ldr	r3, [pc, #336]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ce:	4b51      	ldr	r3, [pc, #324]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	4b51      	ldr	r3, [pc, #324]	; (8002918 <HAL_RCC_OscConfig+0x7c8>)
 80027d4:	4013      	ands	r3, r2
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027de:	3a01      	subs	r2, #1
 80027e0:	0112      	lsls	r2, r2, #4
 80027e2:	4311      	orrs	r1, r2
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027e8:	0212      	lsls	r2, r2, #8
 80027ea:	4311      	orrs	r1, r2
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027f0:	0852      	lsrs	r2, r2, #1
 80027f2:	3a01      	subs	r2, #1
 80027f4:	0552      	lsls	r2, r2, #21
 80027f6:	4311      	orrs	r1, r2
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027fc:	0852      	lsrs	r2, r2, #1
 80027fe:	3a01      	subs	r2, #1
 8002800:	0652      	lsls	r2, r2, #25
 8002802:	4311      	orrs	r1, r2
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002808:	0912      	lsrs	r2, r2, #4
 800280a:	0452      	lsls	r2, r2, #17
 800280c:	430a      	orrs	r2, r1
 800280e:	4941      	ldr	r1, [pc, #260]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 8002810:	4313      	orrs	r3, r2
 8002812:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002814:	4b3f      	ldr	r3, [pc, #252]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a3e      	ldr	r2, [pc, #248]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 800281a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800281e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002820:	4b3c      	ldr	r3, [pc, #240]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	4a3b      	ldr	r2, [pc, #236]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 8002826:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800282a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800282c:	f7ff f8f8 	bl	8001a20 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002834:	f7ff f8f4 	bl	8001a20 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e062      	b.n	800290c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002846:	4b33      	ldr	r3, [pc, #204]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002852:	e05a      	b.n	800290a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e059      	b.n	800290c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002858:	4b2e      	ldr	r3, [pc, #184]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d152      	bne.n	800290a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002864:	4b2b      	ldr	r3, [pc, #172]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a2a      	ldr	r2, [pc, #168]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 800286a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800286e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002870:	4b28      	ldr	r3, [pc, #160]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4a27      	ldr	r2, [pc, #156]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 8002876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800287a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800287c:	f7ff f8d0 	bl	8001a20 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002884:	f7ff f8cc 	bl	8001a20 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e03a      	b.n	800290c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002896:	4b1f      	ldr	r3, [pc, #124]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x734>
 80028a2:	e032      	b.n	800290a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	2b0c      	cmp	r3, #12
 80028a8:	d02d      	beq.n	8002906 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028aa:	4b1a      	ldr	r3, [pc, #104]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a19      	ldr	r2, [pc, #100]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 80028b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028b4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80028b6:	4b17      	ldr	r3, [pc, #92]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d105      	bne.n	80028ce <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80028c2:	4b14      	ldr	r3, [pc, #80]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	4a13      	ldr	r2, [pc, #76]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 80028c8:	f023 0303 	bic.w	r3, r3, #3
 80028cc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80028ce:	4b11      	ldr	r3, [pc, #68]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	4a10      	ldr	r2, [pc, #64]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 80028d4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80028d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028dc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028de:	f7ff f89f 	bl	8001a20 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e6:	f7ff f89b 	bl	8001a20 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e009      	b.n	800290c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_RCC_OscConfig+0x7c4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f0      	bne.n	80028e6 <HAL_RCC_OscConfig+0x796>
 8002904:	e001      	b.n	800290a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3720      	adds	r7, #32
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40021000 	.word	0x40021000
 8002918:	f99d808c 	.word	0xf99d808c

0800291c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e0c8      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002930:	4b66      	ldr	r3, [pc, #408]	; (8002acc <HAL_RCC_ClockConfig+0x1b0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d910      	bls.n	8002960 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293e:	4b63      	ldr	r3, [pc, #396]	; (8002acc <HAL_RCC_ClockConfig+0x1b0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 0207 	bic.w	r2, r3, #7
 8002946:	4961      	ldr	r1, [pc, #388]	; (8002acc <HAL_RCC_ClockConfig+0x1b0>)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800294e:	4b5f      	ldr	r3, [pc, #380]	; (8002acc <HAL_RCC_ClockConfig+0x1b0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0b0      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b00      	cmp	r3, #0
 800296a:	d04c      	beq.n	8002a06 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b03      	cmp	r3, #3
 8002972:	d107      	bne.n	8002984 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002974:	4b56      	ldr	r3, [pc, #344]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b4>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d121      	bne.n	80029c4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e09e      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d107      	bne.n	800299c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800298c:	4b50      	ldr	r3, [pc, #320]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b4>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d115      	bne.n	80029c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e092      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d107      	bne.n	80029b4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029a4:	4b4a      	ldr	r3, [pc, #296]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b4>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d109      	bne.n	80029c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e086      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029b4:	4b46      	ldr	r3, [pc, #280]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e07e      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029c4:	4b42      	ldr	r3, [pc, #264]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b4>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f023 0203 	bic.w	r2, r3, #3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	493f      	ldr	r1, [pc, #252]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b4>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d6:	f7ff f823 	bl	8001a20 <HAL_GetTick>
 80029da:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029dc:	e00a      	b.n	80029f4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029de:	f7ff f81f 	bl	8001a20 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e066      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f4:	4b36      	ldr	r3, [pc, #216]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b4>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 020c 	and.w	r2, r3, #12
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d1eb      	bne.n	80029de <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d008      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a12:	4b2f      	ldr	r3, [pc, #188]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	492c      	ldr	r1, [pc, #176]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a24:	4b29      	ldr	r3, [pc, #164]	; (8002acc <HAL_RCC_ClockConfig+0x1b0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d210      	bcs.n	8002a54 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a32:	4b26      	ldr	r3, [pc, #152]	; (8002acc <HAL_RCC_ClockConfig+0x1b0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 0207 	bic.w	r2, r3, #7
 8002a3a:	4924      	ldr	r1, [pc, #144]	; (8002acc <HAL_RCC_ClockConfig+0x1b0>)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a42:	4b22      	ldr	r3, [pc, #136]	; (8002acc <HAL_RCC_ClockConfig+0x1b0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d001      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e036      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a60:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4918      	ldr	r1, [pc, #96]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d009      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a7e:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	4910      	ldr	r1, [pc, #64]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a92:	f000 f825 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8002a96:	4602      	mov	r2, r0
 8002a98:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	490c      	ldr	r1, [pc, #48]	; (8002ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa4:	5ccb      	ldrb	r3, [r1, r3]
 8002aa6:	f003 031f 	and.w	r3, r3, #31
 8002aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8002aae:	4a0a      	ldr	r2, [pc, #40]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ab2:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fe ff62 	bl	8001980 <HAL_InitTick>
 8002abc:	4603      	mov	r3, r0
 8002abe:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ac0:	7afb      	ldrb	r3, [r7, #11]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40022000 	.word	0x40022000
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	0800531c 	.word	0x0800531c
 8002ad8:	2000000c 	.word	0x2000000c
 8002adc:	20000010 	.word	0x20000010

08002ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b089      	sub	sp, #36	; 0x24
 8002ae4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	2300      	movs	r3, #0
 8002aec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aee:	4b3e      	ldr	r3, [pc, #248]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 030c 	and.w	r3, r3, #12
 8002af6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002af8:	4b3b      	ldr	r3, [pc, #236]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f003 0303 	and.w	r3, r3, #3
 8002b00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_RCC_GetSysClockFreq+0x34>
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	2b0c      	cmp	r3, #12
 8002b0c:	d121      	bne.n	8002b52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d11e      	bne.n	8002b52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b14:	4b34      	ldr	r3, [pc, #208]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d107      	bne.n	8002b30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b20:	4b31      	ldr	r3, [pc, #196]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b26:	0a1b      	lsrs	r3, r3, #8
 8002b28:	f003 030f 	and.w	r3, r3, #15
 8002b2c:	61fb      	str	r3, [r7, #28]
 8002b2e:	e005      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b30:	4b2d      	ldr	r3, [pc, #180]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b3c:	4a2b      	ldr	r2, [pc, #172]	; (8002bec <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10d      	bne.n	8002b68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b50:	e00a      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	2b04      	cmp	r3, #4
 8002b56:	d102      	bne.n	8002b5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b58:	4b25      	ldr	r3, [pc, #148]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b5a:	61bb      	str	r3, [r7, #24]
 8002b5c:	e004      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d101      	bne.n	8002b68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b64:	4b23      	ldr	r3, [pc, #140]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	2b0c      	cmp	r3, #12
 8002b6c:	d134      	bne.n	8002bd8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b6e:	4b1e      	ldr	r3, [pc, #120]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d003      	beq.n	8002b86 <HAL_RCC_GetSysClockFreq+0xa6>
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d003      	beq.n	8002b8c <HAL_RCC_GetSysClockFreq+0xac>
 8002b84:	e005      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b86:	4b1a      	ldr	r3, [pc, #104]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b88:	617b      	str	r3, [r7, #20]
      break;
 8002b8a:	e005      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b8c:	4b19      	ldr	r3, [pc, #100]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b8e:	617b      	str	r3, [r7, #20]
      break;
 8002b90:	e002      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	617b      	str	r3, [r7, #20]
      break;
 8002b96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b98:	4b13      	ldr	r3, [pc, #76]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ba6:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	0a1b      	lsrs	r3, r3, #8
 8002bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	fb02 f203 	mul.w	r2, r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bbe:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	0e5b      	lsrs	r3, r3, #25
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	3301      	adds	r3, #1
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bd8:	69bb      	ldr	r3, [r7, #24]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3724      	adds	r7, #36	; 0x24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40021000 	.word	0x40021000
 8002bec:	08005334 	.word	0x08005334
 8002bf0:	00f42400 	.word	0x00f42400
 8002bf4:	007a1200 	.word	0x007a1200

08002bf8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bfc:	4b03      	ldr	r3, [pc, #12]	; (8002c0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	2000000c 	.word	0x2000000c

08002c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c14:	f7ff fff0 	bl	8002bf8 <HAL_RCC_GetHCLKFreq>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	0a1b      	lsrs	r3, r3, #8
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	4904      	ldr	r1, [pc, #16]	; (8002c38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c26:	5ccb      	ldrb	r3, [r1, r3]
 8002c28:	f003 031f 	and.w	r3, r3, #31
 8002c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40021000 	.word	0x40021000
 8002c38:	0800532c 	.word	0x0800532c

08002c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c40:	f7ff ffda 	bl	8002bf8 <HAL_RCC_GetHCLKFreq>
 8002c44:	4602      	mov	r2, r0
 8002c46:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	0adb      	lsrs	r3, r3, #11
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	4904      	ldr	r1, [pc, #16]	; (8002c64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c52:	5ccb      	ldrb	r3, [r1, r3]
 8002c54:	f003 031f 	and.w	r3, r3, #31
 8002c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40021000 	.word	0x40021000
 8002c64:	0800532c 	.word	0x0800532c

08002c68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c70:	2300      	movs	r3, #0
 8002c72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c74:	4b2a      	ldr	r3, [pc, #168]	; (8002d20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c80:	f7ff fa02 	bl	8002088 <HAL_PWREx_GetVoltageRange>
 8002c84:	6178      	str	r0, [r7, #20]
 8002c86:	e014      	b.n	8002cb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c88:	4b25      	ldr	r3, [pc, #148]	; (8002d20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8c:	4a24      	ldr	r2, [pc, #144]	; (8002d20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c92:	6593      	str	r3, [r2, #88]	; 0x58
 8002c94:	4b22      	ldr	r3, [pc, #136]	; (8002d20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ca0:	f7ff f9f2 	bl	8002088 <HAL_PWREx_GetVoltageRange>
 8002ca4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ca6:	4b1e      	ldr	r3, [pc, #120]	; (8002d20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002caa:	4a1d      	ldr	r2, [pc, #116]	; (8002d20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cb8:	d10b      	bne.n	8002cd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b80      	cmp	r3, #128	; 0x80
 8002cbe:	d919      	bls.n	8002cf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2ba0      	cmp	r3, #160	; 0xa0
 8002cc4:	d902      	bls.n	8002ccc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	e013      	b.n	8002cf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ccc:	2301      	movs	r3, #1
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	e010      	b.n	8002cf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b80      	cmp	r3, #128	; 0x80
 8002cd6:	d902      	bls.n	8002cde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002cd8:	2303      	movs	r3, #3
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	e00a      	b.n	8002cf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b80      	cmp	r3, #128	; 0x80
 8002ce2:	d102      	bne.n	8002cea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	e004      	b.n	8002cf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b70      	cmp	r3, #112	; 0x70
 8002cee:	d101      	bne.n	8002cf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f023 0207 	bic.w	r2, r3, #7
 8002cfc:	4909      	ldr	r1, [pc, #36]	; (8002d24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d04:	4b07      	ldr	r3, [pc, #28]	; (8002d24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d001      	beq.n	8002d16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40021000 	.word	0x40021000
 8002d24:	40022000 	.word	0x40022000

08002d28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d30:	2300      	movs	r3, #0
 8002d32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d34:	2300      	movs	r3, #0
 8002d36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d041      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d4c:	d02a      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002d4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d52:	d824      	bhi.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d58:	d008      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d5e:	d81e      	bhi.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00a      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002d64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d68:	d010      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d6a:	e018      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d6c:	4b86      	ldr	r3, [pc, #536]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	4a85      	ldr	r2, [pc, #532]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d76:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d78:	e015      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	2100      	movs	r1, #0
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 fabb 	bl	80032fc <RCCEx_PLLSAI1_Config>
 8002d86:	4603      	mov	r3, r0
 8002d88:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d8a:	e00c      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3320      	adds	r3, #32
 8002d90:	2100      	movs	r1, #0
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 fba6 	bl	80034e4 <RCCEx_PLLSAI2_Config>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d9c:	e003      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	74fb      	strb	r3, [r7, #19]
      break;
 8002da2:	e000      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002da6:	7cfb      	ldrb	r3, [r7, #19]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10b      	bne.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dac:	4b76      	ldr	r3, [pc, #472]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dba:	4973      	ldr	r1, [pc, #460]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002dc2:	e001      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dc4:	7cfb      	ldrb	r3, [r7, #19]
 8002dc6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d041      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dd8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ddc:	d02a      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002dde:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002de2:	d824      	bhi.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002de4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002de8:	d008      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002dea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dee:	d81e      	bhi.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002df8:	d010      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002dfa:	e018      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002dfc:	4b62      	ldr	r3, [pc, #392]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	4a61      	ldr	r2, [pc, #388]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e06:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e08:	e015      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	2100      	movs	r1, #0
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 fa73 	bl	80032fc <RCCEx_PLLSAI1_Config>
 8002e16:	4603      	mov	r3, r0
 8002e18:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e1a:	e00c      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3320      	adds	r3, #32
 8002e20:	2100      	movs	r1, #0
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 fb5e 	bl	80034e4 <RCCEx_PLLSAI2_Config>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e2c:	e003      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	74fb      	strb	r3, [r7, #19]
      break;
 8002e32:	e000      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002e34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e36:	7cfb      	ldrb	r3, [r7, #19]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10b      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e3c:	4b52      	ldr	r3, [pc, #328]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e42:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e4a:	494f      	ldr	r1, [pc, #316]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e52:	e001      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e54:	7cfb      	ldrb	r3, [r7, #19]
 8002e56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 80a0 	beq.w	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e66:	2300      	movs	r3, #0
 8002e68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e6a:	4b47      	ldr	r3, [pc, #284]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00d      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e80:	4b41      	ldr	r3, [pc, #260]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e84:	4a40      	ldr	r2, [pc, #256]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e8c:	4b3e      	ldr	r3, [pc, #248]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e94:	60bb      	str	r3, [r7, #8]
 8002e96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e9c:	4b3b      	ldr	r3, [pc, #236]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a3a      	ldr	r2, [pc, #232]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ea8:	f7fe fdba 	bl	8001a20 <HAL_GetTick>
 8002eac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002eae:	e009      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb0:	f7fe fdb6 	bl	8001a20 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d902      	bls.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	74fb      	strb	r3, [r7, #19]
        break;
 8002ec2:	e005      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ec4:	4b31      	ldr	r3, [pc, #196]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0ef      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002ed0:	7cfb      	ldrb	r3, [r7, #19]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d15c      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ed6:	4b2c      	ldr	r3, [pc, #176]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d01f      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d019      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ef4:	4b24      	ldr	r3, [pc, #144]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002efe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f00:	4b21      	ldr	r3, [pc, #132]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f06:	4a20      	ldr	r2, [pc, #128]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f10:	4b1d      	ldr	r3, [pc, #116]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f16:	4a1c      	ldr	r2, [pc, #112]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f20:	4a19      	ldr	r2, [pc, #100]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d016      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f32:	f7fe fd75 	bl	8001a20 <HAL_GetTick>
 8002f36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f38:	e00b      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3a:	f7fe fd71 	bl	8001a20 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d902      	bls.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	74fb      	strb	r3, [r7, #19]
            break;
 8002f50:	e006      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f52:	4b0d      	ldr	r3, [pc, #52]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0ec      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002f60:	7cfb      	ldrb	r3, [r7, #19]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10c      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f66:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f76:	4904      	ldr	r1, [pc, #16]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f7e:	e009      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f80:	7cfb      	ldrb	r3, [r7, #19]
 8002f82:	74bb      	strb	r3, [r7, #18]
 8002f84:	e006      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002f86:	bf00      	nop
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f90:	7cfb      	ldrb	r3, [r7, #19]
 8002f92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f94:	7c7b      	ldrb	r3, [r7, #17]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d105      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f9a:	4b9e      	ldr	r3, [pc, #632]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9e:	4a9d      	ldr	r2, [pc, #628]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fa4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00a      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fb2:	4b98      	ldr	r3, [pc, #608]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb8:	f023 0203 	bic.w	r2, r3, #3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc0:	4994      	ldr	r1, [pc, #592]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00a      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fd4:	4b8f      	ldr	r3, [pc, #572]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fda:	f023 020c 	bic.w	r2, r3, #12
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe2:	498c      	ldr	r1, [pc, #560]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00a      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ff6:	4b87      	ldr	r3, [pc, #540]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	4983      	ldr	r1, [pc, #524]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00a      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003018:	4b7e      	ldr	r3, [pc, #504]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003026:	497b      	ldr	r1, [pc, #492]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00a      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800303a:	4b76      	ldr	r3, [pc, #472]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003040:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003048:	4972      	ldr	r1, [pc, #456]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00a      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800305c:	4b6d      	ldr	r3, [pc, #436]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003062:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306a:	496a      	ldr	r1, [pc, #424]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00a      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800307e:	4b65      	ldr	r3, [pc, #404]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003084:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308c:	4961      	ldr	r1, [pc, #388]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800308e:	4313      	orrs	r3, r2
 8003090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00a      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030a0:	4b5c      	ldr	r3, [pc, #368]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ae:	4959      	ldr	r1, [pc, #356]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00a      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030c2:	4b54      	ldr	r3, [pc, #336]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d0:	4950      	ldr	r1, [pc, #320]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00a      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030e4:	4b4b      	ldr	r3, [pc, #300]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f2:	4948      	ldr	r1, [pc, #288]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003106:	4b43      	ldr	r3, [pc, #268]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003114:	493f      	ldr	r1, [pc, #252]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003116:	4313      	orrs	r3, r2
 8003118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d028      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003128:	4b3a      	ldr	r3, [pc, #232]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800312a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003136:	4937      	ldr	r1, [pc, #220]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003138:	4313      	orrs	r3, r2
 800313a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003142:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003146:	d106      	bne.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003148:	4b32      	ldr	r3, [pc, #200]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	4a31      	ldr	r2, [pc, #196]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800314e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003152:	60d3      	str	r3, [r2, #12]
 8003154:	e011      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800315a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800315e:	d10c      	bne.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3304      	adds	r3, #4
 8003164:	2101      	movs	r1, #1
 8003166:	4618      	mov	r0, r3
 8003168:	f000 f8c8 	bl	80032fc <RCCEx_PLLSAI1_Config>
 800316c:	4603      	mov	r3, r0
 800316e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003170:	7cfb      	ldrb	r3, [r7, #19]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003176:	7cfb      	ldrb	r3, [r7, #19]
 8003178:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d028      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003186:	4b23      	ldr	r3, [pc, #140]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003194:	491f      	ldr	r1, [pc, #124]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003196:	4313      	orrs	r3, r2
 8003198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031a4:	d106      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031a6:	4b1b      	ldr	r3, [pc, #108]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	4a1a      	ldr	r2, [pc, #104]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031b0:	60d3      	str	r3, [r2, #12]
 80031b2:	e011      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031bc:	d10c      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3304      	adds	r3, #4
 80031c2:	2101      	movs	r1, #1
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 f899 	bl	80032fc <RCCEx_PLLSAI1_Config>
 80031ca:	4603      	mov	r3, r0
 80031cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031ce:	7cfb      	ldrb	r3, [r7, #19]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80031d4:	7cfb      	ldrb	r3, [r7, #19]
 80031d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d02b      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031e4:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f2:	4908      	ldr	r1, [pc, #32]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003202:	d109      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003204:	4b03      	ldr	r3, [pc, #12]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	4a02      	ldr	r2, [pc, #8]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800320e:	60d3      	str	r3, [r2, #12]
 8003210:	e014      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003212:	bf00      	nop
 8003214:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800321c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003220:	d10c      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3304      	adds	r3, #4
 8003226:	2101      	movs	r1, #1
 8003228:	4618      	mov	r0, r3
 800322a:	f000 f867 	bl	80032fc <RCCEx_PLLSAI1_Config>
 800322e:	4603      	mov	r3, r0
 8003230:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003232:	7cfb      	ldrb	r3, [r7, #19]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003238:	7cfb      	ldrb	r3, [r7, #19]
 800323a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d02f      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003248:	4b2b      	ldr	r3, [pc, #172]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800324a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003256:	4928      	ldr	r1, [pc, #160]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003262:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003266:	d10d      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3304      	adds	r3, #4
 800326c:	2102      	movs	r1, #2
 800326e:	4618      	mov	r0, r3
 8003270:	f000 f844 	bl	80032fc <RCCEx_PLLSAI1_Config>
 8003274:	4603      	mov	r3, r0
 8003276:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003278:	7cfb      	ldrb	r3, [r7, #19]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d014      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800327e:	7cfb      	ldrb	r3, [r7, #19]
 8003280:	74bb      	strb	r3, [r7, #18]
 8003282:	e011      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800328c:	d10c      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3320      	adds	r3, #32
 8003292:	2102      	movs	r1, #2
 8003294:	4618      	mov	r0, r3
 8003296:	f000 f925 	bl	80034e4 <RCCEx_PLLSAI2_Config>
 800329a:	4603      	mov	r3, r0
 800329c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800329e:	7cfb      	ldrb	r3, [r7, #19]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80032a4:	7cfb      	ldrb	r3, [r7, #19]
 80032a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00a      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032b4:	4b10      	ldr	r3, [pc, #64]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032c2:	490d      	ldr	r1, [pc, #52]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00b      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032d6:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032e6:	4904      	ldr	r1, [pc, #16]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80032ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40021000 	.word	0x40021000

080032fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003306:	2300      	movs	r3, #0
 8003308:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800330a:	4b75      	ldr	r3, [pc, #468]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d018      	beq.n	8003348 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003316:	4b72      	ldr	r3, [pc, #456]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f003 0203 	and.w	r2, r3, #3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d10d      	bne.n	8003342 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
       ||
 800332a:	2b00      	cmp	r3, #0
 800332c:	d009      	beq.n	8003342 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800332e:	4b6c      	ldr	r3, [pc, #432]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	091b      	lsrs	r3, r3, #4
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
       ||
 800333e:	429a      	cmp	r2, r3
 8003340:	d047      	beq.n	80033d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	73fb      	strb	r3, [r7, #15]
 8003346:	e044      	b.n	80033d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b03      	cmp	r3, #3
 800334e:	d018      	beq.n	8003382 <RCCEx_PLLSAI1_Config+0x86>
 8003350:	2b03      	cmp	r3, #3
 8003352:	d825      	bhi.n	80033a0 <RCCEx_PLLSAI1_Config+0xa4>
 8003354:	2b01      	cmp	r3, #1
 8003356:	d002      	beq.n	800335e <RCCEx_PLLSAI1_Config+0x62>
 8003358:	2b02      	cmp	r3, #2
 800335a:	d009      	beq.n	8003370 <RCCEx_PLLSAI1_Config+0x74>
 800335c:	e020      	b.n	80033a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800335e:	4b60      	ldr	r3, [pc, #384]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d11d      	bne.n	80033a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800336e:	e01a      	b.n	80033a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003370:	4b5b      	ldr	r3, [pc, #364]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003378:	2b00      	cmp	r3, #0
 800337a:	d116      	bne.n	80033aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003380:	e013      	b.n	80033aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003382:	4b57      	ldr	r3, [pc, #348]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10f      	bne.n	80033ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800338e:	4b54      	ldr	r3, [pc, #336]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800339e:	e006      	b.n	80033ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	73fb      	strb	r3, [r7, #15]
      break;
 80033a4:	e004      	b.n	80033b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033a6:	bf00      	nop
 80033a8:	e002      	b.n	80033b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033aa:	bf00      	nop
 80033ac:	e000      	b.n	80033b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10d      	bne.n	80033d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033b6:	4b4a      	ldr	r3, [pc, #296]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6819      	ldr	r1, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	430b      	orrs	r3, r1
 80033cc:	4944      	ldr	r1, [pc, #272]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d17d      	bne.n	80034d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80033d8:	4b41      	ldr	r3, [pc, #260]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a40      	ldr	r2, [pc, #256]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033e4:	f7fe fb1c 	bl	8001a20 <HAL_GetTick>
 80033e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033ea:	e009      	b.n	8003400 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033ec:	f7fe fb18 	bl	8001a20 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d902      	bls.n	8003400 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	73fb      	strb	r3, [r7, #15]
        break;
 80033fe:	e005      	b.n	800340c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003400:	4b37      	ldr	r3, [pc, #220]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1ef      	bne.n	80033ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800340c:	7bfb      	ldrb	r3, [r7, #15]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d160      	bne.n	80034d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d111      	bne.n	800343c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003418:	4b31      	ldr	r3, [pc, #196]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6892      	ldr	r2, [r2, #8]
 8003428:	0211      	lsls	r1, r2, #8
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	68d2      	ldr	r2, [r2, #12]
 800342e:	0912      	lsrs	r2, r2, #4
 8003430:	0452      	lsls	r2, r2, #17
 8003432:	430a      	orrs	r2, r1
 8003434:	492a      	ldr	r1, [pc, #168]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003436:	4313      	orrs	r3, r2
 8003438:	610b      	str	r3, [r1, #16]
 800343a:	e027      	b.n	800348c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d112      	bne.n	8003468 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003442:	4b27      	ldr	r3, [pc, #156]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800344a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6892      	ldr	r2, [r2, #8]
 8003452:	0211      	lsls	r1, r2, #8
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6912      	ldr	r2, [r2, #16]
 8003458:	0852      	lsrs	r2, r2, #1
 800345a:	3a01      	subs	r2, #1
 800345c:	0552      	lsls	r2, r2, #21
 800345e:	430a      	orrs	r2, r1
 8003460:	491f      	ldr	r1, [pc, #124]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003462:	4313      	orrs	r3, r2
 8003464:	610b      	str	r3, [r1, #16]
 8003466:	e011      	b.n	800348c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003468:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003470:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6892      	ldr	r2, [r2, #8]
 8003478:	0211      	lsls	r1, r2, #8
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6952      	ldr	r2, [r2, #20]
 800347e:	0852      	lsrs	r2, r2, #1
 8003480:	3a01      	subs	r2, #1
 8003482:	0652      	lsls	r2, r2, #25
 8003484:	430a      	orrs	r2, r1
 8003486:	4916      	ldr	r1, [pc, #88]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003488:	4313      	orrs	r3, r2
 800348a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800348c:	4b14      	ldr	r3, [pc, #80]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a13      	ldr	r2, [pc, #76]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003492:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003496:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003498:	f7fe fac2 	bl	8001a20 <HAL_GetTick>
 800349c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800349e:	e009      	b.n	80034b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034a0:	f7fe fabe 	bl	8001a20 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d902      	bls.n	80034b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	73fb      	strb	r3, [r7, #15]
          break;
 80034b2:	e005      	b.n	80034c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034b4:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0ef      	beq.n	80034a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80034c6:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c8:	691a      	ldr	r2, [r3, #16]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	4904      	ldr	r1, [pc, #16]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40021000 	.word	0x40021000

080034e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034f2:	4b6a      	ldr	r3, [pc, #424]	; (800369c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d018      	beq.n	8003530 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80034fe:	4b67      	ldr	r3, [pc, #412]	; (800369c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f003 0203 	and.w	r2, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d10d      	bne.n	800352a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
       ||
 8003512:	2b00      	cmp	r3, #0
 8003514:	d009      	beq.n	800352a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003516:	4b61      	ldr	r3, [pc, #388]	; (800369c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	091b      	lsrs	r3, r3, #4
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
       ||
 8003526:	429a      	cmp	r2, r3
 8003528:	d047      	beq.n	80035ba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
 800352e:	e044      	b.n	80035ba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b03      	cmp	r3, #3
 8003536:	d018      	beq.n	800356a <RCCEx_PLLSAI2_Config+0x86>
 8003538:	2b03      	cmp	r3, #3
 800353a:	d825      	bhi.n	8003588 <RCCEx_PLLSAI2_Config+0xa4>
 800353c:	2b01      	cmp	r3, #1
 800353e:	d002      	beq.n	8003546 <RCCEx_PLLSAI2_Config+0x62>
 8003540:	2b02      	cmp	r3, #2
 8003542:	d009      	beq.n	8003558 <RCCEx_PLLSAI2_Config+0x74>
 8003544:	e020      	b.n	8003588 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003546:	4b55      	ldr	r3, [pc, #340]	; (800369c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d11d      	bne.n	800358e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003556:	e01a      	b.n	800358e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003558:	4b50      	ldr	r3, [pc, #320]	; (800369c <RCCEx_PLLSAI2_Config+0x1b8>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003560:	2b00      	cmp	r3, #0
 8003562:	d116      	bne.n	8003592 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003568:	e013      	b.n	8003592 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800356a:	4b4c      	ldr	r3, [pc, #304]	; (800369c <RCCEx_PLLSAI2_Config+0x1b8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10f      	bne.n	8003596 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003576:	4b49      	ldr	r3, [pc, #292]	; (800369c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d109      	bne.n	8003596 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003586:	e006      	b.n	8003596 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	73fb      	strb	r3, [r7, #15]
      break;
 800358c:	e004      	b.n	8003598 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800358e:	bf00      	nop
 8003590:	e002      	b.n	8003598 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003592:	bf00      	nop
 8003594:	e000      	b.n	8003598 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003596:	bf00      	nop
    }

    if(status == HAL_OK)
 8003598:	7bfb      	ldrb	r3, [r7, #15]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10d      	bne.n	80035ba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800359e:	4b3f      	ldr	r3, [pc, #252]	; (800369c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6819      	ldr	r1, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	430b      	orrs	r3, r1
 80035b4:	4939      	ldr	r1, [pc, #228]	; (800369c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d167      	bne.n	8003690 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80035c0:	4b36      	ldr	r3, [pc, #216]	; (800369c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a35      	ldr	r2, [pc, #212]	; (800369c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035cc:	f7fe fa28 	bl	8001a20 <HAL_GetTick>
 80035d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035d2:	e009      	b.n	80035e8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035d4:	f7fe fa24 	bl	8001a20 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d902      	bls.n	80035e8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	73fb      	strb	r3, [r7, #15]
        break;
 80035e6:	e005      	b.n	80035f4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035e8:	4b2c      	ldr	r3, [pc, #176]	; (800369c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1ef      	bne.n	80035d4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d14a      	bne.n	8003690 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d111      	bne.n	8003624 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003600:	4b26      	ldr	r3, [pc, #152]	; (800369c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6892      	ldr	r2, [r2, #8]
 8003610:	0211      	lsls	r1, r2, #8
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	68d2      	ldr	r2, [r2, #12]
 8003616:	0912      	lsrs	r2, r2, #4
 8003618:	0452      	lsls	r2, r2, #17
 800361a:	430a      	orrs	r2, r1
 800361c:	491f      	ldr	r1, [pc, #124]	; (800369c <RCCEx_PLLSAI2_Config+0x1b8>)
 800361e:	4313      	orrs	r3, r2
 8003620:	614b      	str	r3, [r1, #20]
 8003622:	e011      	b.n	8003648 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003624:	4b1d      	ldr	r3, [pc, #116]	; (800369c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800362c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6892      	ldr	r2, [r2, #8]
 8003634:	0211      	lsls	r1, r2, #8
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6912      	ldr	r2, [r2, #16]
 800363a:	0852      	lsrs	r2, r2, #1
 800363c:	3a01      	subs	r2, #1
 800363e:	0652      	lsls	r2, r2, #25
 8003640:	430a      	orrs	r2, r1
 8003642:	4916      	ldr	r1, [pc, #88]	; (800369c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003644:	4313      	orrs	r3, r2
 8003646:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003648:	4b14      	ldr	r3, [pc, #80]	; (800369c <RCCEx_PLLSAI2_Config+0x1b8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a13      	ldr	r2, [pc, #76]	; (800369c <RCCEx_PLLSAI2_Config+0x1b8>)
 800364e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003652:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003654:	f7fe f9e4 	bl	8001a20 <HAL_GetTick>
 8003658:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800365a:	e009      	b.n	8003670 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800365c:	f7fe f9e0 	bl	8001a20 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d902      	bls.n	8003670 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	73fb      	strb	r3, [r7, #15]
          break;
 800366e:	e005      	b.n	800367c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003670:	4b0a      	ldr	r3, [pc, #40]	; (800369c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0ef      	beq.n	800365c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d106      	bne.n	8003690 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003682:	4b06      	ldr	r3, [pc, #24]	; (800369c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003684:	695a      	ldr	r2, [r3, #20]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	4904      	ldr	r1, [pc, #16]	; (800369c <RCCEx_PLLSAI2_Config+0x1b8>)
 800368c:	4313      	orrs	r3, r2
 800368e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003690:	7bfb      	ldrb	r3, [r7, #15]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40021000 	.word	0x40021000

080036a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e049      	b.n	8003746 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d106      	bne.n	80036cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7fd ffac 	bl	8001624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3304      	adds	r3, #4
 80036dc:	4619      	mov	r1, r3
 80036de:	4610      	mov	r0, r2
 80036e0:	f000 fcea 	bl	80040b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b01      	cmp	r3, #1
 8003762:	d001      	beq.n	8003768 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e047      	b.n	80037f8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a23      	ldr	r2, [pc, #140]	; (8003804 <HAL_TIM_Base_Start+0xb4>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d01d      	beq.n	80037b6 <HAL_TIM_Base_Start+0x66>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003782:	d018      	beq.n	80037b6 <HAL_TIM_Base_Start+0x66>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a1f      	ldr	r2, [pc, #124]	; (8003808 <HAL_TIM_Base_Start+0xb8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d013      	beq.n	80037b6 <HAL_TIM_Base_Start+0x66>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a1e      	ldr	r2, [pc, #120]	; (800380c <HAL_TIM_Base_Start+0xbc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d00e      	beq.n	80037b6 <HAL_TIM_Base_Start+0x66>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a1c      	ldr	r2, [pc, #112]	; (8003810 <HAL_TIM_Base_Start+0xc0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d009      	beq.n	80037b6 <HAL_TIM_Base_Start+0x66>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a1b      	ldr	r2, [pc, #108]	; (8003814 <HAL_TIM_Base_Start+0xc4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d004      	beq.n	80037b6 <HAL_TIM_Base_Start+0x66>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a19      	ldr	r2, [pc, #100]	; (8003818 <HAL_TIM_Base_Start+0xc8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d115      	bne.n	80037e2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	4b17      	ldr	r3, [pc, #92]	; (800381c <HAL_TIM_Base_Start+0xcc>)
 80037be:	4013      	ands	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2b06      	cmp	r3, #6
 80037c6:	d015      	beq.n	80037f4 <HAL_TIM_Base_Start+0xa4>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ce:	d011      	beq.n	80037f4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e0:	e008      	b.n	80037f4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f042 0201 	orr.w	r2, r2, #1
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	e000      	b.n	80037f6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	40012c00 	.word	0x40012c00
 8003808:	40000400 	.word	0x40000400
 800380c:	40000800 	.word	0x40000800
 8003810:	40000c00 	.word	0x40000c00
 8003814:	40013400 	.word	0x40013400
 8003818:	40014000 	.word	0x40014000
 800381c:	00010007 	.word	0x00010007

08003820 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e049      	b.n	80038c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fd feb8 	bl	80015bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3304      	adds	r3, #4
 800385c:	4619      	mov	r1, r3
 800385e:	4610      	mov	r0, r2
 8003860:	f000 fc2a 	bl	80040b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d109      	bne.n	80038f4 <HAL_TIM_PWM_Start+0x24>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	bf14      	ite	ne
 80038ec:	2301      	movne	r3, #1
 80038ee:	2300      	moveq	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	e03c      	b.n	800396e <HAL_TIM_PWM_Start+0x9e>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d109      	bne.n	800390e <HAL_TIM_PWM_Start+0x3e>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b01      	cmp	r3, #1
 8003904:	bf14      	ite	ne
 8003906:	2301      	movne	r3, #1
 8003908:	2300      	moveq	r3, #0
 800390a:	b2db      	uxtb	r3, r3
 800390c:	e02f      	b.n	800396e <HAL_TIM_PWM_Start+0x9e>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b08      	cmp	r3, #8
 8003912:	d109      	bne.n	8003928 <HAL_TIM_PWM_Start+0x58>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b01      	cmp	r3, #1
 800391e:	bf14      	ite	ne
 8003920:	2301      	movne	r3, #1
 8003922:	2300      	moveq	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	e022      	b.n	800396e <HAL_TIM_PWM_Start+0x9e>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2b0c      	cmp	r3, #12
 800392c:	d109      	bne.n	8003942 <HAL_TIM_PWM_Start+0x72>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b01      	cmp	r3, #1
 8003938:	bf14      	ite	ne
 800393a:	2301      	movne	r3, #1
 800393c:	2300      	moveq	r3, #0
 800393e:	b2db      	uxtb	r3, r3
 8003940:	e015      	b.n	800396e <HAL_TIM_PWM_Start+0x9e>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b10      	cmp	r3, #16
 8003946:	d109      	bne.n	800395c <HAL_TIM_PWM_Start+0x8c>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b01      	cmp	r3, #1
 8003952:	bf14      	ite	ne
 8003954:	2301      	movne	r3, #1
 8003956:	2300      	moveq	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	e008      	b.n	800396e <HAL_TIM_PWM_Start+0x9e>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b01      	cmp	r3, #1
 8003966:	bf14      	ite	ne
 8003968:	2301      	movne	r3, #1
 800396a:	2300      	moveq	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e09c      	b.n	8003ab0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d104      	bne.n	8003986 <HAL_TIM_PWM_Start+0xb6>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003984:	e023      	b.n	80039ce <HAL_TIM_PWM_Start+0xfe>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b04      	cmp	r3, #4
 800398a:	d104      	bne.n	8003996 <HAL_TIM_PWM_Start+0xc6>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003994:	e01b      	b.n	80039ce <HAL_TIM_PWM_Start+0xfe>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2b08      	cmp	r3, #8
 800399a:	d104      	bne.n	80039a6 <HAL_TIM_PWM_Start+0xd6>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039a4:	e013      	b.n	80039ce <HAL_TIM_PWM_Start+0xfe>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b0c      	cmp	r3, #12
 80039aa:	d104      	bne.n	80039b6 <HAL_TIM_PWM_Start+0xe6>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039b4:	e00b      	b.n	80039ce <HAL_TIM_PWM_Start+0xfe>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b10      	cmp	r3, #16
 80039ba:	d104      	bne.n	80039c6 <HAL_TIM_PWM_Start+0xf6>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039c4:	e003      	b.n	80039ce <HAL_TIM_PWM_Start+0xfe>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2202      	movs	r2, #2
 80039ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2201      	movs	r2, #1
 80039d4:	6839      	ldr	r1, [r7, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 fede 	bl	8004798 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a35      	ldr	r2, [pc, #212]	; (8003ab8 <HAL_TIM_PWM_Start+0x1e8>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d013      	beq.n	8003a0e <HAL_TIM_PWM_Start+0x13e>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a34      	ldr	r2, [pc, #208]	; (8003abc <HAL_TIM_PWM_Start+0x1ec>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00e      	beq.n	8003a0e <HAL_TIM_PWM_Start+0x13e>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a32      	ldr	r2, [pc, #200]	; (8003ac0 <HAL_TIM_PWM_Start+0x1f0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d009      	beq.n	8003a0e <HAL_TIM_PWM_Start+0x13e>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a31      	ldr	r2, [pc, #196]	; (8003ac4 <HAL_TIM_PWM_Start+0x1f4>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d004      	beq.n	8003a0e <HAL_TIM_PWM_Start+0x13e>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a2f      	ldr	r2, [pc, #188]	; (8003ac8 <HAL_TIM_PWM_Start+0x1f8>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d101      	bne.n	8003a12 <HAL_TIM_PWM_Start+0x142>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <HAL_TIM_PWM_Start+0x144>
 8003a12:	2300      	movs	r3, #0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d007      	beq.n	8003a28 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a22      	ldr	r2, [pc, #136]	; (8003ab8 <HAL_TIM_PWM_Start+0x1e8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d01d      	beq.n	8003a6e <HAL_TIM_PWM_Start+0x19e>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3a:	d018      	beq.n	8003a6e <HAL_TIM_PWM_Start+0x19e>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a22      	ldr	r2, [pc, #136]	; (8003acc <HAL_TIM_PWM_Start+0x1fc>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d013      	beq.n	8003a6e <HAL_TIM_PWM_Start+0x19e>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a21      	ldr	r2, [pc, #132]	; (8003ad0 <HAL_TIM_PWM_Start+0x200>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d00e      	beq.n	8003a6e <HAL_TIM_PWM_Start+0x19e>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a1f      	ldr	r2, [pc, #124]	; (8003ad4 <HAL_TIM_PWM_Start+0x204>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d009      	beq.n	8003a6e <HAL_TIM_PWM_Start+0x19e>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a17      	ldr	r2, [pc, #92]	; (8003abc <HAL_TIM_PWM_Start+0x1ec>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d004      	beq.n	8003a6e <HAL_TIM_PWM_Start+0x19e>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a15      	ldr	r2, [pc, #84]	; (8003ac0 <HAL_TIM_PWM_Start+0x1f0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d115      	bne.n	8003a9a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	4b18      	ldr	r3, [pc, #96]	; (8003ad8 <HAL_TIM_PWM_Start+0x208>)
 8003a76:	4013      	ands	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2b06      	cmp	r3, #6
 8003a7e:	d015      	beq.n	8003aac <HAL_TIM_PWM_Start+0x1dc>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a86:	d011      	beq.n	8003aac <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0201 	orr.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a98:	e008      	b.n	8003aac <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f042 0201 	orr.w	r2, r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	e000      	b.n	8003aae <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40012c00 	.word	0x40012c00
 8003abc:	40013400 	.word	0x40013400
 8003ac0:	40014000 	.word	0x40014000
 8003ac4:	40014400 	.word	0x40014400
 8003ac8:	40014800 	.word	0x40014800
 8003acc:	40000400 	.word	0x40000400
 8003ad0:	40000800 	.word	0x40000800
 8003ad4:	40000c00 	.word	0x40000c00
 8003ad8:	00010007 	.word	0x00010007

08003adc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2200      	movs	r2, #0
 8003aec:	6839      	ldr	r1, [r7, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fe52 	bl	8004798 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a3e      	ldr	r2, [pc, #248]	; (8003bf4 <HAL_TIM_PWM_Stop+0x118>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d013      	beq.n	8003b26 <HAL_TIM_PWM_Stop+0x4a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a3d      	ldr	r2, [pc, #244]	; (8003bf8 <HAL_TIM_PWM_Stop+0x11c>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00e      	beq.n	8003b26 <HAL_TIM_PWM_Stop+0x4a>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a3b      	ldr	r2, [pc, #236]	; (8003bfc <HAL_TIM_PWM_Stop+0x120>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d009      	beq.n	8003b26 <HAL_TIM_PWM_Stop+0x4a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a3a      	ldr	r2, [pc, #232]	; (8003c00 <HAL_TIM_PWM_Stop+0x124>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d004      	beq.n	8003b26 <HAL_TIM_PWM_Stop+0x4a>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a38      	ldr	r2, [pc, #224]	; (8003c04 <HAL_TIM_PWM_Stop+0x128>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d101      	bne.n	8003b2a <HAL_TIM_PWM_Stop+0x4e>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <HAL_TIM_PWM_Stop+0x50>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d017      	beq.n	8003b60 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6a1a      	ldr	r2, [r3, #32]
 8003b36:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10f      	bne.n	8003b60 <HAL_TIM_PWM_Stop+0x84>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6a1a      	ldr	r2, [r3, #32]
 8003b46:	f240 4344 	movw	r3, #1092	; 0x444
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d107      	bne.n	8003b60 <HAL_TIM_PWM_Stop+0x84>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b5e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6a1a      	ldr	r2, [r3, #32]
 8003b66:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10f      	bne.n	8003b90 <HAL_TIM_PWM_Stop+0xb4>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6a1a      	ldr	r2, [r3, #32]
 8003b76:	f240 4344 	movw	r3, #1092	; 0x444
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d107      	bne.n	8003b90 <HAL_TIM_PWM_Stop+0xb4>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0201 	bic.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d104      	bne.n	8003ba0 <HAL_TIM_PWM_Stop+0xc4>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b9e:	e023      	b.n	8003be8 <HAL_TIM_PWM_Stop+0x10c>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d104      	bne.n	8003bb0 <HAL_TIM_PWM_Stop+0xd4>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bae:	e01b      	b.n	8003be8 <HAL_TIM_PWM_Stop+0x10c>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d104      	bne.n	8003bc0 <HAL_TIM_PWM_Stop+0xe4>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bbe:	e013      	b.n	8003be8 <HAL_TIM_PWM_Stop+0x10c>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2b0c      	cmp	r3, #12
 8003bc4:	d104      	bne.n	8003bd0 <HAL_TIM_PWM_Stop+0xf4>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bce:	e00b      	b.n	8003be8 <HAL_TIM_PWM_Stop+0x10c>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2b10      	cmp	r3, #16
 8003bd4:	d104      	bne.n	8003be0 <HAL_TIM_PWM_Stop+0x104>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bde:	e003      	b.n	8003be8 <HAL_TIM_PWM_Stop+0x10c>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40012c00 	.word	0x40012c00
 8003bf8:	40013400 	.word	0x40013400
 8003bfc:	40014000 	.word	0x40014000
 8003c00:	40014400 	.word	0x40014400
 8003c04:	40014800 	.word	0x40014800

08003c08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d122      	bne.n	8003c64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d11b      	bne.n	8003c64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0202 	mvn.w	r2, #2
 8003c34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 fa16 	bl	800407c <HAL_TIM_IC_CaptureCallback>
 8003c50:	e005      	b.n	8003c5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 fa08 	bl	8004068 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 fa19 	bl	8004090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d122      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d11b      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f06f 0204 	mvn.w	r2, #4
 8003c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f9ec 	bl	800407c <HAL_TIM_IC_CaptureCallback>
 8003ca4:	e005      	b.n	8003cb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f9de 	bl	8004068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f9ef 	bl	8004090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d122      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d11b      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f06f 0208 	mvn.w	r2, #8
 8003cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2204      	movs	r2, #4
 8003ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f9c2 	bl	800407c <HAL_TIM_IC_CaptureCallback>
 8003cf8:	e005      	b.n	8003d06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f9b4 	bl	8004068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f9c5 	bl	8004090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f003 0310 	and.w	r3, r3, #16
 8003d16:	2b10      	cmp	r3, #16
 8003d18:	d122      	bne.n	8003d60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0310 	and.w	r3, r3, #16
 8003d24:	2b10      	cmp	r3, #16
 8003d26:	d11b      	bne.n	8003d60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f06f 0210 	mvn.w	r2, #16
 8003d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2208      	movs	r2, #8
 8003d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f998 	bl	800407c <HAL_TIM_IC_CaptureCallback>
 8003d4c:	e005      	b.n	8003d5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f98a 	bl	8004068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f99b 	bl	8004090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d10e      	bne.n	8003d8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d107      	bne.n	8003d8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f06f 0201 	mvn.w	r2, #1
 8003d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7fd fb7c 	bl	8001484 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d96:	2b80      	cmp	r3, #128	; 0x80
 8003d98:	d10e      	bne.n	8003db8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da4:	2b80      	cmp	r3, #128	; 0x80
 8003da6:	d107      	bne.n	8003db8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 fe26 	bl	8004a04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dc6:	d10e      	bne.n	8003de6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd2:	2b80      	cmp	r3, #128	; 0x80
 8003dd4:	d107      	bne.n	8003de6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fe19 	bl	8004a18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df0:	2b40      	cmp	r3, #64	; 0x40
 8003df2:	d10e      	bne.n	8003e12 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfe:	2b40      	cmp	r3, #64	; 0x40
 8003e00:	d107      	bne.n	8003e12 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f949 	bl	80040a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	f003 0320 	and.w	r3, r3, #32
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	d10e      	bne.n	8003e3e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f003 0320 	and.w	r3, r3, #32
 8003e2a:	2b20      	cmp	r3, #32
 8003e2c:	d107      	bne.n	8003e3e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f06f 0220 	mvn.w	r2, #32
 8003e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 fdd9 	bl	80049f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e3e:	bf00      	nop
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d101      	bne.n	8003e62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e0fd      	b.n	800405e <HAL_TIM_PWM_ConfigChannel+0x216>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b14      	cmp	r3, #20
 8003e6e:	f200 80f0 	bhi.w	8004052 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003e72:	a201      	add	r2, pc, #4	; (adr r2, 8003e78 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e78:	08003ecd 	.word	0x08003ecd
 8003e7c:	08004053 	.word	0x08004053
 8003e80:	08004053 	.word	0x08004053
 8003e84:	08004053 	.word	0x08004053
 8003e88:	08003f0d 	.word	0x08003f0d
 8003e8c:	08004053 	.word	0x08004053
 8003e90:	08004053 	.word	0x08004053
 8003e94:	08004053 	.word	0x08004053
 8003e98:	08003f4f 	.word	0x08003f4f
 8003e9c:	08004053 	.word	0x08004053
 8003ea0:	08004053 	.word	0x08004053
 8003ea4:	08004053 	.word	0x08004053
 8003ea8:	08003f8f 	.word	0x08003f8f
 8003eac:	08004053 	.word	0x08004053
 8003eb0:	08004053 	.word	0x08004053
 8003eb4:	08004053 	.word	0x08004053
 8003eb8:	08003fd1 	.word	0x08003fd1
 8003ebc:	08004053 	.word	0x08004053
 8003ec0:	08004053 	.word	0x08004053
 8003ec4:	08004053 	.word	0x08004053
 8003ec8:	08004011 	.word	0x08004011
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68b9      	ldr	r1, [r7, #8]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 f98a 	bl	80041ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699a      	ldr	r2, [r3, #24]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0208 	orr.w	r2, r2, #8
 8003ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699a      	ldr	r2, [r3, #24]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0204 	bic.w	r2, r2, #4
 8003ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6999      	ldr	r1, [r3, #24]
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	691a      	ldr	r2, [r3, #16]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	619a      	str	r2, [r3, #24]
      break;
 8003f0a:	e0a3      	b.n	8004054 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 f9fa 	bl	800430c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699a      	ldr	r2, [r3, #24]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699a      	ldr	r2, [r3, #24]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6999      	ldr	r1, [r3, #24]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	021a      	lsls	r2, r3, #8
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	619a      	str	r2, [r3, #24]
      break;
 8003f4c:	e082      	b.n	8004054 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68b9      	ldr	r1, [r7, #8]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 fa63 	bl	8004420 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	69da      	ldr	r2, [r3, #28]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0208 	orr.w	r2, r2, #8
 8003f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69da      	ldr	r2, [r3, #28]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0204 	bic.w	r2, r2, #4
 8003f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69d9      	ldr	r1, [r3, #28]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	61da      	str	r2, [r3, #28]
      break;
 8003f8c:	e062      	b.n	8004054 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 facb 	bl	8004530 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69da      	ldr	r2, [r3, #28]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69da      	ldr	r2, [r3, #28]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69d9      	ldr	r1, [r3, #28]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	021a      	lsls	r2, r3, #8
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	61da      	str	r2, [r3, #28]
      break;
 8003fce:	e041      	b.n	8004054 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68b9      	ldr	r1, [r7, #8]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 fb14 	bl	8004604 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0208 	orr.w	r2, r2, #8
 8003fea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0204 	bic.w	r2, r2, #4
 8003ffa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	691a      	ldr	r2, [r3, #16]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800400e:	e021      	b.n	8004054 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68b9      	ldr	r1, [r7, #8]
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fb58 	bl	80046cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800402a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800403a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	021a      	lsls	r2, r3, #8
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004050:	e000      	b.n	8004054 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004052:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop

08004068 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a40      	ldr	r2, [pc, #256]	; (80041cc <TIM_Base_SetConfig+0x114>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d013      	beq.n	80040f8 <TIM_Base_SetConfig+0x40>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d6:	d00f      	beq.n	80040f8 <TIM_Base_SetConfig+0x40>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a3d      	ldr	r2, [pc, #244]	; (80041d0 <TIM_Base_SetConfig+0x118>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d00b      	beq.n	80040f8 <TIM_Base_SetConfig+0x40>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a3c      	ldr	r2, [pc, #240]	; (80041d4 <TIM_Base_SetConfig+0x11c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d007      	beq.n	80040f8 <TIM_Base_SetConfig+0x40>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a3b      	ldr	r2, [pc, #236]	; (80041d8 <TIM_Base_SetConfig+0x120>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d003      	beq.n	80040f8 <TIM_Base_SetConfig+0x40>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a3a      	ldr	r2, [pc, #232]	; (80041dc <TIM_Base_SetConfig+0x124>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d108      	bne.n	800410a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a2f      	ldr	r2, [pc, #188]	; (80041cc <TIM_Base_SetConfig+0x114>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d01f      	beq.n	8004152 <TIM_Base_SetConfig+0x9a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004118:	d01b      	beq.n	8004152 <TIM_Base_SetConfig+0x9a>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a2c      	ldr	r2, [pc, #176]	; (80041d0 <TIM_Base_SetConfig+0x118>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d017      	beq.n	8004152 <TIM_Base_SetConfig+0x9a>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a2b      	ldr	r2, [pc, #172]	; (80041d4 <TIM_Base_SetConfig+0x11c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d013      	beq.n	8004152 <TIM_Base_SetConfig+0x9a>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a2a      	ldr	r2, [pc, #168]	; (80041d8 <TIM_Base_SetConfig+0x120>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d00f      	beq.n	8004152 <TIM_Base_SetConfig+0x9a>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a29      	ldr	r2, [pc, #164]	; (80041dc <TIM_Base_SetConfig+0x124>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d00b      	beq.n	8004152 <TIM_Base_SetConfig+0x9a>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a28      	ldr	r2, [pc, #160]	; (80041e0 <TIM_Base_SetConfig+0x128>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d007      	beq.n	8004152 <TIM_Base_SetConfig+0x9a>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a27      	ldr	r2, [pc, #156]	; (80041e4 <TIM_Base_SetConfig+0x12c>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d003      	beq.n	8004152 <TIM_Base_SetConfig+0x9a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a26      	ldr	r2, [pc, #152]	; (80041e8 <TIM_Base_SetConfig+0x130>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d108      	bne.n	8004164 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	4313      	orrs	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a10      	ldr	r2, [pc, #64]	; (80041cc <TIM_Base_SetConfig+0x114>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d00f      	beq.n	80041b0 <TIM_Base_SetConfig+0xf8>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a12      	ldr	r2, [pc, #72]	; (80041dc <TIM_Base_SetConfig+0x124>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d00b      	beq.n	80041b0 <TIM_Base_SetConfig+0xf8>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a11      	ldr	r2, [pc, #68]	; (80041e0 <TIM_Base_SetConfig+0x128>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d007      	beq.n	80041b0 <TIM_Base_SetConfig+0xf8>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a10      	ldr	r2, [pc, #64]	; (80041e4 <TIM_Base_SetConfig+0x12c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d003      	beq.n	80041b0 <TIM_Base_SetConfig+0xf8>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a0f      	ldr	r2, [pc, #60]	; (80041e8 <TIM_Base_SetConfig+0x130>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d103      	bne.n	80041b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	691a      	ldr	r2, [r3, #16]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	615a      	str	r2, [r3, #20]
}
 80041be:	bf00      	nop
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40012c00 	.word	0x40012c00
 80041d0:	40000400 	.word	0x40000400
 80041d4:	40000800 	.word	0x40000800
 80041d8:	40000c00 	.word	0x40000c00
 80041dc:	40013400 	.word	0x40013400
 80041e0:	40014000 	.word	0x40014000
 80041e4:	40014400 	.word	0x40014400
 80041e8:	40014800 	.word	0x40014800

080041ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	f023 0201 	bic.w	r2, r3, #1
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800421a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0303 	bic.w	r3, r3, #3
 8004226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	4313      	orrs	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f023 0302 	bic.w	r3, r3, #2
 8004238:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a2c      	ldr	r2, [pc, #176]	; (80042f8 <TIM_OC1_SetConfig+0x10c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d00f      	beq.n	800426c <TIM_OC1_SetConfig+0x80>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a2b      	ldr	r2, [pc, #172]	; (80042fc <TIM_OC1_SetConfig+0x110>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d00b      	beq.n	800426c <TIM_OC1_SetConfig+0x80>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a2a      	ldr	r2, [pc, #168]	; (8004300 <TIM_OC1_SetConfig+0x114>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d007      	beq.n	800426c <TIM_OC1_SetConfig+0x80>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a29      	ldr	r2, [pc, #164]	; (8004304 <TIM_OC1_SetConfig+0x118>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d003      	beq.n	800426c <TIM_OC1_SetConfig+0x80>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a28      	ldr	r2, [pc, #160]	; (8004308 <TIM_OC1_SetConfig+0x11c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d10c      	bne.n	8004286 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f023 0308 	bic.w	r3, r3, #8
 8004272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f023 0304 	bic.w	r3, r3, #4
 8004284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a1b      	ldr	r2, [pc, #108]	; (80042f8 <TIM_OC1_SetConfig+0x10c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d00f      	beq.n	80042ae <TIM_OC1_SetConfig+0xc2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a1a      	ldr	r2, [pc, #104]	; (80042fc <TIM_OC1_SetConfig+0x110>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d00b      	beq.n	80042ae <TIM_OC1_SetConfig+0xc2>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a19      	ldr	r2, [pc, #100]	; (8004300 <TIM_OC1_SetConfig+0x114>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d007      	beq.n	80042ae <TIM_OC1_SetConfig+0xc2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a18      	ldr	r2, [pc, #96]	; (8004304 <TIM_OC1_SetConfig+0x118>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d003      	beq.n	80042ae <TIM_OC1_SetConfig+0xc2>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a17      	ldr	r2, [pc, #92]	; (8004308 <TIM_OC1_SetConfig+0x11c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d111      	bne.n	80042d2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	621a      	str	r2, [r3, #32]
}
 80042ec:	bf00      	nop
 80042ee:	371c      	adds	r7, #28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	40012c00 	.word	0x40012c00
 80042fc:	40013400 	.word	0x40013400
 8004300:	40014000 	.word	0x40014000
 8004304:	40014400 	.word	0x40014400
 8004308:	40014800 	.word	0x40014800

0800430c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f023 0210 	bic.w	r2, r3, #16
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800433a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	021b      	lsls	r3, r3, #8
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f023 0320 	bic.w	r3, r3, #32
 800435a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4313      	orrs	r3, r2
 8004366:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a28      	ldr	r2, [pc, #160]	; (800440c <TIM_OC2_SetConfig+0x100>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d003      	beq.n	8004378 <TIM_OC2_SetConfig+0x6c>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a27      	ldr	r2, [pc, #156]	; (8004410 <TIM_OC2_SetConfig+0x104>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d10d      	bne.n	8004394 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800437e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004392:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a1d      	ldr	r2, [pc, #116]	; (800440c <TIM_OC2_SetConfig+0x100>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00f      	beq.n	80043bc <TIM_OC2_SetConfig+0xb0>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a1c      	ldr	r2, [pc, #112]	; (8004410 <TIM_OC2_SetConfig+0x104>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00b      	beq.n	80043bc <TIM_OC2_SetConfig+0xb0>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a1b      	ldr	r2, [pc, #108]	; (8004414 <TIM_OC2_SetConfig+0x108>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d007      	beq.n	80043bc <TIM_OC2_SetConfig+0xb0>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a1a      	ldr	r2, [pc, #104]	; (8004418 <TIM_OC2_SetConfig+0x10c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d003      	beq.n	80043bc <TIM_OC2_SetConfig+0xb0>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a19      	ldr	r2, [pc, #100]	; (800441c <TIM_OC2_SetConfig+0x110>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d113      	bne.n	80043e4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	621a      	str	r2, [r3, #32]
}
 80043fe:	bf00      	nop
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	40012c00 	.word	0x40012c00
 8004410:	40013400 	.word	0x40013400
 8004414:	40014000 	.word	0x40014000
 8004418:	40014400 	.word	0x40014400
 800441c:	40014800 	.word	0x40014800

08004420 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800444e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0303 	bic.w	r3, r3, #3
 800445a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800446c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	021b      	lsls	r3, r3, #8
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	4313      	orrs	r3, r2
 8004478:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a27      	ldr	r2, [pc, #156]	; (800451c <TIM_OC3_SetConfig+0xfc>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d003      	beq.n	800448a <TIM_OC3_SetConfig+0x6a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a26      	ldr	r2, [pc, #152]	; (8004520 <TIM_OC3_SetConfig+0x100>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d10d      	bne.n	80044a6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004490:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	021b      	lsls	r3, r3, #8
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	4313      	orrs	r3, r2
 800449c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a1c      	ldr	r2, [pc, #112]	; (800451c <TIM_OC3_SetConfig+0xfc>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d00f      	beq.n	80044ce <TIM_OC3_SetConfig+0xae>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a1b      	ldr	r2, [pc, #108]	; (8004520 <TIM_OC3_SetConfig+0x100>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00b      	beq.n	80044ce <TIM_OC3_SetConfig+0xae>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a1a      	ldr	r2, [pc, #104]	; (8004524 <TIM_OC3_SetConfig+0x104>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d007      	beq.n	80044ce <TIM_OC3_SetConfig+0xae>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a19      	ldr	r2, [pc, #100]	; (8004528 <TIM_OC3_SetConfig+0x108>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d003      	beq.n	80044ce <TIM_OC3_SetConfig+0xae>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a18      	ldr	r2, [pc, #96]	; (800452c <TIM_OC3_SetConfig+0x10c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d113      	bne.n	80044f6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	621a      	str	r2, [r3, #32]
}
 8004510:	bf00      	nop
 8004512:	371c      	adds	r7, #28
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	40012c00 	.word	0x40012c00
 8004520:	40013400 	.word	0x40013400
 8004524:	40014000 	.word	0x40014000
 8004528:	40014400 	.word	0x40014400
 800452c:	40014800 	.word	0x40014800

08004530 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800455e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800456a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	021b      	lsls	r3, r3, #8
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	4313      	orrs	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800457e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	031b      	lsls	r3, r3, #12
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	4313      	orrs	r3, r2
 800458a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a18      	ldr	r2, [pc, #96]	; (80045f0 <TIM_OC4_SetConfig+0xc0>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d00f      	beq.n	80045b4 <TIM_OC4_SetConfig+0x84>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a17      	ldr	r2, [pc, #92]	; (80045f4 <TIM_OC4_SetConfig+0xc4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00b      	beq.n	80045b4 <TIM_OC4_SetConfig+0x84>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a16      	ldr	r2, [pc, #88]	; (80045f8 <TIM_OC4_SetConfig+0xc8>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d007      	beq.n	80045b4 <TIM_OC4_SetConfig+0x84>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a15      	ldr	r2, [pc, #84]	; (80045fc <TIM_OC4_SetConfig+0xcc>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d003      	beq.n	80045b4 <TIM_OC4_SetConfig+0x84>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a14      	ldr	r2, [pc, #80]	; (8004600 <TIM_OC4_SetConfig+0xd0>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d109      	bne.n	80045c8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	019b      	lsls	r3, r3, #6
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	621a      	str	r2, [r3, #32]
}
 80045e2:	bf00      	nop
 80045e4:	371c      	adds	r7, #28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	40012c00 	.word	0x40012c00
 80045f4:	40013400 	.word	0x40013400
 80045f8:	40014000 	.word	0x40014000
 80045fc:	40014400 	.word	0x40014400
 8004600:	40014800 	.word	0x40014800

08004604 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	4313      	orrs	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004648:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	041b      	lsls	r3, r3, #16
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a17      	ldr	r2, [pc, #92]	; (80046b8 <TIM_OC5_SetConfig+0xb4>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d00f      	beq.n	800467e <TIM_OC5_SetConfig+0x7a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a16      	ldr	r2, [pc, #88]	; (80046bc <TIM_OC5_SetConfig+0xb8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d00b      	beq.n	800467e <TIM_OC5_SetConfig+0x7a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a15      	ldr	r2, [pc, #84]	; (80046c0 <TIM_OC5_SetConfig+0xbc>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d007      	beq.n	800467e <TIM_OC5_SetConfig+0x7a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a14      	ldr	r2, [pc, #80]	; (80046c4 <TIM_OC5_SetConfig+0xc0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d003      	beq.n	800467e <TIM_OC5_SetConfig+0x7a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a13      	ldr	r2, [pc, #76]	; (80046c8 <TIM_OC5_SetConfig+0xc4>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d109      	bne.n	8004692 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004684:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	021b      	lsls	r3, r3, #8
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	4313      	orrs	r3, r2
 8004690:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	621a      	str	r2, [r3, #32]
}
 80046ac:	bf00      	nop
 80046ae:	371c      	adds	r7, #28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	40012c00 	.word	0x40012c00
 80046bc:	40013400 	.word	0x40013400
 80046c0:	40014000 	.word	0x40014000
 80046c4:	40014400 	.word	0x40014400
 80046c8:	40014800 	.word	0x40014800

080046cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	021b      	lsls	r3, r3, #8
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004712:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	051b      	lsls	r3, r3, #20
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a18      	ldr	r2, [pc, #96]	; (8004784 <TIM_OC6_SetConfig+0xb8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d00f      	beq.n	8004748 <TIM_OC6_SetConfig+0x7c>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a17      	ldr	r2, [pc, #92]	; (8004788 <TIM_OC6_SetConfig+0xbc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d00b      	beq.n	8004748 <TIM_OC6_SetConfig+0x7c>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a16      	ldr	r2, [pc, #88]	; (800478c <TIM_OC6_SetConfig+0xc0>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d007      	beq.n	8004748 <TIM_OC6_SetConfig+0x7c>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a15      	ldr	r2, [pc, #84]	; (8004790 <TIM_OC6_SetConfig+0xc4>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d003      	beq.n	8004748 <TIM_OC6_SetConfig+0x7c>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a14      	ldr	r2, [pc, #80]	; (8004794 <TIM_OC6_SetConfig+0xc8>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d109      	bne.n	800475c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800474e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	029b      	lsls	r3, r3, #10
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	4313      	orrs	r3, r2
 800475a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	621a      	str	r2, [r3, #32]
}
 8004776:	bf00      	nop
 8004778:	371c      	adds	r7, #28
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	40012c00 	.word	0x40012c00
 8004788:	40013400 	.word	0x40013400
 800478c:	40014000 	.word	0x40014000
 8004790:	40014400 	.word	0x40014400
 8004794:	40014800 	.word	0x40014800

08004798 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f003 031f 	and.w	r3, r3, #31
 80047aa:	2201      	movs	r2, #1
 80047ac:	fa02 f303 	lsl.w	r3, r2, r3
 80047b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a1a      	ldr	r2, [r3, #32]
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	43db      	mvns	r3, r3
 80047ba:	401a      	ands	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a1a      	ldr	r2, [r3, #32]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f003 031f 	and.w	r3, r3, #31
 80047ca:	6879      	ldr	r1, [r7, #4]
 80047cc:	fa01 f303 	lsl.w	r3, r1, r3
 80047d0:	431a      	orrs	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	621a      	str	r2, [r3, #32]
}
 80047d6:	bf00      	nop
 80047d8:	371c      	adds	r7, #28
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
	...

080047e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e068      	b.n	80048ce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a2e      	ldr	r2, [pc, #184]	; (80048dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d004      	beq.n	8004830 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a2d      	ldr	r2, [pc, #180]	; (80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d108      	bne.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004836:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004848:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	4313      	orrs	r3, r2
 8004852:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a1e      	ldr	r2, [pc, #120]	; (80048dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d01d      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800486e:	d018      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a1b      	ldr	r2, [pc, #108]	; (80048e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d013      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a1a      	ldr	r2, [pc, #104]	; (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d00e      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a18      	ldr	r2, [pc, #96]	; (80048ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d009      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a13      	ldr	r2, [pc, #76]	; (80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d004      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a14      	ldr	r2, [pc, #80]	; (80048f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d10c      	bne.n	80048bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40012c00 	.word	0x40012c00
 80048e0:	40013400 	.word	0x40013400
 80048e4:	40000400 	.word	0x40000400
 80048e8:	40000800 	.word	0x40000800
 80048ec:	40000c00 	.word	0x40000c00
 80048f0:	40014000 	.word	0x40014000

080048f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004908:	2b01      	cmp	r3, #1
 800490a:	d101      	bne.n	8004910 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800490c:	2302      	movs	r3, #2
 800490e:	e065      	b.n	80049dc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	4313      	orrs	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	4313      	orrs	r3, r2
 8004940:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4313      	orrs	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	4313      	orrs	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	041b      	lsls	r3, r3, #16
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a16      	ldr	r2, [pc, #88]	; (80049e8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d004      	beq.n	800499e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a14      	ldr	r2, [pc, #80]	; (80049ec <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d115      	bne.n	80049ca <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	051b      	lsls	r3, r3, #20
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	69db      	ldr	r3, [r3, #28]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	40012c00 	.word	0x40012c00
 80049ec:	40013400 	.word	0x40013400

080049f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e040      	b.n	8004ac0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d106      	bne.n	8004a54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7fc fe7e 	bl	8001750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2224      	movs	r2, #36	; 0x24
 8004a58:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0201 	bic.w	r2, r2, #1
 8004a68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f82c 	bl	8004ac8 <UART_SetConfig>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d101      	bne.n	8004a7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e022      	b.n	8004ac0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d002      	beq.n	8004a88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 faaa 	bl	8004fdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689a      	ldr	r2, [r3, #8]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004aa6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f042 0201 	orr.w	r2, r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 fb31 	bl	8005120 <UART_CheckIdleState>
 8004abe:	4603      	mov	r3, r0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ac8:	b5b0      	push	{r4, r5, r7, lr}
 8004aca:	b088      	sub	sp, #32
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	431a      	orrs	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	69db      	ldr	r3, [r3, #28]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	4bad      	ldr	r3, [pc, #692]	; (8004da8 <UART_SetConfig+0x2e0>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6812      	ldr	r2, [r2, #0]
 8004afa:	69f9      	ldr	r1, [r7, #28]
 8004afc:	430b      	orrs	r3, r1
 8004afe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4aa2      	ldr	r2, [pc, #648]	; (8004dac <UART_SetConfig+0x2e4>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d004      	beq.n	8004b30 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	69fa      	ldr	r2, [r7, #28]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69fa      	ldr	r2, [r7, #28]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a99      	ldr	r2, [pc, #612]	; (8004db0 <UART_SetConfig+0x2e8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d121      	bne.n	8004b92 <UART_SetConfig+0xca>
 8004b4e:	4b99      	ldr	r3, [pc, #612]	; (8004db4 <UART_SetConfig+0x2ec>)
 8004b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b54:	f003 0303 	and.w	r3, r3, #3
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d817      	bhi.n	8004b8c <UART_SetConfig+0xc4>
 8004b5c:	a201      	add	r2, pc, #4	; (adr r2, 8004b64 <UART_SetConfig+0x9c>)
 8004b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b62:	bf00      	nop
 8004b64:	08004b75 	.word	0x08004b75
 8004b68:	08004b81 	.word	0x08004b81
 8004b6c:	08004b7b 	.word	0x08004b7b
 8004b70:	08004b87 	.word	0x08004b87
 8004b74:	2301      	movs	r3, #1
 8004b76:	76fb      	strb	r3, [r7, #27]
 8004b78:	e0e7      	b.n	8004d4a <UART_SetConfig+0x282>
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	76fb      	strb	r3, [r7, #27]
 8004b7e:	e0e4      	b.n	8004d4a <UART_SetConfig+0x282>
 8004b80:	2304      	movs	r3, #4
 8004b82:	76fb      	strb	r3, [r7, #27]
 8004b84:	e0e1      	b.n	8004d4a <UART_SetConfig+0x282>
 8004b86:	2308      	movs	r3, #8
 8004b88:	76fb      	strb	r3, [r7, #27]
 8004b8a:	e0de      	b.n	8004d4a <UART_SetConfig+0x282>
 8004b8c:	2310      	movs	r3, #16
 8004b8e:	76fb      	strb	r3, [r7, #27]
 8004b90:	e0db      	b.n	8004d4a <UART_SetConfig+0x282>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a88      	ldr	r2, [pc, #544]	; (8004db8 <UART_SetConfig+0x2f0>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d132      	bne.n	8004c02 <UART_SetConfig+0x13a>
 8004b9c:	4b85      	ldr	r3, [pc, #532]	; (8004db4 <UART_SetConfig+0x2ec>)
 8004b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba2:	f003 030c 	and.w	r3, r3, #12
 8004ba6:	2b0c      	cmp	r3, #12
 8004ba8:	d828      	bhi.n	8004bfc <UART_SetConfig+0x134>
 8004baa:	a201      	add	r2, pc, #4	; (adr r2, 8004bb0 <UART_SetConfig+0xe8>)
 8004bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb0:	08004be5 	.word	0x08004be5
 8004bb4:	08004bfd 	.word	0x08004bfd
 8004bb8:	08004bfd 	.word	0x08004bfd
 8004bbc:	08004bfd 	.word	0x08004bfd
 8004bc0:	08004bf1 	.word	0x08004bf1
 8004bc4:	08004bfd 	.word	0x08004bfd
 8004bc8:	08004bfd 	.word	0x08004bfd
 8004bcc:	08004bfd 	.word	0x08004bfd
 8004bd0:	08004beb 	.word	0x08004beb
 8004bd4:	08004bfd 	.word	0x08004bfd
 8004bd8:	08004bfd 	.word	0x08004bfd
 8004bdc:	08004bfd 	.word	0x08004bfd
 8004be0:	08004bf7 	.word	0x08004bf7
 8004be4:	2300      	movs	r3, #0
 8004be6:	76fb      	strb	r3, [r7, #27]
 8004be8:	e0af      	b.n	8004d4a <UART_SetConfig+0x282>
 8004bea:	2302      	movs	r3, #2
 8004bec:	76fb      	strb	r3, [r7, #27]
 8004bee:	e0ac      	b.n	8004d4a <UART_SetConfig+0x282>
 8004bf0:	2304      	movs	r3, #4
 8004bf2:	76fb      	strb	r3, [r7, #27]
 8004bf4:	e0a9      	b.n	8004d4a <UART_SetConfig+0x282>
 8004bf6:	2308      	movs	r3, #8
 8004bf8:	76fb      	strb	r3, [r7, #27]
 8004bfa:	e0a6      	b.n	8004d4a <UART_SetConfig+0x282>
 8004bfc:	2310      	movs	r3, #16
 8004bfe:	76fb      	strb	r3, [r7, #27]
 8004c00:	e0a3      	b.n	8004d4a <UART_SetConfig+0x282>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a6d      	ldr	r2, [pc, #436]	; (8004dbc <UART_SetConfig+0x2f4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d120      	bne.n	8004c4e <UART_SetConfig+0x186>
 8004c0c:	4b69      	ldr	r3, [pc, #420]	; (8004db4 <UART_SetConfig+0x2ec>)
 8004c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c12:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c16:	2b30      	cmp	r3, #48	; 0x30
 8004c18:	d013      	beq.n	8004c42 <UART_SetConfig+0x17a>
 8004c1a:	2b30      	cmp	r3, #48	; 0x30
 8004c1c:	d814      	bhi.n	8004c48 <UART_SetConfig+0x180>
 8004c1e:	2b20      	cmp	r3, #32
 8004c20:	d009      	beq.n	8004c36 <UART_SetConfig+0x16e>
 8004c22:	2b20      	cmp	r3, #32
 8004c24:	d810      	bhi.n	8004c48 <UART_SetConfig+0x180>
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <UART_SetConfig+0x168>
 8004c2a:	2b10      	cmp	r3, #16
 8004c2c:	d006      	beq.n	8004c3c <UART_SetConfig+0x174>
 8004c2e:	e00b      	b.n	8004c48 <UART_SetConfig+0x180>
 8004c30:	2300      	movs	r3, #0
 8004c32:	76fb      	strb	r3, [r7, #27]
 8004c34:	e089      	b.n	8004d4a <UART_SetConfig+0x282>
 8004c36:	2302      	movs	r3, #2
 8004c38:	76fb      	strb	r3, [r7, #27]
 8004c3a:	e086      	b.n	8004d4a <UART_SetConfig+0x282>
 8004c3c:	2304      	movs	r3, #4
 8004c3e:	76fb      	strb	r3, [r7, #27]
 8004c40:	e083      	b.n	8004d4a <UART_SetConfig+0x282>
 8004c42:	2308      	movs	r3, #8
 8004c44:	76fb      	strb	r3, [r7, #27]
 8004c46:	e080      	b.n	8004d4a <UART_SetConfig+0x282>
 8004c48:	2310      	movs	r3, #16
 8004c4a:	76fb      	strb	r3, [r7, #27]
 8004c4c:	e07d      	b.n	8004d4a <UART_SetConfig+0x282>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a5b      	ldr	r2, [pc, #364]	; (8004dc0 <UART_SetConfig+0x2f8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d120      	bne.n	8004c9a <UART_SetConfig+0x1d2>
 8004c58:	4b56      	ldr	r3, [pc, #344]	; (8004db4 <UART_SetConfig+0x2ec>)
 8004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c62:	2bc0      	cmp	r3, #192	; 0xc0
 8004c64:	d013      	beq.n	8004c8e <UART_SetConfig+0x1c6>
 8004c66:	2bc0      	cmp	r3, #192	; 0xc0
 8004c68:	d814      	bhi.n	8004c94 <UART_SetConfig+0x1cc>
 8004c6a:	2b80      	cmp	r3, #128	; 0x80
 8004c6c:	d009      	beq.n	8004c82 <UART_SetConfig+0x1ba>
 8004c6e:	2b80      	cmp	r3, #128	; 0x80
 8004c70:	d810      	bhi.n	8004c94 <UART_SetConfig+0x1cc>
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <UART_SetConfig+0x1b4>
 8004c76:	2b40      	cmp	r3, #64	; 0x40
 8004c78:	d006      	beq.n	8004c88 <UART_SetConfig+0x1c0>
 8004c7a:	e00b      	b.n	8004c94 <UART_SetConfig+0x1cc>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	76fb      	strb	r3, [r7, #27]
 8004c80:	e063      	b.n	8004d4a <UART_SetConfig+0x282>
 8004c82:	2302      	movs	r3, #2
 8004c84:	76fb      	strb	r3, [r7, #27]
 8004c86:	e060      	b.n	8004d4a <UART_SetConfig+0x282>
 8004c88:	2304      	movs	r3, #4
 8004c8a:	76fb      	strb	r3, [r7, #27]
 8004c8c:	e05d      	b.n	8004d4a <UART_SetConfig+0x282>
 8004c8e:	2308      	movs	r3, #8
 8004c90:	76fb      	strb	r3, [r7, #27]
 8004c92:	e05a      	b.n	8004d4a <UART_SetConfig+0x282>
 8004c94:	2310      	movs	r3, #16
 8004c96:	76fb      	strb	r3, [r7, #27]
 8004c98:	e057      	b.n	8004d4a <UART_SetConfig+0x282>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a49      	ldr	r2, [pc, #292]	; (8004dc4 <UART_SetConfig+0x2fc>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d125      	bne.n	8004cf0 <UART_SetConfig+0x228>
 8004ca4:	4b43      	ldr	r3, [pc, #268]	; (8004db4 <UART_SetConfig+0x2ec>)
 8004ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cb2:	d017      	beq.n	8004ce4 <UART_SetConfig+0x21c>
 8004cb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cb8:	d817      	bhi.n	8004cea <UART_SetConfig+0x222>
 8004cba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cbe:	d00b      	beq.n	8004cd8 <UART_SetConfig+0x210>
 8004cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cc4:	d811      	bhi.n	8004cea <UART_SetConfig+0x222>
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <UART_SetConfig+0x20a>
 8004cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cce:	d006      	beq.n	8004cde <UART_SetConfig+0x216>
 8004cd0:	e00b      	b.n	8004cea <UART_SetConfig+0x222>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	76fb      	strb	r3, [r7, #27]
 8004cd6:	e038      	b.n	8004d4a <UART_SetConfig+0x282>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	76fb      	strb	r3, [r7, #27]
 8004cdc:	e035      	b.n	8004d4a <UART_SetConfig+0x282>
 8004cde:	2304      	movs	r3, #4
 8004ce0:	76fb      	strb	r3, [r7, #27]
 8004ce2:	e032      	b.n	8004d4a <UART_SetConfig+0x282>
 8004ce4:	2308      	movs	r3, #8
 8004ce6:	76fb      	strb	r3, [r7, #27]
 8004ce8:	e02f      	b.n	8004d4a <UART_SetConfig+0x282>
 8004cea:	2310      	movs	r3, #16
 8004cec:	76fb      	strb	r3, [r7, #27]
 8004cee:	e02c      	b.n	8004d4a <UART_SetConfig+0x282>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a2d      	ldr	r2, [pc, #180]	; (8004dac <UART_SetConfig+0x2e4>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d125      	bne.n	8004d46 <UART_SetConfig+0x27e>
 8004cfa:	4b2e      	ldr	r3, [pc, #184]	; (8004db4 <UART_SetConfig+0x2ec>)
 8004cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d08:	d017      	beq.n	8004d3a <UART_SetConfig+0x272>
 8004d0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d0e:	d817      	bhi.n	8004d40 <UART_SetConfig+0x278>
 8004d10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d14:	d00b      	beq.n	8004d2e <UART_SetConfig+0x266>
 8004d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d1a:	d811      	bhi.n	8004d40 <UART_SetConfig+0x278>
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <UART_SetConfig+0x260>
 8004d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d24:	d006      	beq.n	8004d34 <UART_SetConfig+0x26c>
 8004d26:	e00b      	b.n	8004d40 <UART_SetConfig+0x278>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	76fb      	strb	r3, [r7, #27]
 8004d2c:	e00d      	b.n	8004d4a <UART_SetConfig+0x282>
 8004d2e:	2302      	movs	r3, #2
 8004d30:	76fb      	strb	r3, [r7, #27]
 8004d32:	e00a      	b.n	8004d4a <UART_SetConfig+0x282>
 8004d34:	2304      	movs	r3, #4
 8004d36:	76fb      	strb	r3, [r7, #27]
 8004d38:	e007      	b.n	8004d4a <UART_SetConfig+0x282>
 8004d3a:	2308      	movs	r3, #8
 8004d3c:	76fb      	strb	r3, [r7, #27]
 8004d3e:	e004      	b.n	8004d4a <UART_SetConfig+0x282>
 8004d40:	2310      	movs	r3, #16
 8004d42:	76fb      	strb	r3, [r7, #27]
 8004d44:	e001      	b.n	8004d4a <UART_SetConfig+0x282>
 8004d46:	2310      	movs	r3, #16
 8004d48:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a17      	ldr	r2, [pc, #92]	; (8004dac <UART_SetConfig+0x2e4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	f040 8087 	bne.w	8004e64 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d56:	7efb      	ldrb	r3, [r7, #27]
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d837      	bhi.n	8004dcc <UART_SetConfig+0x304>
 8004d5c:	a201      	add	r2, pc, #4	; (adr r2, 8004d64 <UART_SetConfig+0x29c>)
 8004d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d62:	bf00      	nop
 8004d64:	08004d89 	.word	0x08004d89
 8004d68:	08004dcd 	.word	0x08004dcd
 8004d6c:	08004d91 	.word	0x08004d91
 8004d70:	08004dcd 	.word	0x08004dcd
 8004d74:	08004d97 	.word	0x08004d97
 8004d78:	08004dcd 	.word	0x08004dcd
 8004d7c:	08004dcd 	.word	0x08004dcd
 8004d80:	08004dcd 	.word	0x08004dcd
 8004d84:	08004d9f 	.word	0x08004d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d88:	f7fd ff42 	bl	8002c10 <HAL_RCC_GetPCLK1Freq>
 8004d8c:	6178      	str	r0, [r7, #20]
        break;
 8004d8e:	e022      	b.n	8004dd6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d90:	4b0d      	ldr	r3, [pc, #52]	; (8004dc8 <UART_SetConfig+0x300>)
 8004d92:	617b      	str	r3, [r7, #20]
        break;
 8004d94:	e01f      	b.n	8004dd6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d96:	f7fd fea3 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8004d9a:	6178      	str	r0, [r7, #20]
        break;
 8004d9c:	e01b      	b.n	8004dd6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004da2:	617b      	str	r3, [r7, #20]
        break;
 8004da4:	e017      	b.n	8004dd6 <UART_SetConfig+0x30e>
 8004da6:	bf00      	nop
 8004da8:	efff69f3 	.word	0xefff69f3
 8004dac:	40008000 	.word	0x40008000
 8004db0:	40013800 	.word	0x40013800
 8004db4:	40021000 	.word	0x40021000
 8004db8:	40004400 	.word	0x40004400
 8004dbc:	40004800 	.word	0x40004800
 8004dc0:	40004c00 	.word	0x40004c00
 8004dc4:	40005000 	.word	0x40005000
 8004dc8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	76bb      	strb	r3, [r7, #26]
        break;
 8004dd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 80f1 	beq.w	8004fc0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	4613      	mov	r3, r2
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	4413      	add	r3, r2
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d305      	bcc.n	8004dfa <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d902      	bls.n	8004e00 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	76bb      	strb	r3, [r7, #26]
 8004dfe:	e0df      	b.n	8004fc0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f04f 0100 	mov.w	r1, #0
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	f04f 0300 	mov.w	r3, #0
 8004e10:	020b      	lsls	r3, r1, #8
 8004e12:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e16:	0202      	lsls	r2, r0, #8
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	6849      	ldr	r1, [r1, #4]
 8004e1c:	0849      	lsrs	r1, r1, #1
 8004e1e:	4608      	mov	r0, r1
 8004e20:	f04f 0100 	mov.w	r1, #0
 8004e24:	1814      	adds	r4, r2, r0
 8004e26:	eb43 0501 	adc.w	r5, r3, r1
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	4620      	mov	r0, r4
 8004e36:	4629      	mov	r1, r5
 8004e38:	f7fb fccc 	bl	80007d4 <__aeabi_uldivmod>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4613      	mov	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e4a:	d308      	bcc.n	8004e5e <UART_SetConfig+0x396>
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e52:	d204      	bcs.n	8004e5e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	60da      	str	r2, [r3, #12]
 8004e5c:	e0b0      	b.n	8004fc0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	76bb      	strb	r3, [r7, #26]
 8004e62:	e0ad      	b.n	8004fc0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e6c:	d15c      	bne.n	8004f28 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004e6e:	7efb      	ldrb	r3, [r7, #27]
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d828      	bhi.n	8004ec6 <UART_SetConfig+0x3fe>
 8004e74:	a201      	add	r2, pc, #4	; (adr r2, 8004e7c <UART_SetConfig+0x3b4>)
 8004e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7a:	bf00      	nop
 8004e7c:	08004ea1 	.word	0x08004ea1
 8004e80:	08004ea9 	.word	0x08004ea9
 8004e84:	08004eb1 	.word	0x08004eb1
 8004e88:	08004ec7 	.word	0x08004ec7
 8004e8c:	08004eb7 	.word	0x08004eb7
 8004e90:	08004ec7 	.word	0x08004ec7
 8004e94:	08004ec7 	.word	0x08004ec7
 8004e98:	08004ec7 	.word	0x08004ec7
 8004e9c:	08004ebf 	.word	0x08004ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ea0:	f7fd feb6 	bl	8002c10 <HAL_RCC_GetPCLK1Freq>
 8004ea4:	6178      	str	r0, [r7, #20]
        break;
 8004ea6:	e013      	b.n	8004ed0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ea8:	f7fd fec8 	bl	8002c3c <HAL_RCC_GetPCLK2Freq>
 8004eac:	6178      	str	r0, [r7, #20]
        break;
 8004eae:	e00f      	b.n	8004ed0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eb0:	4b49      	ldr	r3, [pc, #292]	; (8004fd8 <UART_SetConfig+0x510>)
 8004eb2:	617b      	str	r3, [r7, #20]
        break;
 8004eb4:	e00c      	b.n	8004ed0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eb6:	f7fd fe13 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8004eba:	6178      	str	r0, [r7, #20]
        break;
 8004ebc:	e008      	b.n	8004ed0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ec2:	617b      	str	r3, [r7, #20]
        break;
 8004ec4:	e004      	b.n	8004ed0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	76bb      	strb	r3, [r7, #26]
        break;
 8004ece:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d074      	beq.n	8004fc0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	005a      	lsls	r2, r3, #1
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	085b      	lsrs	r3, r3, #1
 8004ee0:	441a      	add	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	2b0f      	cmp	r3, #15
 8004ef2:	d916      	bls.n	8004f22 <UART_SetConfig+0x45a>
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004efa:	d212      	bcs.n	8004f22 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	f023 030f 	bic.w	r3, r3, #15
 8004f04:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	085b      	lsrs	r3, r3, #1
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	89fb      	ldrh	r3, [r7, #14]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	89fa      	ldrh	r2, [r7, #14]
 8004f1e:	60da      	str	r2, [r3, #12]
 8004f20:	e04e      	b.n	8004fc0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	76bb      	strb	r3, [r7, #26]
 8004f26:	e04b      	b.n	8004fc0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f28:	7efb      	ldrb	r3, [r7, #27]
 8004f2a:	2b08      	cmp	r3, #8
 8004f2c:	d827      	bhi.n	8004f7e <UART_SetConfig+0x4b6>
 8004f2e:	a201      	add	r2, pc, #4	; (adr r2, 8004f34 <UART_SetConfig+0x46c>)
 8004f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f34:	08004f59 	.word	0x08004f59
 8004f38:	08004f61 	.word	0x08004f61
 8004f3c:	08004f69 	.word	0x08004f69
 8004f40:	08004f7f 	.word	0x08004f7f
 8004f44:	08004f6f 	.word	0x08004f6f
 8004f48:	08004f7f 	.word	0x08004f7f
 8004f4c:	08004f7f 	.word	0x08004f7f
 8004f50:	08004f7f 	.word	0x08004f7f
 8004f54:	08004f77 	.word	0x08004f77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f58:	f7fd fe5a 	bl	8002c10 <HAL_RCC_GetPCLK1Freq>
 8004f5c:	6178      	str	r0, [r7, #20]
        break;
 8004f5e:	e013      	b.n	8004f88 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f60:	f7fd fe6c 	bl	8002c3c <HAL_RCC_GetPCLK2Freq>
 8004f64:	6178      	str	r0, [r7, #20]
        break;
 8004f66:	e00f      	b.n	8004f88 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f68:	4b1b      	ldr	r3, [pc, #108]	; (8004fd8 <UART_SetConfig+0x510>)
 8004f6a:	617b      	str	r3, [r7, #20]
        break;
 8004f6c:	e00c      	b.n	8004f88 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f6e:	f7fd fdb7 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8004f72:	6178      	str	r0, [r7, #20]
        break;
 8004f74:	e008      	b.n	8004f88 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f7a:	617b      	str	r3, [r7, #20]
        break;
 8004f7c:	e004      	b.n	8004f88 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	76bb      	strb	r3, [r7, #26]
        break;
 8004f86:	bf00      	nop
    }

    if (pclk != 0U)
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d018      	beq.n	8004fc0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	085a      	lsrs	r2, r3, #1
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	441a      	add	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	2b0f      	cmp	r3, #15
 8004fa8:	d908      	bls.n	8004fbc <UART_SetConfig+0x4f4>
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb0:	d204      	bcs.n	8004fbc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	60da      	str	r2, [r3, #12]
 8004fba:	e001      	b.n	8004fc0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004fcc:	7ebb      	ldrb	r3, [r7, #26]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3720      	adds	r7, #32
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bdb0      	pop	{r4, r5, r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	00f42400 	.word	0x00f42400

08004fdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00a      	beq.n	8005006 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	f003 0304 	and.w	r3, r3, #4
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	f003 0308 	and.w	r3, r3, #8
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	f003 0310 	and.w	r3, r3, #16
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00a      	beq.n	800508e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	f003 0320 	and.w	r3, r3, #32
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d01a      	beq.n	80050f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050da:	d10a      	bne.n	80050f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00a      	beq.n	8005114 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	605a      	str	r2, [r3, #4]
  }
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af02      	add	r7, sp, #8
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005130:	f7fc fc76 	bl	8001a20 <HAL_GetTick>
 8005134:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0308 	and.w	r3, r3, #8
 8005140:	2b08      	cmp	r3, #8
 8005142:	d10e      	bne.n	8005162 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005144:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f82d 	bl	80051b2 <UART_WaitOnFlagUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e023      	b.n	80051aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b04      	cmp	r3, #4
 800516e:	d10e      	bne.n	800518e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005170:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f817 	bl	80051b2 <UART_WaitOnFlagUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e00d      	b.n	80051aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2220      	movs	r2, #32
 8005192:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2220      	movs	r2, #32
 8005198:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b084      	sub	sp, #16
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	60f8      	str	r0, [r7, #12]
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	603b      	str	r3, [r7, #0]
 80051be:	4613      	mov	r3, r2
 80051c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051c2:	e05e      	b.n	8005282 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051ca:	d05a      	beq.n	8005282 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051cc:	f7fc fc28 	bl	8001a20 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d302      	bcc.n	80051e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d11b      	bne.n	800521a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80051f0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0201 	bic.w	r2, r2, #1
 8005200:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2220      	movs	r2, #32
 8005206:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2220      	movs	r2, #32
 800520c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e043      	b.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	2b00      	cmp	r3, #0
 8005226:	d02c      	beq.n	8005282 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005232:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005236:	d124      	bne.n	8005282 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005240:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005250:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0201 	bic.w	r2, r2, #1
 8005260:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2220      	movs	r2, #32
 8005266:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2220      	movs	r2, #32
 800526c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2220      	movs	r2, #32
 8005272:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e00f      	b.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69da      	ldr	r2, [r3, #28]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	4013      	ands	r3, r2
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	429a      	cmp	r2, r3
 8005290:	bf0c      	ite	eq
 8005292:	2301      	moveq	r3, #1
 8005294:	2300      	movne	r3, #0
 8005296:	b2db      	uxtb	r3, r3
 8005298:	461a      	mov	r2, r3
 800529a:	79fb      	ldrb	r3, [r7, #7]
 800529c:	429a      	cmp	r2, r3
 800529e:	d091      	beq.n	80051c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
	...

080052ac <__libc_init_array>:
 80052ac:	b570      	push	{r4, r5, r6, lr}
 80052ae:	4d0d      	ldr	r5, [pc, #52]	; (80052e4 <__libc_init_array+0x38>)
 80052b0:	4c0d      	ldr	r4, [pc, #52]	; (80052e8 <__libc_init_array+0x3c>)
 80052b2:	1b64      	subs	r4, r4, r5
 80052b4:	10a4      	asrs	r4, r4, #2
 80052b6:	2600      	movs	r6, #0
 80052b8:	42a6      	cmp	r6, r4
 80052ba:	d109      	bne.n	80052d0 <__libc_init_array+0x24>
 80052bc:	4d0b      	ldr	r5, [pc, #44]	; (80052ec <__libc_init_array+0x40>)
 80052be:	4c0c      	ldr	r4, [pc, #48]	; (80052f0 <__libc_init_array+0x44>)
 80052c0:	f000 f820 	bl	8005304 <_init>
 80052c4:	1b64      	subs	r4, r4, r5
 80052c6:	10a4      	asrs	r4, r4, #2
 80052c8:	2600      	movs	r6, #0
 80052ca:	42a6      	cmp	r6, r4
 80052cc:	d105      	bne.n	80052da <__libc_init_array+0x2e>
 80052ce:	bd70      	pop	{r4, r5, r6, pc}
 80052d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052d4:	4798      	blx	r3
 80052d6:	3601      	adds	r6, #1
 80052d8:	e7ee      	b.n	80052b8 <__libc_init_array+0xc>
 80052da:	f855 3b04 	ldr.w	r3, [r5], #4
 80052de:	4798      	blx	r3
 80052e0:	3601      	adds	r6, #1
 80052e2:	e7f2      	b.n	80052ca <__libc_init_array+0x1e>
 80052e4:	0800536c 	.word	0x0800536c
 80052e8:	0800536c 	.word	0x0800536c
 80052ec:	0800536c 	.word	0x0800536c
 80052f0:	08005370 	.word	0x08005370

080052f4 <memset>:
 80052f4:	4402      	add	r2, r0
 80052f6:	4603      	mov	r3, r0
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d100      	bne.n	80052fe <memset+0xa>
 80052fc:	4770      	bx	lr
 80052fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005302:	e7f9      	b.n	80052f8 <memset+0x4>

08005304 <_init>:
 8005304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005306:	bf00      	nop
 8005308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530a:	bc08      	pop	{r3}
 800530c:	469e      	mov	lr, r3
 800530e:	4770      	bx	lr

08005310 <_fini>:
 8005310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005312:	bf00      	nop
 8005314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005316:	bc08      	pop	{r3}
 8005318:	469e      	mov	lr, r3
 800531a:	4770      	bx	lr
